// Code generated by protoc-gen-go.
// source: dota_gcmessages_client_fantasy.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ETournamentGameState int32

const (
	ETournamentGameState_k_ETournamentGameState_Unknown              ETournamentGameState = 0
	ETournamentGameState_k_ETournamentGameState_Canceled             ETournamentGameState = 1
	ETournamentGameState_k_ETournamentGameState_Scheduled            ETournamentGameState = 2
	ETournamentGameState_k_ETournamentGameState_Active               ETournamentGameState = 3
	ETournamentGameState_k_ETournamentGameState_RadVictory           ETournamentGameState = 20
	ETournamentGameState_k_ETournamentGameState_DireVictory          ETournamentGameState = 21
	ETournamentGameState_k_ETournamentGameState_RadVictoryByForfeit  ETournamentGameState = 22
	ETournamentGameState_k_ETournamentGameState_DireVictoryByForfeit ETournamentGameState = 23
	ETournamentGameState_k_ETournamentGameState_ServerFailure        ETournamentGameState = 40
	ETournamentGameState_k_ETournamentGameState_NotNeeded            ETournamentGameState = 41
)

var ETournamentGameState_name = map[int32]string{
	0:  "k_ETournamentGameState_Unknown",
	1:  "k_ETournamentGameState_Canceled",
	2:  "k_ETournamentGameState_Scheduled",
	3:  "k_ETournamentGameState_Active",
	20: "k_ETournamentGameState_RadVictory",
	21: "k_ETournamentGameState_DireVictory",
	22: "k_ETournamentGameState_RadVictoryByForfeit",
	23: "k_ETournamentGameState_DireVictoryByForfeit",
	40: "k_ETournamentGameState_ServerFailure",
	41: "k_ETournamentGameState_NotNeeded",
}
var ETournamentGameState_value = map[string]int32{
	"k_ETournamentGameState_Unknown":              0,
	"k_ETournamentGameState_Canceled":             1,
	"k_ETournamentGameState_Scheduled":            2,
	"k_ETournamentGameState_Active":               3,
	"k_ETournamentGameState_RadVictory":           20,
	"k_ETournamentGameState_DireVictory":          21,
	"k_ETournamentGameState_RadVictoryByForfeit":  22,
	"k_ETournamentGameState_DireVictoryByForfeit": 23,
	"k_ETournamentGameState_ServerFailure":        40,
	"k_ETournamentGameState_NotNeeded":            41,
}

func (x ETournamentGameState) Enum() *ETournamentGameState {
	p := new(ETournamentGameState)
	*p = x
	return p
}
func (x ETournamentGameState) String() string {
	return proto.EnumName(ETournamentGameState_name, int32(x))
}
func (x *ETournamentGameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentGameState_value, data, "ETournamentGameState")
	if err != nil {
		return err
	}
	*x = ETournamentGameState(value)
	return nil
}
func (ETournamentGameState) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

type ETournamentTeamState int32

const (
	ETournamentTeamState_k_ETournamentTeamState_Unknown      ETournamentTeamState = 0
	ETournamentTeamState_k_ETournamentTeamState_Node1        ETournamentTeamState = 1
	ETournamentTeamState_k_ETournamentTeamState_NodeMax      ETournamentTeamState = 1024
	ETournamentTeamState_k_ETournamentTeamState_Eliminated   ETournamentTeamState = 14003
	ETournamentTeamState_k_ETournamentTeamState_Forfeited    ETournamentTeamState = 14004
	ETournamentTeamState_k_ETournamentTeamState_Refunded     ETournamentTeamState = 14005
	ETournamentTeamState_k_ETournamentTeamState_Finished1st  ETournamentTeamState = 15001
	ETournamentTeamState_k_ETournamentTeamState_Finished2nd  ETournamentTeamState = 15002
	ETournamentTeamState_k_ETournamentTeamState_Finished3rd  ETournamentTeamState = 15003
	ETournamentTeamState_k_ETournamentTeamState_Finished4th  ETournamentTeamState = 15004
	ETournamentTeamState_k_ETournamentTeamState_Finished5th  ETournamentTeamState = 15005
	ETournamentTeamState_k_ETournamentTeamState_Finished6th  ETournamentTeamState = 15006
	ETournamentTeamState_k_ETournamentTeamState_Finished7th  ETournamentTeamState = 15007
	ETournamentTeamState_k_ETournamentTeamState_Finished8th  ETournamentTeamState = 15008
	ETournamentTeamState_k_ETournamentTeamState_Finished9th  ETournamentTeamState = 15009
	ETournamentTeamState_k_ETournamentTeamState_Finished10th ETournamentTeamState = 15010
	ETournamentTeamState_k_ETournamentTeamState_Finished11th ETournamentTeamState = 15011
	ETournamentTeamState_k_ETournamentTeamState_Finished12th ETournamentTeamState = 15012
	ETournamentTeamState_k_ETournamentTeamState_Finished13th ETournamentTeamState = 15013
	ETournamentTeamState_k_ETournamentTeamState_Finished14th ETournamentTeamState = 15014
	ETournamentTeamState_k_ETournamentTeamState_Finished15th ETournamentTeamState = 15015
	ETournamentTeamState_k_ETournamentTeamState_Finished16th ETournamentTeamState = 15016
)

var ETournamentTeamState_name = map[int32]string{
	0:     "k_ETournamentTeamState_Unknown",
	1:     "k_ETournamentTeamState_Node1",
	1024:  "k_ETournamentTeamState_NodeMax",
	14003: "k_ETournamentTeamState_Eliminated",
	14004: "k_ETournamentTeamState_Forfeited",
	14005: "k_ETournamentTeamState_Refunded",
	15001: "k_ETournamentTeamState_Finished1st",
	15002: "k_ETournamentTeamState_Finished2nd",
	15003: "k_ETournamentTeamState_Finished3rd",
	15004: "k_ETournamentTeamState_Finished4th",
	15005: "k_ETournamentTeamState_Finished5th",
	15006: "k_ETournamentTeamState_Finished6th",
	15007: "k_ETournamentTeamState_Finished7th",
	15008: "k_ETournamentTeamState_Finished8th",
	15009: "k_ETournamentTeamState_Finished9th",
	15010: "k_ETournamentTeamState_Finished10th",
	15011: "k_ETournamentTeamState_Finished11th",
	15012: "k_ETournamentTeamState_Finished12th",
	15013: "k_ETournamentTeamState_Finished13th",
	15014: "k_ETournamentTeamState_Finished14th",
	15015: "k_ETournamentTeamState_Finished15th",
	15016: "k_ETournamentTeamState_Finished16th",
}
var ETournamentTeamState_value = map[string]int32{
	"k_ETournamentTeamState_Unknown":      0,
	"k_ETournamentTeamState_Node1":        1,
	"k_ETournamentTeamState_NodeMax":      1024,
	"k_ETournamentTeamState_Eliminated":   14003,
	"k_ETournamentTeamState_Forfeited":    14004,
	"k_ETournamentTeamState_Refunded":     14005,
	"k_ETournamentTeamState_Finished1st":  15001,
	"k_ETournamentTeamState_Finished2nd":  15002,
	"k_ETournamentTeamState_Finished3rd":  15003,
	"k_ETournamentTeamState_Finished4th":  15004,
	"k_ETournamentTeamState_Finished5th":  15005,
	"k_ETournamentTeamState_Finished6th":  15006,
	"k_ETournamentTeamState_Finished7th":  15007,
	"k_ETournamentTeamState_Finished8th":  15008,
	"k_ETournamentTeamState_Finished9th":  15009,
	"k_ETournamentTeamState_Finished10th": 15010,
	"k_ETournamentTeamState_Finished11th": 15011,
	"k_ETournamentTeamState_Finished12th": 15012,
	"k_ETournamentTeamState_Finished13th": 15013,
	"k_ETournamentTeamState_Finished14th": 15014,
	"k_ETournamentTeamState_Finished15th": 15015,
	"k_ETournamentTeamState_Finished16th": 15016,
}

func (x ETournamentTeamState) Enum() *ETournamentTeamState {
	p := new(ETournamentTeamState)
	*p = x
	return p
}
func (x ETournamentTeamState) String() string {
	return proto.EnumName(ETournamentTeamState_name, int32(x))
}
func (x *ETournamentTeamState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentTeamState_value, data, "ETournamentTeamState")
	if err != nil {
		return err
	}
	*x = ETournamentTeamState(value)
	return nil
}
func (ETournamentTeamState) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

type ETournamentState int32

const (
	ETournamentState_k_ETournamentState_Unknown            ETournamentState = 0
	ETournamentState_k_ETournamentState_CanceledByAdmin    ETournamentState = 1
	ETournamentState_k_ETournamentState_Completed          ETournamentState = 2
	ETournamentState_k_ETournamentState_Merged             ETournamentState = 3
	ETournamentState_k_ETournamentState_ServerFailure      ETournamentState = 4
	ETournamentState_k_ETournamentState_TeamAbandoned      ETournamentState = 5
	ETournamentState_k_ETournamentState_TeamTimeoutForfeit ETournamentState = 6
	ETournamentState_k_ETournamentState_TeamTimeoutRefund  ETournamentState = 7
	ETournamentState_k_ETournamentState_InProgress         ETournamentState = 100
	ETournamentState_k_ETournamentState_WaitingToMerge     ETournamentState = 101
)

var ETournamentState_name = map[int32]string{
	0:   "k_ETournamentState_Unknown",
	1:   "k_ETournamentState_CanceledByAdmin",
	2:   "k_ETournamentState_Completed",
	3:   "k_ETournamentState_Merged",
	4:   "k_ETournamentState_ServerFailure",
	5:   "k_ETournamentState_TeamAbandoned",
	6:   "k_ETournamentState_TeamTimeoutForfeit",
	7:   "k_ETournamentState_TeamTimeoutRefund",
	100: "k_ETournamentState_InProgress",
	101: "k_ETournamentState_WaitingToMerge",
}
var ETournamentState_value = map[string]int32{
	"k_ETournamentState_Unknown":            0,
	"k_ETournamentState_CanceledByAdmin":    1,
	"k_ETournamentState_Completed":          2,
	"k_ETournamentState_Merged":             3,
	"k_ETournamentState_ServerFailure":      4,
	"k_ETournamentState_TeamAbandoned":      5,
	"k_ETournamentState_TeamTimeoutForfeit": 6,
	"k_ETournamentState_TeamTimeoutRefund":  7,
	"k_ETournamentState_InProgress":         100,
	"k_ETournamentState_WaitingToMerge":     101,
}

func (x ETournamentState) Enum() *ETournamentState {
	p := new(ETournamentState)
	*p = x
	return p
}
func (x ETournamentState) String() string {
	return proto.EnumName(ETournamentState_name, int32(x))
}
func (x *ETournamentState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentState_value, data, "ETournamentState")
	if err != nil {
		return err
	}
	*x = ETournamentState(value)
	return nil
}
func (ETournamentState) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

type ETournamentNodeState int32

const (
	ETournamentNodeState_k_ETournamentNodeState_Unknown             ETournamentNodeState = 0
	ETournamentNodeState_k_ETournamentNodeState_Canceled            ETournamentNodeState = 1
	ETournamentNodeState_k_ETournamentNodeState_TeamsNotYetAssigned ETournamentNodeState = 2
	ETournamentNodeState_k_ETournamentNodeState_InBetweenGames      ETournamentNodeState = 3
	ETournamentNodeState_k_ETournamentNodeState_GameInProgress      ETournamentNodeState = 4
	ETournamentNodeState_k_ETournamentNodeState_A_Won               ETournamentNodeState = 5
	ETournamentNodeState_k_ETournamentNodeState_B_Won               ETournamentNodeState = 6
	ETournamentNodeState_k_ETournamentNodeState_A_WonByForfeit      ETournamentNodeState = 7
	ETournamentNodeState_k_ETournamentNodeState_B_WonByForfeit      ETournamentNodeState = 8
	ETournamentNodeState_k_ETournamentNodeState_A_Bye               ETournamentNodeState = 9
	ETournamentNodeState_k_ETournamentNodeState_A_Forfeit           ETournamentNodeState = 10
	ETournamentNodeState_k_ETournamentNodeState_ServerFailure       ETournamentNodeState = 11
)

var ETournamentNodeState_name = map[int32]string{
	0:  "k_ETournamentNodeState_Unknown",
	1:  "k_ETournamentNodeState_Canceled",
	2:  "k_ETournamentNodeState_TeamsNotYetAssigned",
	3:  "k_ETournamentNodeState_InBetweenGames",
	4:  "k_ETournamentNodeState_GameInProgress",
	5:  "k_ETournamentNodeState_A_Won",
	6:  "k_ETournamentNodeState_B_Won",
	7:  "k_ETournamentNodeState_A_WonByForfeit",
	8:  "k_ETournamentNodeState_B_WonByForfeit",
	9:  "k_ETournamentNodeState_A_Bye",
	10: "k_ETournamentNodeState_A_Forfeit",
	11: "k_ETournamentNodeState_ServerFailure",
}
var ETournamentNodeState_value = map[string]int32{
	"k_ETournamentNodeState_Unknown":             0,
	"k_ETournamentNodeState_Canceled":            1,
	"k_ETournamentNodeState_TeamsNotYetAssigned": 2,
	"k_ETournamentNodeState_InBetweenGames":      3,
	"k_ETournamentNodeState_GameInProgress":      4,
	"k_ETournamentNodeState_A_Won":               5,
	"k_ETournamentNodeState_B_Won":               6,
	"k_ETournamentNodeState_A_WonByForfeit":      7,
	"k_ETournamentNodeState_B_WonByForfeit":      8,
	"k_ETournamentNodeState_A_Bye":               9,
	"k_ETournamentNodeState_A_Forfeit":           10,
	"k_ETournamentNodeState_ServerFailure":       11,
}

func (x ETournamentNodeState) Enum() *ETournamentNodeState {
	p := new(ETournamentNodeState)
	*p = x
	return p
}
func (x ETournamentNodeState) String() string {
	return proto.EnumName(ETournamentNodeState_name, int32(x))
}
func (x *ETournamentNodeState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentNodeState_value, data, "ETournamentNodeState")
	if err != nil {
		return err
	}
	*x = ETournamentNodeState(value)
	return nil
}
func (ETournamentNodeState) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

type ETournamentEvent int32

const (
	ETournamentEvent_k_ETournamentEvent_None                                      ETournamentEvent = 0
	ETournamentEvent_k_ETournamentEvent_TournamentCreated                         ETournamentEvent = 1
	ETournamentEvent_k_ETournamentEvent_TournamentsMerged                         ETournamentEvent = 2
	ETournamentEvent_k_ETournamentEvent_GameOutcome                               ETournamentEvent = 3
	ETournamentEvent_k_ETournamentEvent_TeamGivenBye                              ETournamentEvent = 4
	ETournamentEvent_k_ETournamentEvent_TournamentCanceledByAdmin                 ETournamentEvent = 5
	ETournamentEvent_k_ETournamentEvent_TeamAbandoned                             ETournamentEvent = 6
	ETournamentEvent_k_ETournamentEvent_ScheduledGameStarted                      ETournamentEvent = 7
	ETournamentEvent_k_ETournamentEvent_Canceled                                  ETournamentEvent = 8
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund  ETournamentEvent = 9
	ETournamentEvent_k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit ETournamentEvent = 10
)

var ETournamentEvent_name = map[int32]string{
	0:  "k_ETournamentEvent_None",
	1:  "k_ETournamentEvent_TournamentCreated",
	2:  "k_ETournamentEvent_TournamentsMerged",
	3:  "k_ETournamentEvent_GameOutcome",
	4:  "k_ETournamentEvent_TeamGivenBye",
	5:  "k_ETournamentEvent_TournamentCanceledByAdmin",
	6:  "k_ETournamentEvent_TeamAbandoned",
	7:  "k_ETournamentEvent_ScheduledGameStarted",
	8:  "k_ETournamentEvent_Canceled",
	9:  "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund",
	10: "k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit",
}
var ETournamentEvent_value = map[string]int32{
	"k_ETournamentEvent_None":                                      0,
	"k_ETournamentEvent_TournamentCreated":                         1,
	"k_ETournamentEvent_TournamentsMerged":                         2,
	"k_ETournamentEvent_GameOutcome":                               3,
	"k_ETournamentEvent_TeamGivenBye":                              4,
	"k_ETournamentEvent_TournamentCanceledByAdmin":                 5,
	"k_ETournamentEvent_TeamAbandoned":                             6,
	"k_ETournamentEvent_ScheduledGameStarted":                      7,
	"k_ETournamentEvent_Canceled":                                  8,
	"k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund":  9,
	"k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit": 10,
}

func (x ETournamentEvent) Enum() *ETournamentEvent {
	p := new(ETournamentEvent)
	*p = x
	return p
}
func (x ETournamentEvent) String() string {
	return proto.EnumName(ETournamentEvent_name, int32(x))
}
func (x *ETournamentEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ETournamentEvent_value, data, "ETournamentEvent")
	if err != nil {
		return err
	}
	*x = ETournamentEvent(value)
	return nil
}
func (ETournamentEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

type DOTA_2013PassportSelectionIndices int32

const (
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0    DOTA_2013PassportSelectionIndices = 0
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_1    DOTA_2013PassportSelectionIndices = 1
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_2    DOTA_2013PassportSelectionIndices = 2
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_3    DOTA_2013PassportSelectionIndices = 3
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_4    DOTA_2013PassportSelectionIndices = 4
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_5    DOTA_2013PassportSelectionIndices = 5
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_6    DOTA_2013PassportSelectionIndices = 6
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_7    DOTA_2013PassportSelectionIndices = 7
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_8    DOTA_2013PassportSelectionIndices = 8
	DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_9    DOTA_2013PassportSelectionIndices = 9
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_0     DOTA_2013PassportSelectionIndices = 10
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_1     DOTA_2013PassportSelectionIndices = 11
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_2     DOTA_2013PassportSelectionIndices = 12
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_3     DOTA_2013PassportSelectionIndices = 13
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_4     DOTA_2013PassportSelectionIndices = 14
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_5     DOTA_2013PassportSelectionIndices = 15
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_6     DOTA_2013PassportSelectionIndices = 16
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_7     DOTA_2013PassportSelectionIndices = 17
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_8     DOTA_2013PassportSelectionIndices = 18
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_9     DOTA_2013PassportSelectionIndices = 19
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_10    DOTA_2013PassportSelectionIndices = 20
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_11    DOTA_2013PassportSelectionIndices = 21
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_12    DOTA_2013PassportSelectionIndices = 22
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_13    DOTA_2013PassportSelectionIndices = 23
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_WEST_14    DOTA_2013PassportSelectionIndices = 24
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_0     DOTA_2013PassportSelectionIndices = 25
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_1     DOTA_2013PassportSelectionIndices = 26
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_2     DOTA_2013PassportSelectionIndices = 27
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_3     DOTA_2013PassportSelectionIndices = 28
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_4     DOTA_2013PassportSelectionIndices = 29
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_5     DOTA_2013PassportSelectionIndices = 30
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_6     DOTA_2013PassportSelectionIndices = 31
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_7     DOTA_2013PassportSelectionIndices = 32
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_8     DOTA_2013PassportSelectionIndices = 33
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_9     DOTA_2013PassportSelectionIndices = 34
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_10    DOTA_2013PassportSelectionIndices = 35
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_11    DOTA_2013PassportSelectionIndices = 36
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_12    DOTA_2013PassportSelectionIndices = 37
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_13    DOTA_2013PassportSelectionIndices = 38
	DOTA_2013PassportSelectionIndices_PP13_SEL_QUALPRED_EAST_14    DOTA_2013PassportSelectionIndices = 39
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM        DOTA_2013PassportSelectionIndices = 40
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER      DOTA_2013PassportSelectionIndices = 41
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_TEAM_LOCK   DOTA_2013PassportSelectionIndices = 42
	DOTA_2013PassportSelectionIndices_PP13_SEL_TEAMCUP_PLAYER_LOCK DOTA_2013PassportSelectionIndices = 43
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_0         DOTA_2013PassportSelectionIndices = 44
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_1         DOTA_2013PassportSelectionIndices = 45
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_2         DOTA_2013PassportSelectionIndices = 46
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_3         DOTA_2013PassportSelectionIndices = 47
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_4         DOTA_2013PassportSelectionIndices = 48
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_5         DOTA_2013PassportSelectionIndices = 49
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_6         DOTA_2013PassportSelectionIndices = 50
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_7         DOTA_2013PassportSelectionIndices = 51
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_8         DOTA_2013PassportSelectionIndices = 52
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_9         DOTA_2013PassportSelectionIndices = 53
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_10        DOTA_2013PassportSelectionIndices = 54
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_11        DOTA_2013PassportSelectionIndices = 55
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_12        DOTA_2013PassportSelectionIndices = 56
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_13        DOTA_2013PassportSelectionIndices = 57
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_14        DOTA_2013PassportSelectionIndices = 58
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_15        DOTA_2013PassportSelectionIndices = 59
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_16        DOTA_2013PassportSelectionIndices = 60
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_17        DOTA_2013PassportSelectionIndices = 61
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_18        DOTA_2013PassportSelectionIndices = 62
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_19        DOTA_2013PassportSelectionIndices = 63
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_20        DOTA_2013PassportSelectionIndices = 64
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_21        DOTA_2013PassportSelectionIndices = 65
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_22        DOTA_2013PassportSelectionIndices = 66
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_23        DOTA_2013PassportSelectionIndices = 67
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_24        DOTA_2013PassportSelectionIndices = 68
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_25        DOTA_2013PassportSelectionIndices = 69
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_26        DOTA_2013PassportSelectionIndices = 70
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_27        DOTA_2013PassportSelectionIndices = 71
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_28        DOTA_2013PassportSelectionIndices = 72
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_29        DOTA_2013PassportSelectionIndices = 73
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_30        DOTA_2013PassportSelectionIndices = 74
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_31        DOTA_2013PassportSelectionIndices = 75
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_32        DOTA_2013PassportSelectionIndices = 76
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_33        DOTA_2013PassportSelectionIndices = 77
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_34        DOTA_2013PassportSelectionIndices = 78
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_35        DOTA_2013PassportSelectionIndices = 79
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_36        DOTA_2013PassportSelectionIndices = 80
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_37        DOTA_2013PassportSelectionIndices = 81
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_38        DOTA_2013PassportSelectionIndices = 82
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_39        DOTA_2013PassportSelectionIndices = 83
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_40        DOTA_2013PassportSelectionIndices = 84
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_41        DOTA_2013PassportSelectionIndices = 85
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_42        DOTA_2013PassportSelectionIndices = 86
	DOTA_2013PassportSelectionIndices_PP13_SEL_EVENTPRED_43        DOTA_2013PassportSelectionIndices = 87
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_0              DOTA_2013PassportSelectionIndices = 88
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_1              DOTA_2013PassportSelectionIndices = 89
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_2              DOTA_2013PassportSelectionIndices = 90
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_3              DOTA_2013PassportSelectionIndices = 91
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_4              DOTA_2013PassportSelectionIndices = 92
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_5              DOTA_2013PassportSelectionIndices = 93
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_6              DOTA_2013PassportSelectionIndices = 94
	DOTA_2013PassportSelectionIndices_PP13_SEL_SOLO_7              DOTA_2013PassportSelectionIndices = 95
)

var DOTA_2013PassportSelectionIndices_name = map[int32]string{
	0:  "PP13_SEL_ALLSTAR_PLAYER_0",
	1:  "PP13_SEL_ALLSTAR_PLAYER_1",
	2:  "PP13_SEL_ALLSTAR_PLAYER_2",
	3:  "PP13_SEL_ALLSTAR_PLAYER_3",
	4:  "PP13_SEL_ALLSTAR_PLAYER_4",
	5:  "PP13_SEL_ALLSTAR_PLAYER_5",
	6:  "PP13_SEL_ALLSTAR_PLAYER_6",
	7:  "PP13_SEL_ALLSTAR_PLAYER_7",
	8:  "PP13_SEL_ALLSTAR_PLAYER_8",
	9:  "PP13_SEL_ALLSTAR_PLAYER_9",
	10: "PP13_SEL_QUALPRED_WEST_0",
	11: "PP13_SEL_QUALPRED_WEST_1",
	12: "PP13_SEL_QUALPRED_WEST_2",
	13: "PP13_SEL_QUALPRED_WEST_3",
	14: "PP13_SEL_QUALPRED_WEST_4",
	15: "PP13_SEL_QUALPRED_WEST_5",
	16: "PP13_SEL_QUALPRED_WEST_6",
	17: "PP13_SEL_QUALPRED_WEST_7",
	18: "PP13_SEL_QUALPRED_WEST_8",
	19: "PP13_SEL_QUALPRED_WEST_9",
	20: "PP13_SEL_QUALPRED_WEST_10",
	21: "PP13_SEL_QUALPRED_WEST_11",
	22: "PP13_SEL_QUALPRED_WEST_12",
	23: "PP13_SEL_QUALPRED_WEST_13",
	24: "PP13_SEL_QUALPRED_WEST_14",
	25: "PP13_SEL_QUALPRED_EAST_0",
	26: "PP13_SEL_QUALPRED_EAST_1",
	27: "PP13_SEL_QUALPRED_EAST_2",
	28: "PP13_SEL_QUALPRED_EAST_3",
	29: "PP13_SEL_QUALPRED_EAST_4",
	30: "PP13_SEL_QUALPRED_EAST_5",
	31: "PP13_SEL_QUALPRED_EAST_6",
	32: "PP13_SEL_QUALPRED_EAST_7",
	33: "PP13_SEL_QUALPRED_EAST_8",
	34: "PP13_SEL_QUALPRED_EAST_9",
	35: "PP13_SEL_QUALPRED_EAST_10",
	36: "PP13_SEL_QUALPRED_EAST_11",
	37: "PP13_SEL_QUALPRED_EAST_12",
	38: "PP13_SEL_QUALPRED_EAST_13",
	39: "PP13_SEL_QUALPRED_EAST_14",
	40: "PP13_SEL_TEAMCUP_TEAM",
	41: "PP13_SEL_TEAMCUP_PLAYER",
	42: "PP13_SEL_TEAMCUP_TEAM_LOCK",
	43: "PP13_SEL_TEAMCUP_PLAYER_LOCK",
	44: "PP13_SEL_EVENTPRED_0",
	45: "PP13_SEL_EVENTPRED_1",
	46: "PP13_SEL_EVENTPRED_2",
	47: "PP13_SEL_EVENTPRED_3",
	48: "PP13_SEL_EVENTPRED_4",
	49: "PP13_SEL_EVENTPRED_5",
	50: "PP13_SEL_EVENTPRED_6",
	51: "PP13_SEL_EVENTPRED_7",
	52: "PP13_SEL_EVENTPRED_8",
	53: "PP13_SEL_EVENTPRED_9",
	54: "PP13_SEL_EVENTPRED_10",
	55: "PP13_SEL_EVENTPRED_11",
	56: "PP13_SEL_EVENTPRED_12",
	57: "PP13_SEL_EVENTPRED_13",
	58: "PP13_SEL_EVENTPRED_14",
	59: "PP13_SEL_EVENTPRED_15",
	60: "PP13_SEL_EVENTPRED_16",
	61: "PP13_SEL_EVENTPRED_17",
	62: "PP13_SEL_EVENTPRED_18",
	63: "PP13_SEL_EVENTPRED_19",
	64: "PP13_SEL_EVENTPRED_20",
	65: "PP13_SEL_EVENTPRED_21",
	66: "PP13_SEL_EVENTPRED_22",
	67: "PP13_SEL_EVENTPRED_23",
	68: "PP13_SEL_EVENTPRED_24",
	69: "PP13_SEL_EVENTPRED_25",
	70: "PP13_SEL_EVENTPRED_26",
	71: "PP13_SEL_EVENTPRED_27",
	72: "PP13_SEL_EVENTPRED_28",
	73: "PP13_SEL_EVENTPRED_29",
	74: "PP13_SEL_EVENTPRED_30",
	75: "PP13_SEL_EVENTPRED_31",
	76: "PP13_SEL_EVENTPRED_32",
	77: "PP13_SEL_EVENTPRED_33",
	78: "PP13_SEL_EVENTPRED_34",
	79: "PP13_SEL_EVENTPRED_35",
	80: "PP13_SEL_EVENTPRED_36",
	81: "PP13_SEL_EVENTPRED_37",
	82: "PP13_SEL_EVENTPRED_38",
	83: "PP13_SEL_EVENTPRED_39",
	84: "PP13_SEL_EVENTPRED_40",
	85: "PP13_SEL_EVENTPRED_41",
	86: "PP13_SEL_EVENTPRED_42",
	87: "PP13_SEL_EVENTPRED_43",
	88: "PP13_SEL_SOLO_0",
	89: "PP13_SEL_SOLO_1",
	90: "PP13_SEL_SOLO_2",
	91: "PP13_SEL_SOLO_3",
	92: "PP13_SEL_SOLO_4",
	93: "PP13_SEL_SOLO_5",
	94: "PP13_SEL_SOLO_6",
	95: "PP13_SEL_SOLO_7",
}
var DOTA_2013PassportSelectionIndices_value = map[string]int32{
	"PP13_SEL_ALLSTAR_PLAYER_0":    0,
	"PP13_SEL_ALLSTAR_PLAYER_1":    1,
	"PP13_SEL_ALLSTAR_PLAYER_2":    2,
	"PP13_SEL_ALLSTAR_PLAYER_3":    3,
	"PP13_SEL_ALLSTAR_PLAYER_4":    4,
	"PP13_SEL_ALLSTAR_PLAYER_5":    5,
	"PP13_SEL_ALLSTAR_PLAYER_6":    6,
	"PP13_SEL_ALLSTAR_PLAYER_7":    7,
	"PP13_SEL_ALLSTAR_PLAYER_8":    8,
	"PP13_SEL_ALLSTAR_PLAYER_9":    9,
	"PP13_SEL_QUALPRED_WEST_0":     10,
	"PP13_SEL_QUALPRED_WEST_1":     11,
	"PP13_SEL_QUALPRED_WEST_2":     12,
	"PP13_SEL_QUALPRED_WEST_3":     13,
	"PP13_SEL_QUALPRED_WEST_4":     14,
	"PP13_SEL_QUALPRED_WEST_5":     15,
	"PP13_SEL_QUALPRED_WEST_6":     16,
	"PP13_SEL_QUALPRED_WEST_7":     17,
	"PP13_SEL_QUALPRED_WEST_8":     18,
	"PP13_SEL_QUALPRED_WEST_9":     19,
	"PP13_SEL_QUALPRED_WEST_10":    20,
	"PP13_SEL_QUALPRED_WEST_11":    21,
	"PP13_SEL_QUALPRED_WEST_12":    22,
	"PP13_SEL_QUALPRED_WEST_13":    23,
	"PP13_SEL_QUALPRED_WEST_14":    24,
	"PP13_SEL_QUALPRED_EAST_0":     25,
	"PP13_SEL_QUALPRED_EAST_1":     26,
	"PP13_SEL_QUALPRED_EAST_2":     27,
	"PP13_SEL_QUALPRED_EAST_3":     28,
	"PP13_SEL_QUALPRED_EAST_4":     29,
	"PP13_SEL_QUALPRED_EAST_5":     30,
	"PP13_SEL_QUALPRED_EAST_6":     31,
	"PP13_SEL_QUALPRED_EAST_7":     32,
	"PP13_SEL_QUALPRED_EAST_8":     33,
	"PP13_SEL_QUALPRED_EAST_9":     34,
	"PP13_SEL_QUALPRED_EAST_10":    35,
	"PP13_SEL_QUALPRED_EAST_11":    36,
	"PP13_SEL_QUALPRED_EAST_12":    37,
	"PP13_SEL_QUALPRED_EAST_13":    38,
	"PP13_SEL_QUALPRED_EAST_14":    39,
	"PP13_SEL_TEAMCUP_TEAM":        40,
	"PP13_SEL_TEAMCUP_PLAYER":      41,
	"PP13_SEL_TEAMCUP_TEAM_LOCK":   42,
	"PP13_SEL_TEAMCUP_PLAYER_LOCK": 43,
	"PP13_SEL_EVENTPRED_0":         44,
	"PP13_SEL_EVENTPRED_1":         45,
	"PP13_SEL_EVENTPRED_2":         46,
	"PP13_SEL_EVENTPRED_3":         47,
	"PP13_SEL_EVENTPRED_4":         48,
	"PP13_SEL_EVENTPRED_5":         49,
	"PP13_SEL_EVENTPRED_6":         50,
	"PP13_SEL_EVENTPRED_7":         51,
	"PP13_SEL_EVENTPRED_8":         52,
	"PP13_SEL_EVENTPRED_9":         53,
	"PP13_SEL_EVENTPRED_10":        54,
	"PP13_SEL_EVENTPRED_11":        55,
	"PP13_SEL_EVENTPRED_12":        56,
	"PP13_SEL_EVENTPRED_13":        57,
	"PP13_SEL_EVENTPRED_14":        58,
	"PP13_SEL_EVENTPRED_15":        59,
	"PP13_SEL_EVENTPRED_16":        60,
	"PP13_SEL_EVENTPRED_17":        61,
	"PP13_SEL_EVENTPRED_18":        62,
	"PP13_SEL_EVENTPRED_19":        63,
	"PP13_SEL_EVENTPRED_20":        64,
	"PP13_SEL_EVENTPRED_21":        65,
	"PP13_SEL_EVENTPRED_22":        66,
	"PP13_SEL_EVENTPRED_23":        67,
	"PP13_SEL_EVENTPRED_24":        68,
	"PP13_SEL_EVENTPRED_25":        69,
	"PP13_SEL_EVENTPRED_26":        70,
	"PP13_SEL_EVENTPRED_27":        71,
	"PP13_SEL_EVENTPRED_28":        72,
	"PP13_SEL_EVENTPRED_29":        73,
	"PP13_SEL_EVENTPRED_30":        74,
	"PP13_SEL_EVENTPRED_31":        75,
	"PP13_SEL_EVENTPRED_32":        76,
	"PP13_SEL_EVENTPRED_33":        77,
	"PP13_SEL_EVENTPRED_34":        78,
	"PP13_SEL_EVENTPRED_35":        79,
	"PP13_SEL_EVENTPRED_36":        80,
	"PP13_SEL_EVENTPRED_37":        81,
	"PP13_SEL_EVENTPRED_38":        82,
	"PP13_SEL_EVENTPRED_39":        83,
	"PP13_SEL_EVENTPRED_40":        84,
	"PP13_SEL_EVENTPRED_41":        85,
	"PP13_SEL_EVENTPRED_42":        86,
	"PP13_SEL_EVENTPRED_43":        87,
	"PP13_SEL_SOLO_0":              88,
	"PP13_SEL_SOLO_1":              89,
	"PP13_SEL_SOLO_2":              90,
	"PP13_SEL_SOLO_3":              91,
	"PP13_SEL_SOLO_4":              92,
	"PP13_SEL_SOLO_5":              93,
	"PP13_SEL_SOLO_6":              94,
	"PP13_SEL_SOLO_7":              95,
}

func (x DOTA_2013PassportSelectionIndices) Enum() *DOTA_2013PassportSelectionIndices {
	p := new(DOTA_2013PassportSelectionIndices)
	*p = x
	return p
}
func (x DOTA_2013PassportSelectionIndices) String() string {
	return proto.EnumName(DOTA_2013PassportSelectionIndices_name, int32(x))
}
func (x *DOTA_2013PassportSelectionIndices) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_2013PassportSelectionIndices_value, data, "DOTA_2013PassportSelectionIndices")
	if err != nil {
		return err
	}
	*x = DOTA_2013PassportSelectionIndices(value)
	return nil
}
func (DOTA_2013PassportSelectionIndices) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{5}
}

type CMsgDOTACreateFantasyLeagueResponse_EResult int32

const (
	CMsgDOTACreateFantasyLeagueResponse_SUCCESS                  CMsgDOTACreateFantasyLeagueResponse_EResult = 0
	CMsgDOTACreateFantasyLeagueResponse_ERROR_UNSPECIFIED        CMsgDOTACreateFantasyLeagueResponse_EResult = 1
	CMsgDOTACreateFantasyLeagueResponse_ERROR_TOO_MANY_LEAGUES   CMsgDOTACreateFantasyLeagueResponse_EResult = 2
	CMsgDOTACreateFantasyLeagueResponse_ERROR_INVALID_TEAM_COUNT CMsgDOTACreateFantasyLeagueResponse_EResult = 3
	CMsgDOTACreateFantasyLeagueResponse_ERROR_CREATION_DISABLED  CMsgDOTACreateFantasyLeagueResponse_EResult = 4
)

var CMsgDOTACreateFantasyLeagueResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_TOO_MANY_LEAGUES",
	3: "ERROR_INVALID_TEAM_COUNT",
	4: "ERROR_CREATION_DISABLED",
}
var CMsgDOTACreateFantasyLeagueResponse_EResult_value = map[string]int32{
	"SUCCESS":                  0,
	"ERROR_UNSPECIFIED":        1,
	"ERROR_TOO_MANY_LEAGUES":   2,
	"ERROR_INVALID_TEAM_COUNT": 3,
	"ERROR_CREATION_DISABLED":  4,
}

func (x CMsgDOTACreateFantasyLeagueResponse_EResult) Enum() *CMsgDOTACreateFantasyLeagueResponse_EResult {
	p := new(CMsgDOTACreateFantasyLeagueResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTACreateFantasyLeagueResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTACreateFantasyLeagueResponse_EResult_name, int32(x))
}
func (x *CMsgDOTACreateFantasyLeagueResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTACreateFantasyLeagueResponse_EResult_value, data, "CMsgDOTACreateFantasyLeagueResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTACreateFantasyLeagueResponse_EResult(value)
	return nil
}
func (CMsgDOTACreateFantasyLeagueResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{2, 0}
}

type CMsgDOTAFantasyLeagueEditInfoResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueEditInfoResponse_SUCCESS             CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 0
	CMsgDOTAFantasyLeagueEditInfoResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 1
	CMsgDOTAFantasyLeagueEditInfoResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyLeagueEditInfoResponse_EResult = 2
)

var CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) Enum() *CMsgDOTAFantasyLeagueEditInfoResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueEditInfoResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueEditInfoResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueEditInfoResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value, data, "CMsgDOTAFantasyLeagueEditInfoResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueEditInfoResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueEditInfoResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{6, 0}
}

type CMsgDOTAFantasyLeagueFindResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueFindResponse_SUCCESS                CMsgDOTAFantasyLeagueFindResponse_EResult = 0
	CMsgDOTAFantasyLeagueFindResponse_ERROR_LEAGUE_NOT_FOUND CMsgDOTAFantasyLeagueFindResponse_EResult = 1
	CMsgDOTAFantasyLeagueFindResponse_ERROR_BAD_PASSWORD     CMsgDOTAFantasyLeagueFindResponse_EResult = 2
	CMsgDOTAFantasyLeagueFindResponse_ERROR_UNSPECIFIED      CMsgDOTAFantasyLeagueFindResponse_EResult = 3
	CMsgDOTAFantasyLeagueFindResponse_ERROR_FULL             CMsgDOTAFantasyLeagueFindResponse_EResult = 4
	CMsgDOTAFantasyLeagueFindResponse_ERROR_ALREADY_MEMBER   CMsgDOTAFantasyLeagueFindResponse_EResult = 5
	CMsgDOTAFantasyLeagueFindResponse_ERROR_LEAGUE_LOCKED    CMsgDOTAFantasyLeagueFindResponse_EResult = 6
)

var CMsgDOTAFantasyLeagueFindResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_LEAGUE_NOT_FOUND",
	2: "ERROR_BAD_PASSWORD",
	3: "ERROR_UNSPECIFIED",
	4: "ERROR_FULL",
	5: "ERROR_ALREADY_MEMBER",
	6: "ERROR_LEAGUE_LOCKED",
}
var CMsgDOTAFantasyLeagueFindResponse_EResult_value = map[string]int32{
	"SUCCESS":                0,
	"ERROR_LEAGUE_NOT_FOUND": 1,
	"ERROR_BAD_PASSWORD":     2,
	"ERROR_UNSPECIFIED":      3,
	"ERROR_FULL":             4,
	"ERROR_ALREADY_MEMBER":   5,
	"ERROR_LEAGUE_LOCKED":    6,
}

func (x CMsgDOTAFantasyLeagueFindResponse_EResult) Enum() *CMsgDOTAFantasyLeagueFindResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueFindResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueFindResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueFindResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueFindResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueFindResponse_EResult_value, data, "CMsgDOTAFantasyLeagueFindResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueFindResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueFindResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{8, 0}
}

type CMsgDOTAFantasyLeagueInfoResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueInfoResponse_SUCCESS             CMsgDOTAFantasyLeagueInfoResponse_EResult = 0
	CMsgDOTAFantasyLeagueInfoResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueInfoResponse_EResult = 1
	CMsgDOTAFantasyLeagueInfoResponse_ERROR_BAD_LEAGUE_ID CMsgDOTAFantasyLeagueInfoResponse_EResult = 2
)

var CMsgDOTAFantasyLeagueInfoResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_BAD_LEAGUE_ID",
}
var CMsgDOTAFantasyLeagueInfoResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_BAD_LEAGUE_ID": 2,
}

func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) Enum() *CMsgDOTAFantasyLeagueInfoResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueInfoResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueInfoResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueInfoResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueInfoResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueInfoResponse_EResult_value, data, "CMsgDOTAFantasyLeagueInfoResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueInfoResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueInfoResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{10, 0}
}

type CMsgDOTAFantasyLeagueMatchupsResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueMatchupsResponse_SUCCESS             CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 0
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 1
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_BAD_LEAGUE_ID CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 2
	CMsgDOTAFantasyLeagueMatchupsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyLeagueMatchupsResponse_EResult = 3
)

var CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_BAD_LEAGUE_ID",
	3: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_BAD_LEAGUE_ID": 2,
	"ERROR_NO_PERMISSION": 3,
}

func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) Enum() *CMsgDOTAFantasyLeagueMatchupsResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueMatchupsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueMatchupsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueMatchupsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value, data, "CMsgDOTAFantasyLeagueMatchupsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueMatchupsResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueMatchupsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{12, 0}
}

type CMsgDOTAEditFantasyTeamResponse_EResult int32

const (
	CMsgDOTAEditFantasyTeamResponse_SUCCESS                  CMsgDOTAEditFantasyTeamResponse_EResult = 0
	CMsgDOTAEditFantasyTeamResponse_ERROR_UNSPECIFIED        CMsgDOTAEditFantasyTeamResponse_EResult = 1
	CMsgDOTAEditFantasyTeamResponse_ERROR_INVALID_TEAM_INFO  CMsgDOTAEditFantasyTeamResponse_EResult = 2
	CMsgDOTAEditFantasyTeamResponse_ERROR_NAME_ALREADY_TAKEN CMsgDOTAEditFantasyTeamResponse_EResult = 3
	CMsgDOTAEditFantasyTeamResponse_ERROR_NO_PERMISSION      CMsgDOTAEditFantasyTeamResponse_EResult = 4
)

var CMsgDOTAEditFantasyTeamResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_INVALID_TEAM_INFO",
	3: "ERROR_NAME_ALREADY_TAKEN",
	4: "ERROR_NO_PERMISSION",
}
var CMsgDOTAEditFantasyTeamResponse_EResult_value = map[string]int32{
	"SUCCESS":                  0,
	"ERROR_UNSPECIFIED":        1,
	"ERROR_INVALID_TEAM_INFO":  2,
	"ERROR_NAME_ALREADY_TAKEN": 3,
	"ERROR_NO_PERMISSION":      4,
}

func (x CMsgDOTAEditFantasyTeamResponse_EResult) Enum() *CMsgDOTAEditFantasyTeamResponse_EResult {
	p := new(CMsgDOTAEditFantasyTeamResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAEditFantasyTeamResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAEditFantasyTeamResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAEditFantasyTeamResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAEditFantasyTeamResponse_EResult_value, data, "CMsgDOTAEditFantasyTeamResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAEditFantasyTeamResponse_EResult(value)
	return nil
}
func (CMsgDOTAEditFantasyTeamResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{14, 0}
}

type CMsgDOTAFantasyTeamScoreResponse_EResult int32

const (
	CMsgDOTAFantasyTeamScoreResponse_SUCCESS                   CMsgDOTAFantasyTeamScoreResponse_EResult = 0
	CMsgDOTAFantasyTeamScoreResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamScoreResponse_EResult = 1
	CMsgDOTAFantasyTeamScoreResponse_ERROR_NO_PERMISSION       CMsgDOTAFantasyTeamScoreResponse_EResult = 2
	CMsgDOTAFantasyTeamScoreResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamScoreResponse_EResult = 3
)

var CMsgDOTAFantasyTeamScoreResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_OWNER_NOT_IN_LEAGUE",
}
var CMsgDOTAFantasyTeamScoreResponse_EResult_value = map[string]int32{
	"SUCCESS":                   0,
	"ERROR_UNSPECIFIED":         1,
	"ERROR_NO_PERMISSION":       2,
	"ERROR_OWNER_NOT_IN_LEAGUE": 3,
}

func (x CMsgDOTAFantasyTeamScoreResponse_EResult) Enum() *CMsgDOTAFantasyTeamScoreResponse_EResult {
	p := new(CMsgDOTAFantasyTeamScoreResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamScoreResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamScoreResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamScoreResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamScoreResponse_EResult_value, data, "CMsgDOTAFantasyTeamScoreResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamScoreResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamScoreResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{20, 0}
}

type CMsgDOTAFantasyTeamStandingsResponse_EResult int32

const (
	CMsgDOTAFantasyTeamStandingsResponse_SUCCESS             CMsgDOTAFantasyTeamStandingsResponse_EResult = 0
	CMsgDOTAFantasyTeamStandingsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamStandingsResponse_EResult = 1
	CMsgDOTAFantasyTeamStandingsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamStandingsResponse_EResult = 2
)

var CMsgDOTAFantasyTeamStandingsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyTeamStandingsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) Enum() *CMsgDOTAFantasyTeamStandingsResponse_EResult {
	p := new(CMsgDOTAFantasyTeamStandingsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamStandingsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamStandingsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamStandingsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamStandingsResponse_EResult_value, data, "CMsgDOTAFantasyTeamStandingsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamStandingsResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamStandingsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{22, 0}
}

type CMsgDOTAFantasyPlayerScoreResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerScoreResponse_SUCCESS             CMsgDOTAFantasyPlayerScoreResponse_EResult = 0
	CMsgDOTAFantasyPlayerScoreResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerScoreResponse_EResult = 1
	CMsgDOTAFantasyPlayerScoreResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerScoreResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerScoreResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyPlayerScoreResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) Enum() *CMsgDOTAFantasyPlayerScoreResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerScoreResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerScoreResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerScoreResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerScoreResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerScoreResponse_EResult_value, data, "CMsgDOTAFantasyPlayerScoreResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerScoreResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyPlayerScoreResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{24, 0}
}

type CMsgDOTAFantasyPlayerStandingsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerStandingsResponse_SUCCESS             CMsgDOTAFantasyPlayerStandingsResponse_EResult = 0
	CMsgDOTAFantasyPlayerStandingsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerStandingsResponse_EResult = 1
	CMsgDOTAFantasyPlayerStandingsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerStandingsResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerStandingsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyPlayerStandingsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerStandingsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerStandingsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerStandingsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerStandingsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerStandingsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerStandingsResponse_EResult_value, data, "CMsgDOTAFantasyPlayerStandingsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerStandingsResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyPlayerStandingsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{26, 0}
}

type CMsgDOTAFantasyLeagueCreateResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueCreateResponse_SUCCESS                  CMsgDOTAFantasyLeagueCreateResponse_EResult = 0
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_NO_PERMISSION      CMsgDOTAFantasyLeagueCreateResponse_EResult = 1
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_SEASON_ID      CMsgDOTAFantasyLeagueCreateResponse_EResult = 2
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_LEAGUE_NAME    CMsgDOTAFantasyLeagueCreateResponse_EResult = 3
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_BAD_TEAM_NAME      CMsgDOTAFantasyLeagueCreateResponse_EResult = 4
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_UNSPECIFIED        CMsgDOTAFantasyLeagueCreateResponse_EResult = 5
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_FAILED_LOGO_UPLOAD CMsgDOTAFantasyLeagueCreateResponse_EResult = 6
	CMsgDOTAFantasyLeagueCreateResponse_ERROR_NO_TICKET          CMsgDOTAFantasyLeagueCreateResponse_EResult = 7
)

var CMsgDOTAFantasyLeagueCreateResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_NO_PERMISSION",
	2: "ERROR_BAD_SEASON_ID",
	3: "ERROR_BAD_LEAGUE_NAME",
	4: "ERROR_BAD_TEAM_NAME",
	5: "ERROR_UNSPECIFIED",
	6: "ERROR_FAILED_LOGO_UPLOAD",
	7: "ERROR_NO_TICKET",
}
var CMsgDOTAFantasyLeagueCreateResponse_EResult_value = map[string]int32{
	"SUCCESS":                  0,
	"ERROR_NO_PERMISSION":      1,
	"ERROR_BAD_SEASON_ID":      2,
	"ERROR_BAD_LEAGUE_NAME":    3,
	"ERROR_BAD_TEAM_NAME":      4,
	"ERROR_UNSPECIFIED":        5,
	"ERROR_FAILED_LOGO_UPLOAD": 6,
	"ERROR_NO_TICKET":          7,
}

func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) Enum() *CMsgDOTAFantasyLeagueCreateResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueCreateResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueCreateResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueCreateResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueCreateResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueCreateResponse_EResult_value, data, "CMsgDOTAFantasyLeagueCreateResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueCreateResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueCreateResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{30, 0}
}

type CMsgDOTAFantasyTeamCreateResponse_EResult int32

const (
	CMsgDOTAFantasyTeamCreateResponse_SUCCESS                     CMsgDOTAFantasyTeamCreateResponse_EResult = 0
	CMsgDOTAFantasyTeamCreateResponse_ERROR_NO_PERMISSION         CMsgDOTAFantasyTeamCreateResponse_EResult = 1
	CMsgDOTAFantasyTeamCreateResponse_ERROR_FAILED_LOGO_UPLOAD    CMsgDOTAFantasyTeamCreateResponse_EResult = 2
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_FANTASY_LEAGUE_ID CMsgDOTAFantasyTeamCreateResponse_EResult = 3
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_NAME              CMsgDOTAFantasyTeamCreateResponse_EResult = 4
	CMsgDOTAFantasyTeamCreateResponse_ERROR_FULL                  CMsgDOTAFantasyTeamCreateResponse_EResult = 5
	CMsgDOTAFantasyTeamCreateResponse_ERROR_ALREADY_MEMBER        CMsgDOTAFantasyTeamCreateResponse_EResult = 6
	CMsgDOTAFantasyTeamCreateResponse_ERROR_BAD_PASSWORD          CMsgDOTAFantasyTeamCreateResponse_EResult = 7
	CMsgDOTAFantasyTeamCreateResponse_ERROR_UNSPECIFIED           CMsgDOTAFantasyTeamCreateResponse_EResult = 8
	CMsgDOTAFantasyTeamCreateResponse_ERROR_NO_TICKET             CMsgDOTAFantasyTeamCreateResponse_EResult = 9
	CMsgDOTAFantasyTeamCreateResponse_ERROR_LEAGUE_LOCKED         CMsgDOTAFantasyTeamCreateResponse_EResult = 10
)

var CMsgDOTAFantasyTeamCreateResponse_EResult_name = map[int32]string{
	0:  "SUCCESS",
	1:  "ERROR_NO_PERMISSION",
	2:  "ERROR_FAILED_LOGO_UPLOAD",
	3:  "ERROR_BAD_FANTASY_LEAGUE_ID",
	4:  "ERROR_BAD_NAME",
	5:  "ERROR_FULL",
	6:  "ERROR_ALREADY_MEMBER",
	7:  "ERROR_BAD_PASSWORD",
	8:  "ERROR_UNSPECIFIED",
	9:  "ERROR_NO_TICKET",
	10: "ERROR_LEAGUE_LOCKED",
}
var CMsgDOTAFantasyTeamCreateResponse_EResult_value = map[string]int32{
	"SUCCESS":                     0,
	"ERROR_NO_PERMISSION":         1,
	"ERROR_FAILED_LOGO_UPLOAD":    2,
	"ERROR_BAD_FANTASY_LEAGUE_ID": 3,
	"ERROR_BAD_NAME":              4,
	"ERROR_FULL":                  5,
	"ERROR_ALREADY_MEMBER":        6,
	"ERROR_BAD_PASSWORD":          7,
	"ERROR_UNSPECIFIED":           8,
	"ERROR_NO_TICKET":             9,
	"ERROR_LEAGUE_LOCKED":         10,
}

func (x CMsgDOTAFantasyTeamCreateResponse_EResult) Enum() *CMsgDOTAFantasyTeamCreateResponse_EResult {
	p := new(CMsgDOTAFantasyTeamCreateResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamCreateResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamCreateResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamCreateResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamCreateResponse_EResult_value, data, "CMsgDOTAFantasyTeamCreateResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamCreateResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamCreateResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{32, 0}
}

type CMsgDOTAFantasyLeagueEditInvitesResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueEditInvitesResponse_SUCCESS           CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = 0
	CMsgDOTAFantasyLeagueEditInvitesResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = 1
)

var CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
}
var CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value = map[string]int32{
	"SUCCESS":           0,
	"ERROR_UNSPECIFIED": 1,
}

func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) Enum() *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value, data, "CMsgDOTAFantasyLeagueEditInvitesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueEditInvitesResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueEditInvitesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{34, 0}
}

type CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult int32

const (
	CMsgDOTAFantasyLeagueDraftPlayerResponse_SUCCESS                           CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 0
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_UNSPECIFIED                 CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 1
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_INVALID_FANTASY_LEAGUE      CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 2
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_FANTASY_LEAGUE_NOT_DRAFTING CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 3
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_OWNER_NOT_IN_LEAGUE         CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 4
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_NOT_OWNERS_TURN             CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 5
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_INVALID              CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 6
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_UNAVAILABLE          CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 7
	CMsgDOTAFantasyLeagueDraftPlayerResponse_ERROR_PLAYER_NO_VALID_SLOTS       CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = 8
)

var CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_INVALID_FANTASY_LEAGUE",
	3: "ERROR_FANTASY_LEAGUE_NOT_DRAFTING",
	4: "ERROR_OWNER_NOT_IN_LEAGUE",
	5: "ERROR_NOT_OWNERS_TURN",
	6: "ERROR_PLAYER_INVALID",
	7: "ERROR_PLAYER_UNAVAILABLE",
	8: "ERROR_PLAYER_NO_VALID_SLOTS",
}
var CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value = map[string]int32{
	"SUCCESS":                           0,
	"ERROR_UNSPECIFIED":                 1,
	"ERROR_INVALID_FANTASY_LEAGUE":      2,
	"ERROR_FANTASY_LEAGUE_NOT_DRAFTING": 3,
	"ERROR_OWNER_NOT_IN_LEAGUE":         4,
	"ERROR_NOT_OWNERS_TURN":             5,
	"ERROR_PLAYER_INVALID":              6,
	"ERROR_PLAYER_UNAVAILABLE":          7,
	"ERROR_PLAYER_NO_VALID_SLOTS":       8,
}

func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) Enum() *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult {
	p := new(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value, data, "CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{38, 0}
}

type CMsgDOTAFantasyTeamRosterSwapResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterSwapResponse_SUCCESS                   CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_SLOTS_INVALID       CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 3
	CMsgDOTAFantasyTeamRosterSwapResponse_ERROR_SLOT_LOCKED         CMsgDOTAFantasyTeamRosterSwapResponse_EResult = 4
)

var CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_OWNER_NOT_IN_LEAGUE",
	3: "ERROR_SLOTS_INVALID",
	4: "ERROR_SLOT_LOCKED",
}
var CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value = map[string]int32{
	"SUCCESS":                   0,
	"ERROR_UNSPECIFIED":         1,
	"ERROR_OWNER_NOT_IN_LEAGUE": 2,
	"ERROR_SLOTS_INVALID":       3,
	"ERROR_SLOT_LOCKED":         4,
}

func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterSwapResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterSwapResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamRosterSwapResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamRosterSwapResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value, data, "CMsgDOTAFantasyTeamRosterSwapResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterSwapResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamRosterSwapResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{40, 0}
}

type CMsgDOTAFantasyTeamRosterAddDropResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterAddDropResponse_SUCCESS                     CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_UNSPECIFIED           CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_OWNER_NOT_IN_LEAGUE   CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_PLAYER_NOT_AVAILABLE  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 3
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_PLAYER_NOT_ON_TEAM    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 4
	CMsgDOTAFantasyTeamRosterAddDropResponse_ERROR_TRADE_ALREADY_PENDING CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = 5
)

var CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_OWNER_NOT_IN_LEAGUE",
	3: "ERROR_PLAYER_NOT_AVAILABLE",
	4: "ERROR_PLAYER_NOT_ON_TEAM",
	5: "ERROR_TRADE_ALREADY_PENDING",
}
var CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value = map[string]int32{
	"SUCCESS":                     0,
	"ERROR_UNSPECIFIED":           1,
	"ERROR_OWNER_NOT_IN_LEAGUE":   2,
	"ERROR_PLAYER_NOT_AVAILABLE":  3,
	"ERROR_PLAYER_NOT_ON_TEAM":    4,
	"ERROR_TRADE_ALREADY_PENDING": 5,
}

func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value, data, "CMsgDOTAFantasyTeamRosterAddDropResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterAddDropResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamRosterAddDropResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{42, 0}
}

type CMsgDOTAFantasyTeamTradesResponse_EResult int32

const (
	CMsgDOTAFantasyTeamTradesResponse_SUCCESS             CMsgDOTAFantasyTeamTradesResponse_EResult = 0
	CMsgDOTAFantasyTeamTradesResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamTradesResponse_EResult = 1
	CMsgDOTAFantasyTeamTradesResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamTradesResponse_EResult = 2
)

var CMsgDOTAFantasyTeamTradesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyTeamTradesResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyTeamTradesResponse_EResult) Enum() *CMsgDOTAFantasyTeamTradesResponse_EResult {
	p := new(CMsgDOTAFantasyTeamTradesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamTradesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamTradesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamTradesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamTradesResponse_EResult_value, data, "CMsgDOTAFantasyTeamTradesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamTradesResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamTradesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{44, 0}
}

type CMsgDOTAFantasyTeamTradeCancelResponse_EResult int32

const (
	CMsgDOTAFantasyTeamTradeCancelResponse_SUCCESS             CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 0
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 1
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 2
	CMsgDOTAFantasyTeamTradeCancelResponse_ERROR_NO_TRADE      CMsgDOTAFantasyTeamTradeCancelResponse_EResult = 3
)

var CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_NO_TRADE",
}
var CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
	"ERROR_NO_TRADE":      3,
}

func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) Enum() *CMsgDOTAFantasyTeamTradeCancelResponse_EResult {
	p := new(CMsgDOTAFantasyTeamTradeCancelResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamTradeCancelResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamTradeCancelResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value, data, "CMsgDOTAFantasyTeamTradeCancelResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamTradeCancelResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamTradeCancelResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{46, 0}
}

type CMsgDOTAFantasyTeamRosterResponse_EResult int32

const (
	CMsgDOTAFantasyTeamRosterResponse_SUCCESS                   CMsgDOTAFantasyTeamRosterResponse_EResult = 0
	CMsgDOTAFantasyTeamRosterResponse_ERROR_UNSPECIFIED         CMsgDOTAFantasyTeamRosterResponse_EResult = 1
	CMsgDOTAFantasyTeamRosterResponse_ERROR_NO_PERMISSION       CMsgDOTAFantasyTeamRosterResponse_EResult = 2
	CMsgDOTAFantasyTeamRosterResponse_ERROR_OWNER_NOT_IN_LEAGUE CMsgDOTAFantasyTeamRosterResponse_EResult = 3
)

var CMsgDOTAFantasyTeamRosterResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_OWNER_NOT_IN_LEAGUE",
}
var CMsgDOTAFantasyTeamRosterResponse_EResult_value = map[string]int32{
	"SUCCESS":                   0,
	"ERROR_UNSPECIFIED":         1,
	"ERROR_NO_PERMISSION":       2,
	"ERROR_OWNER_NOT_IN_LEAGUE": 3,
}

func (x CMsgDOTAFantasyTeamRosterResponse_EResult) Enum() *CMsgDOTAFantasyTeamRosterResponse_EResult {
	p := new(CMsgDOTAFantasyTeamRosterResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyTeamRosterResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyTeamRosterResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyTeamRosterResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyTeamRosterResponse_EResult_value, data, "CMsgDOTAFantasyTeamRosterResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyTeamRosterResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyTeamRosterResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{48, 0}
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_SUCCESS             CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 0
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 1
	CMsgDOTAFantasyPlayerHisoricalStatsResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value, data, "CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{50, 0}
}

type CMsgDOTAFantasyMessagesResponse_EResult int32

const (
	CMsgDOTAFantasyMessagesResponse_SUCCESS             CMsgDOTAFantasyMessagesResponse_EResult = 0
	CMsgDOTAFantasyMessagesResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyMessagesResponse_EResult = 1
	CMsgDOTAFantasyMessagesResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyMessagesResponse_EResult = 2
)

var CMsgDOTAFantasyMessagesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
}
var CMsgDOTAFantasyMessagesResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
}

func (x CMsgDOTAFantasyMessagesResponse_EResult) Enum() *CMsgDOTAFantasyMessagesResponse_EResult {
	p := new(CMsgDOTAFantasyMessagesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyMessagesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyMessagesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyMessagesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyMessagesResponse_EResult_value, data, "CMsgDOTAFantasyMessagesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyMessagesResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyMessagesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{53, 0}
}

type CMsgDOTAFantasyRemoveOwnerResponse_EResult int32

const (
	CMsgDOTAFantasyRemoveOwnerResponse_SUCCESS             CMsgDOTAFantasyRemoveOwnerResponse_EResult = 0
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_UNSPECIFIED   CMsgDOTAFantasyRemoveOwnerResponse_EResult = 1
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_NO_PERMISSION CMsgDOTAFantasyRemoveOwnerResponse_EResult = 2
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_LEAGUE_LOCKED CMsgDOTAFantasyRemoveOwnerResponse_EResult = 3
	CMsgDOTAFantasyRemoveOwnerResponse_ERROR_NOT_A_MEMBER  CMsgDOTAFantasyRemoveOwnerResponse_EResult = 4
)

var CMsgDOTAFantasyRemoveOwnerResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NO_PERMISSION",
	3: "ERROR_LEAGUE_LOCKED",
	4: "ERROR_NOT_A_MEMBER",
}
var CMsgDOTAFantasyRemoveOwnerResponse_EResult_value = map[string]int32{
	"SUCCESS":             0,
	"ERROR_UNSPECIFIED":   1,
	"ERROR_NO_PERMISSION": 2,
	"ERROR_LEAGUE_LOCKED": 3,
	"ERROR_NOT_A_MEMBER":  4,
}

func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) Enum() *CMsgDOTAFantasyRemoveOwnerResponse_EResult {
	p := new(CMsgDOTAFantasyRemoveOwnerResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyRemoveOwnerResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyRemoveOwnerResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyRemoveOwnerResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyRemoveOwnerResponse_EResult_value, data, "CMsgDOTAFantasyRemoveOwnerResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyRemoveOwnerResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyRemoveOwnerResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{55, 0}
}

type CMsgDOTAFantasyScheduledMatchesResponse_EResult int32

const (
	CMsgDOTAFantasyScheduledMatchesResponse_SUCCESS           CMsgDOTAFantasyScheduledMatchesResponse_EResult = 0
	CMsgDOTAFantasyScheduledMatchesResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyScheduledMatchesResponse_EResult = 1
)

var CMsgDOTAFantasyScheduledMatchesResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
}
var CMsgDOTAFantasyScheduledMatchesResponse_EResult_value = map[string]int32{
	"SUCCESS":           0,
	"ERROR_UNSPECIFIED": 1,
}

func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) Enum() *CMsgDOTAFantasyScheduledMatchesResponse_EResult {
	p := new(CMsgDOTAFantasyScheduledMatchesResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyScheduledMatchesResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyScheduledMatchesResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyScheduledMatchesResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyScheduledMatchesResponse_EResult_value, data, "CMsgDOTAFantasyScheduledMatchesResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyScheduledMatchesResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyScheduledMatchesResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{57, 0}
}

type CMsgDOTAFantasyLeaveLeagueResponse_EResult int32

const (
	CMsgDOTAFantasyLeaveLeagueResponse_SUCCESS                CMsgDOTAFantasyLeaveLeagueResponse_EResult = 0
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_UNSPECIFIED      CMsgDOTAFantasyLeaveLeagueResponse_EResult = 1
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_NOT_MEMBER       CMsgDOTAFantasyLeaveLeagueResponse_EResult = 2
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_LEAGUE_NOT_FOUND CMsgDOTAFantasyLeaveLeagueResponse_EResult = 3
	CMsgDOTAFantasyLeaveLeagueResponse_ERROR_DRAFT_ACTIVE     CMsgDOTAFantasyLeaveLeagueResponse_EResult = 4
)

var CMsgDOTAFantasyLeaveLeagueResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NOT_MEMBER",
	3: "ERROR_LEAGUE_NOT_FOUND",
	4: "ERROR_DRAFT_ACTIVE",
}
var CMsgDOTAFantasyLeaveLeagueResponse_EResult_value = map[string]int32{
	"SUCCESS":                0,
	"ERROR_UNSPECIFIED":      1,
	"ERROR_NOT_MEMBER":       2,
	"ERROR_LEAGUE_NOT_FOUND": 3,
	"ERROR_DRAFT_ACTIVE":     4,
}

func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) Enum() *CMsgDOTAFantasyLeaveLeagueResponse_EResult {
	p := new(CMsgDOTAFantasyLeaveLeagueResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyLeaveLeagueResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyLeaveLeagueResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyLeaveLeagueResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyLeaveLeagueResponse_EResult_value, data, "CMsgDOTAFantasyLeaveLeagueResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyLeaveLeagueResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyLeaveLeagueResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{59, 0}
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult int32

const (
	CMsgDOTAFantasyPlayerScoreDetailsResponse_SUCCESS           CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 0
	CMsgDOTAFantasyPlayerScoreDetailsResponse_ERROR_UNSPECIFIED CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 1
	CMsgDOTAFantasyPlayerScoreDetailsResponse_ERROR_NOT_MEMBER  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = 2
)

var CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR_UNSPECIFIED",
	2: "ERROR_NOT_MEMBER",
}
var CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value = map[string]int32{
	"SUCCESS":           0,
	"ERROR_UNSPECIFIED": 1,
	"ERROR_NOT_MEMBER":  2,
}

func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) Enum() *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult {
	p := new(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult)
	*p = x
	return p
}
func (x CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) String() string {
	return proto.EnumName(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name, int32(x))
}
func (x *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value, data, "CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult")
	if err != nil {
		return err
	}
	*x = CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult(value)
	return nil
}
func (CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor9, []int{61, 0}
}

type CMsgGCPlayerInfo struct {
	PlayerInfos      []*CMsgGCPlayerInfo_PlayerInfo        `protobuf:"bytes,1,rep,name=player_infos" json:"player_infos,omitempty"`
	Leaderboards     []*CMsgGCPlayerInfo_RegionLeaderboard `protobuf:"bytes,2,rep,name=leaderboards" json:"leaderboards,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgGCPlayerInfo) Reset()                    { *m = CMsgGCPlayerInfo{} }
func (m *CMsgGCPlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgGCPlayerInfo) ProtoMessage()               {}
func (*CMsgGCPlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *CMsgGCPlayerInfo) GetPlayerInfos() []*CMsgGCPlayerInfo_PlayerInfo {
	if m != nil {
		return m.PlayerInfos
	}
	return nil
}

func (m *CMsgGCPlayerInfo) GetLeaderboards() []*CMsgGCPlayerInfo_RegionLeaderboard {
	if m != nil {
		return m.Leaderboards
	}
	return nil
}

type CMsgGCPlayerInfo_PlayerInfo struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	CountryCode      *string `protobuf:"bytes,3,opt,name=country_code" json:"country_code,omitempty"`
	FantasyRole      *uint32 `protobuf:"varint,4,opt,name=fantasy_role" json:"fantasy_role,omitempty"`
	TeamId           *uint32 `protobuf:"varint,5,opt,name=team_id" json:"team_id,omitempty"`
	TeamName         *string `protobuf:"bytes,6,opt,name=team_name" json:"team_name,omitempty"`
	TeamTag          *string `protobuf:"bytes,7,opt,name=team_tag" json:"team_tag,omitempty"`
	Sponsor          *string `protobuf:"bytes,8,opt,name=sponsor" json:"sponsor,omitempty"`
	IsLocked         *bool   `protobuf:"varint,9,opt,name=is_locked" json:"is_locked,omitempty"`
	IsPro            *bool   `protobuf:"varint,10,opt,name=is_pro" json:"is_pro,omitempty"`
	LockedUntil      *uint32 `protobuf:"varint,11,opt,name=locked_until" json:"locked_until,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,12,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgGCPlayerInfo_PlayerInfo) Reset()                    { *m = CMsgGCPlayerInfo_PlayerInfo{} }
func (m *CMsgGCPlayerInfo_PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgGCPlayerInfo_PlayerInfo) ProtoMessage()               {}
func (*CMsgGCPlayerInfo_PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0, 0} }

func (m *CMsgGCPlayerInfo_PlayerInfo) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetFantasyRole() uint32 {
	if m != nil && m.FantasyRole != nil {
		return *m.FantasyRole
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTeamTag() string {
	if m != nil && m.TeamTag != nil {
		return *m.TeamTag
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetSponsor() string {
	if m != nil && m.Sponsor != nil {
		return *m.Sponsor
	}
	return ""
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetIsLocked() bool {
	if m != nil && m.IsLocked != nil {
		return *m.IsLocked
	}
	return false
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetIsPro() bool {
	if m != nil && m.IsPro != nil {
		return *m.IsPro
	}
	return false
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetLockedUntil() uint32 {
	if m != nil && m.LockedUntil != nil {
		return *m.LockedUntil
	}
	return 0
}

func (m *CMsgGCPlayerInfo_PlayerInfo) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgGCPlayerInfo_RegionLeaderboard struct {
	Division         *uint32  `protobuf:"varint,1,opt,name=division" json:"division,omitempty"`
	AccountIds       []uint32 `protobuf:"varint,2,rep,name=account_ids" json:"account_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgGCPlayerInfo_RegionLeaderboard) Reset()         { *m = CMsgGCPlayerInfo_RegionLeaderboard{} }
func (m *CMsgGCPlayerInfo_RegionLeaderboard) String() string { return proto.CompactTextString(m) }
func (*CMsgGCPlayerInfo_RegionLeaderboard) ProtoMessage()    {}
func (*CMsgGCPlayerInfo_RegionLeaderboard) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{0, 1}
}

func (m *CMsgGCPlayerInfo_RegionLeaderboard) GetDivision() uint32 {
	if m != nil && m.Division != nil {
		return *m.Division
	}
	return 0
}

func (m *CMsgGCPlayerInfo_RegionLeaderboard) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

type CMsgDOTACreateFantasyLeagueRequest struct {
	LeagueName       *string                 `protobuf:"bytes,1,opt,name=league_name" json:"league_name,omitempty"`
	LeagueLogo       *uint64                 `protobuf:"varint,2,opt,name=league_logo" json:"league_logo,omitempty"`
	SelectionMode    *Fantasy_Selection_Mode `protobuf:"varint,3,opt,name=selection_mode,enum=dota.Fantasy_Selection_Mode,def=0" json:"selection_mode,omitempty"`
	TeamCount        *uint32                 `protobuf:"varint,4,opt,name=team_count" json:"team_count,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMsgDOTACreateFantasyLeagueRequest) Reset()         { *m = CMsgDOTACreateFantasyLeagueRequest{} }
func (m *CMsgDOTACreateFantasyLeagueRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTACreateFantasyLeagueRequest) ProtoMessage()    {}
func (*CMsgDOTACreateFantasyLeagueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{1}
}

const Default_CMsgDOTACreateFantasyLeagueRequest_SelectionMode Fantasy_Selection_Mode = Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID

func (m *CMsgDOTACreateFantasyLeagueRequest) GetLeagueName() string {
	if m != nil && m.LeagueName != nil {
		return *m.LeagueName
	}
	return ""
}

func (m *CMsgDOTACreateFantasyLeagueRequest) GetLeagueLogo() uint64 {
	if m != nil && m.LeagueLogo != nil {
		return *m.LeagueLogo
	}
	return 0
}

func (m *CMsgDOTACreateFantasyLeagueRequest) GetSelectionMode() Fantasy_Selection_Mode {
	if m != nil && m.SelectionMode != nil {
		return *m.SelectionMode
	}
	return Default_CMsgDOTACreateFantasyLeagueRequest_SelectionMode
}

func (m *CMsgDOTACreateFantasyLeagueRequest) GetTeamCount() uint32 {
	if m != nil && m.TeamCount != nil {
		return *m.TeamCount
	}
	return 0
}

type CMsgDOTACreateFantasyLeagueResponse struct {
	Result           *CMsgDOTACreateFantasyLeagueResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTACreateFantasyLeagueResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgDOTACreateFantasyLeagueResponse) Reset()         { *m = CMsgDOTACreateFantasyLeagueResponse{} }
func (m *CMsgDOTACreateFantasyLeagueResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTACreateFantasyLeagueResponse) ProtoMessage()    {}
func (*CMsgDOTACreateFantasyLeagueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{2}
}

const Default_CMsgDOTACreateFantasyLeagueResponse_Result CMsgDOTACreateFantasyLeagueResponse_EResult = CMsgDOTACreateFantasyLeagueResponse_SUCCESS

func (m *CMsgDOTACreateFantasyLeagueResponse) GetResult() CMsgDOTACreateFantasyLeagueResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTACreateFantasyLeagueResponse_Result
}

type CMsgFantasyLeagueScoring struct {
	Level                  *float32 `protobuf:"fixed32,1,opt,name=level" json:"level,omitempty"`
	Kills                  *float32 `protobuf:"fixed32,2,opt,name=kills" json:"kills,omitempty"`
	Deaths                 *float32 `protobuf:"fixed32,3,opt,name=deaths" json:"deaths,omitempty"`
	Assists                *float32 `protobuf:"fixed32,4,opt,name=assists" json:"assists,omitempty"`
	LastHits               *float32 `protobuf:"fixed32,5,opt,name=last_hits" json:"last_hits,omitempty"`
	Denies                 *float32 `protobuf:"fixed32,6,opt,name=denies" json:"denies,omitempty"`
	Gpm                    *float32 `protobuf:"fixed32,7,opt,name=gpm" json:"gpm,omitempty"`
	Xppm                   *float32 `protobuf:"fixed32,8,opt,name=xppm" json:"xppm,omitempty"`
	Stuns                  *float32 `protobuf:"fixed32,9,opt,name=stuns" json:"stuns,omitempty"`
	Healing                *float32 `protobuf:"fixed32,10,opt,name=healing" json:"healing,omitempty"`
	TowerKills             *float32 `protobuf:"fixed32,11,opt,name=tower_kills" json:"tower_kills,omitempty"`
	RoshanKills            *float32 `protobuf:"fixed32,12,opt,name=roshan_kills" json:"roshan_kills,omitempty"`
	MultiplierPremium      *float32 `protobuf:"fixed32,13,opt,name=multiplier_premium" json:"multiplier_premium,omitempty"`
	MultiplierProfessional *float32 `protobuf:"fixed32,14,opt,name=multiplier_professional" json:"multiplier_professional,omitempty"`
	XXX_unrecognized       []byte   `json:"-"`
}

func (m *CMsgFantasyLeagueScoring) Reset()                    { *m = CMsgFantasyLeagueScoring{} }
func (m *CMsgFantasyLeagueScoring) String() string            { return proto.CompactTextString(m) }
func (*CMsgFantasyLeagueScoring) ProtoMessage()               {}
func (*CMsgFantasyLeagueScoring) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *CMsgFantasyLeagueScoring) GetLevel() float32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetKills() float32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetDeaths() float32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetAssists() float32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetLastHits() float32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetDenies() float32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetGpm() float32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetXppm() float32 {
	if m != nil && m.Xppm != nil {
		return *m.Xppm
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetStuns() float32 {
	if m != nil && m.Stuns != nil {
		return *m.Stuns
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetHealing() float32 {
	if m != nil && m.Healing != nil {
		return *m.Healing
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetTowerKills() float32 {
	if m != nil && m.TowerKills != nil {
		return *m.TowerKills
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetRoshanKills() float32 {
	if m != nil && m.RoshanKills != nil {
		return *m.RoshanKills
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetMultiplierPremium() float32 {
	if m != nil && m.MultiplierPremium != nil {
		return *m.MultiplierPremium
	}
	return 0
}

func (m *CMsgFantasyLeagueScoring) GetMultiplierProfessional() float32 {
	if m != nil && m.MultiplierProfessional != nil {
		return *m.MultiplierProfessional
	}
	return 0
}

type CMsgDOTAFantasyLeagueInfo struct {
	FantasyLeagueId       *uint32                                `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	CommissionerAccountId *uint32                                `protobuf:"varint,2,opt,name=commissioner_account_id" json:"commissioner_account_id,omitempty"`
	FantasyLeagueName     *string                                `protobuf:"bytes,3,opt,name=fantasy_league_name" json:"fantasy_league_name,omitempty"`
	SelectionMode         *Fantasy_Selection_Mode                `protobuf:"varint,4,opt,name=selection_mode,enum=dota.Fantasy_Selection_Mode,def=0" json:"selection_mode,omitempty"`
	TeamCount             *uint32                                `protobuf:"varint,5,opt,name=team_count" json:"team_count,omitempty"`
	Logo                  *uint64                                `protobuf:"varint,6,opt,name=logo" json:"logo,omitempty"`
	Scoring               *CMsgFantasyLeagueScoring              `protobuf:"bytes,7,opt,name=scoring" json:"scoring,omitempty"`
	DraftTime             *uint32                                `protobuf:"varint,12,opt,name=draft_time" json:"draft_time,omitempty"`
	DraftPickTime         *uint32                                `protobuf:"varint,13,opt,name=draft_pick_time" json:"draft_pick_time,omitempty"`
	SeasonStart           *uint32                                `protobuf:"varint,15,opt,name=season_start" json:"season_start,omitempty"`
	SeasonLength          *uint32                                `protobuf:"varint,16,opt,name=season_length" json:"season_length,omitempty"`
	VetoVotes             *uint32                                `protobuf:"varint,17,opt,name=veto_votes" json:"veto_votes,omitempty"`
	Acquisitions          *uint32                                `protobuf:"varint,18,opt,name=acquisitions" json:"acquisitions,omitempty"`
	Slot_1                *uint32                                `protobuf:"varint,19,opt,name=slot_1" json:"slot_1,omitempty"`
	Slot_2                *uint32                                `protobuf:"varint,20,opt,name=slot_2" json:"slot_2,omitempty"`
	Slot_3                *uint32                                `protobuf:"varint,21,opt,name=slot_3" json:"slot_3,omitempty"`
	Slot_4                *uint32                                `protobuf:"varint,22,opt,name=slot_4" json:"slot_4,omitempty"`
	Slot_5                *uint32                                `protobuf:"varint,23,opt,name=slot_5" json:"slot_5,omitempty"`
	BenchSlots            *uint32                                `protobuf:"varint,24,opt,name=bench_slots" json:"bench_slots,omitempty"`
	OwnerInfo             []*CMsgDOTAFantasyLeagueInfo_OwnerInfo `protobuf:"bytes,25,rep,name=owner_info" json:"owner_info,omitempty"`
	Players               []uint32                               `protobuf:"varint,26,rep,name=players" json:"players,omitempty"`
	TimeZone              *uint32                                `protobuf:"varint,27,opt,name=time_zone" json:"time_zone,omitempty"`
	Season                *uint32                                `protobuf:"varint,28,opt,name=season" json:"season,omitempty"`
	Password              *string                                `protobuf:"bytes,29,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized      []byte                                 `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfo) Reset()                    { *m = CMsgDOTAFantasyLeagueInfo{} }
func (m *CMsgDOTAFantasyLeagueInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfo) ProtoMessage()               {}
func (*CMsgDOTAFantasyLeagueInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

const Default_CMsgDOTAFantasyLeagueInfo_SelectionMode Fantasy_Selection_Mode = Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID

func (m *CMsgDOTAFantasyLeagueInfo) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetCommissionerAccountId() uint32 {
	if m != nil && m.CommissionerAccountId != nil {
		return *m.CommissionerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetFantasyLeagueName() string {
	if m != nil && m.FantasyLeagueName != nil {
		return *m.FantasyLeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSelectionMode() Fantasy_Selection_Mode {
	if m != nil && m.SelectionMode != nil {
		return *m.SelectionMode
	}
	return Default_CMsgDOTAFantasyLeagueInfo_SelectionMode
}

func (m *CMsgDOTAFantasyLeagueInfo) GetTeamCount() uint32 {
	if m != nil && m.TeamCount != nil {
		return *m.TeamCount
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetLogo() uint64 {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetScoring() *CMsgFantasyLeagueScoring {
	if m != nil {
		return m.Scoring
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueInfo) GetDraftTime() uint32 {
	if m != nil && m.DraftTime != nil {
		return *m.DraftTime
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetDraftPickTime() uint32 {
	if m != nil && m.DraftPickTime != nil {
		return *m.DraftPickTime
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSeasonStart() uint32 {
	if m != nil && m.SeasonStart != nil {
		return *m.SeasonStart
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSeasonLength() uint32 {
	if m != nil && m.SeasonLength != nil {
		return *m.SeasonLength
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetVetoVotes() uint32 {
	if m != nil && m.VetoVotes != nil {
		return *m.VetoVotes
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetAcquisitions() uint32 {
	if m != nil && m.Acquisitions != nil {
		return *m.Acquisitions
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_1() uint32 {
	if m != nil && m.Slot_1 != nil {
		return *m.Slot_1
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_2() uint32 {
	if m != nil && m.Slot_2 != nil {
		return *m.Slot_2
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_3() uint32 {
	if m != nil && m.Slot_3 != nil {
		return *m.Slot_3
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_4() uint32 {
	if m != nil && m.Slot_4 != nil {
		return *m.Slot_4
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSlot_5() uint32 {
	if m != nil && m.Slot_5 != nil {
		return *m.Slot_5
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetBenchSlots() uint32 {
	if m != nil && m.BenchSlots != nil {
		return *m.BenchSlots
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetOwnerInfo() []*CMsgDOTAFantasyLeagueInfo_OwnerInfo {
	if m != nil {
		return m.OwnerInfo
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueInfo) GetPlayers() []uint32 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueInfo) GetTimeZone() uint32 {
	if m != nil && m.TimeZone != nil {
		return *m.TimeZone
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetSeason() uint32 {
	if m != nil && m.Season != nil {
		return *m.Season
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type CMsgDOTAFantasyLeagueInfo_OwnerInfo struct {
	OwnerAccountId   *uint32  `protobuf:"varint,1,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	LeftLeague       *bool    `protobuf:"varint,2,opt,name=left_league" json:"left_league,omitempty"`
	PlayerAccountId  []uint32 `protobuf:"varint,3,rep,name=player_account_id" json:"player_account_id,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) Reset()         { *m = CMsgDOTAFantasyLeagueInfo_OwnerInfo{} }
func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfo_OwnerInfo) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueInfo_OwnerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{4, 0}
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetLeftLeague() bool {
	if m != nil && m.LeftLeague != nil {
		return *m.LeftLeague
	}
	return false
}

func (m *CMsgDOTAFantasyLeagueInfo_OwnerInfo) GetPlayerAccountId() []uint32 {
	if m != nil {
		return m.PlayerAccountId
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInfoRequest struct {
	FantasyLeagueId  *uint32                    `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	EditInfo         *CMsgDOTAFantasyLeagueInfo `protobuf:"bytes,2,opt,name=edit_info" json:"edit_info,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInfoRequest) Reset()         { *m = CMsgDOTAFantasyLeagueEditInfoRequest{} }
func (m *CMsgDOTAFantasyLeagueEditInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInfoRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueEditInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{5}
}

func (m *CMsgDOTAFantasyLeagueEditInfoRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueEditInfoRequest) GetEditInfo() *CMsgDOTAFantasyLeagueInfo {
	if m != nil {
		return m.EditInfo
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInfoResponse struct {
	Result           *CMsgDOTAFantasyLeagueEditInfoResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueEditInfoResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInfoResponse) Reset()         { *m = CMsgDOTAFantasyLeagueEditInfoResponse{} }
func (m *CMsgDOTAFantasyLeagueEditInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInfoResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueEditInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{6}
}

const Default_CMsgDOTAFantasyLeagueEditInfoResponse_Result CMsgDOTAFantasyLeagueEditInfoResponse_EResult = CMsgDOTAFantasyLeagueEditInfoResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueEditInfoResponse) GetResult() CMsgDOTAFantasyLeagueEditInfoResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueEditInfoResponse_Result
}

type CMsgDOTAFantasyLeagueFindRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Password         *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueFindRequest) Reset()         { *m = CMsgDOTAFantasyLeagueFindRequest{} }
func (m *CMsgDOTAFantasyLeagueFindRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueFindRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueFindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{7}
}

func (m *CMsgDOTAFantasyLeagueFindRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueFindRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type CMsgDOTAFantasyLeagueFindResponse struct {
	Result            *CMsgDOTAFantasyLeagueFindResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueFindResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueName *string                                    `protobuf:"bytes,2,opt,name=fantasy_league_name" json:"fantasy_league_name,omitempty"`
	CommissionerName  *string                                    `protobuf:"bytes,3,opt,name=commissioner_name" json:"commissioner_name,omitempty"`
	XXX_unrecognized  []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueFindResponse) Reset()         { *m = CMsgDOTAFantasyLeagueFindResponse{} }
func (m *CMsgDOTAFantasyLeagueFindResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueFindResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueFindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{8}
}

const Default_CMsgDOTAFantasyLeagueFindResponse_Result CMsgDOTAFantasyLeagueFindResponse_EResult = CMsgDOTAFantasyLeagueFindResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueFindResponse) GetResult() CMsgDOTAFantasyLeagueFindResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueFindResponse_Result
}

func (m *CMsgDOTAFantasyLeagueFindResponse) GetFantasyLeagueName() string {
	if m != nil && m.FantasyLeagueName != nil {
		return *m.FantasyLeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueFindResponse) GetCommissionerName() string {
	if m != nil && m.CommissionerName != nil {
		return *m.CommissionerName
	}
	return ""
}

type CMsgDOTAFantasyLeagueInfoRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfoRequest) Reset()         { *m = CMsgDOTAFantasyLeagueInfoRequest{} }
func (m *CMsgDOTAFantasyLeagueInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfoRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{9}
}

func (m *CMsgDOTAFantasyLeagueInfoRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueInfoResponse struct {
	Result           *CMsgDOTAFantasyLeagueInfoResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueInfoResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueInfoResponse) Reset()         { *m = CMsgDOTAFantasyLeagueInfoResponse{} }
func (m *CMsgDOTAFantasyLeagueInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueInfoResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{10}
}

const Default_CMsgDOTAFantasyLeagueInfoResponse_Result CMsgDOTAFantasyLeagueInfoResponse_EResult = CMsgDOTAFantasyLeagueInfoResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueInfoResponse) GetResult() CMsgDOTAFantasyLeagueInfoResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueInfoResponse_Result
}

type CMsgDOTAFantasyLeagueMatchupsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsRequest) Reset()         { *m = CMsgDOTAFantasyLeagueMatchupsRequest{} }
func (m *CMsgDOTAFantasyLeagueMatchupsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueMatchupsRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueMatchupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{11}
}

func (m *CMsgDOTAFantasyLeagueMatchupsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueMatchupsResponse struct {
	Result           *CMsgDOTAFantasyLeagueMatchupsResponse_EResult          `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueMatchupsResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                                 `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	WeeklyMatchups   []*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups `protobuf:"bytes,3,rep,name=weekly_matchups" json:"weekly_matchups,omitempty"`
	XXX_unrecognized []byte                                                  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) Reset()         { *m = CMsgDOTAFantasyLeagueMatchupsResponse{} }
func (m *CMsgDOTAFantasyLeagueMatchupsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueMatchupsResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueMatchupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{12}
}

const Default_CMsgDOTAFantasyLeagueMatchupsResponse_Result CMsgDOTAFantasyLeagueMatchupsResponse_EResult = CMsgDOTAFantasyLeagueMatchupsResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) GetResult() CMsgDOTAFantasyLeagueMatchupsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueMatchupsResponse_Result
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse) GetWeeklyMatchups() []*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups {
	if m != nil {
		return m.WeeklyMatchups
	}
	return nil
}

type CMsgDOTAFantasyLeagueMatchupsResponse_Matchup struct {
	OwnerAccountId_1 *uint32  `protobuf:"varint,1,opt,name=owner_account_id_1" json:"owner_account_id_1,omitempty"`
	OwnerAccountId_2 *uint32  `protobuf:"varint,2,opt,name=owner_account_id_2" json:"owner_account_id_2,omitempty"`
	Score_1          *float32 `protobuf:"fixed32,3,opt,name=score_1" json:"score_1,omitempty"`
	Score_2          *float32 `protobuf:"fixed32,4,opt,name=score_2" json:"score_2,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) Reset() {
	*m = CMsgDOTAFantasyLeagueMatchupsResponse_Matchup{}
}
func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) ProtoMessage() {}
func (*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{12, 0}
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetOwnerAccountId_1() uint32 {
	if m != nil && m.OwnerAccountId_1 != nil {
		return *m.OwnerAccountId_1
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetOwnerAccountId_2() uint32 {
	if m != nil && m.OwnerAccountId_2 != nil {
		return *m.OwnerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetScore_1() float32 {
	if m != nil && m.Score_1 != nil {
		return *m.Score_1
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_Matchup) GetScore_2() float32 {
	if m != nil && m.Score_2 != nil {
		return *m.Score_2
	}
	return 0
}

type CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups struct {
	Matchup          []*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup `protobuf:"bytes,1,rep,name=matchup" json:"matchup,omitempty"`
	StartTime        *uint32                                          `protobuf:"varint,2,opt,name=start_time" json:"start_time,omitempty"`
	EndTime          *uint32                                          `protobuf:"varint,3,opt,name=end_time" json:"end_time,omitempty"`
	XXX_unrecognized []byte                                           `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) Reset() {
	*m = CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups{}
}
func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) ProtoMessage() {}
func (*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{12, 1}
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetMatchup() []*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup {
	if m != nil {
		return m.Matchup
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type CMsgDOTAEditFantasyTeamRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,4,opt,name=team_logo" json:"team_logo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAEditFantasyTeamRequest) Reset()                    { *m = CMsgDOTAEditFantasyTeamRequest{} }
func (m *CMsgDOTAEditFantasyTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAEditFantasyTeamRequest) ProtoMessage()               {}
func (*CMsgDOTAEditFantasyTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{13} }

func (m *CMsgDOTAEditFantasyTeamRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAEditFantasyTeamRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAEditFantasyTeamRequest) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAEditFantasyTeamRequest) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

type CMsgDOTAEditFantasyTeamResponse struct {
	Result           *CMsgDOTAEditFantasyTeamResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAEditFantasyTeamResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                   `json:"-"`
}

func (m *CMsgDOTAEditFantasyTeamResponse) Reset()         { *m = CMsgDOTAEditFantasyTeamResponse{} }
func (m *CMsgDOTAEditFantasyTeamResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAEditFantasyTeamResponse) ProtoMessage()    {}
func (*CMsgDOTAEditFantasyTeamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{14}
}

const Default_CMsgDOTAEditFantasyTeamResponse_Result CMsgDOTAEditFantasyTeamResponse_EResult = CMsgDOTAEditFantasyTeamResponse_SUCCESS

func (m *CMsgDOTAEditFantasyTeamResponse) GetResult() CMsgDOTAEditFantasyTeamResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAEditFantasyTeamResponse_Result
}

type CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) Reset() {
	*m = CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID{}
}
func (m *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) ProtoMessage() {}
func (*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{15}
}

func (m *CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID struct {
	OwnerAccountId   *uint32 `protobuf:"varint,1,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) Reset() {
	*m = CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID{}
}
func (m *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) ProtoMessage() {}
func (*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{16}
}

func (m *CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

type CMsgDOTAFantasyTeamInfoResponse struct {
	Results          []*CMsgDOTAFantasyTeamInfo `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfoResponse) Reset()         { *m = CMsgDOTAFantasyTeamInfoResponse{} }
func (m *CMsgDOTAFantasyTeamInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamInfoResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{17}
}

func (m *CMsgDOTAFantasyTeamInfoResponse) GetResults() []*CMsgDOTAFantasyTeamInfo {
	if m != nil {
		return m.Results
	}
	return nil
}

type CMsgDOTAFantasyTeamInfo struct {
	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32  `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32  `protobuf:"varint,3,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	TeamName         *string  `protobuf:"bytes,4,opt,name=team_name" json:"team_name,omitempty"`
	TeamLogo         *uint64  `protobuf:"varint,5,opt,name=team_logo" json:"team_logo,omitempty"`
	Wins             *uint32  `protobuf:"varint,6,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32  `protobuf:"varint,7,opt,name=losses" json:"losses,omitempty"`
	CurrentRoster    []uint32 `protobuf:"varint,8,rep,name=current_roster" json:"current_roster,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyTeamInfo) Reset()                    { *m = CMsgDOTAFantasyTeamInfo{} }
func (m *CMsgDOTAFantasyTeamInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamInfo) ProtoMessage()               {}
func (*CMsgDOTAFantasyTeamInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{18} }

func (m *CMsgDOTAFantasyTeamInfo) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamInfo) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamInfo) GetCurrentRoster() []uint32 {
	if m != nil {
		return m.CurrentRoster
	}
	return nil
}

type CMsgDOTAFantasyTeamScoreRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32 `protobuf:"varint,3,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,4,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,5,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,6,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	IncludeBench     *bool   `protobuf:"varint,7,opt,name=include_bench" json:"include_bench,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamScoreRequest) Reset()         { *m = CMsgDOTAFantasyTeamScoreRequest{} }
func (m *CMsgDOTAFantasyTeamScoreRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamScoreRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{19}
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreRequest) GetIncludeBench() bool {
	if m != nil && m.IncludeBench != nil {
		return *m.IncludeBench
	}
	return false
}

type CMsgDOTAFantasyTeamScoreResponse struct {
	Result             *CMsgDOTAFantasyTeamScoreResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamScoreResponse_EResult,def=0" json:"result,omitempty"`
	FantasyTeamScore   *float32                                            `protobuf:"fixed32,2,opt,name=fantasy_team_score" json:"fantasy_team_score,omitempty"`
	FantasyPlayerScore []*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore `protobuf:"bytes,3,rep,name=fantasy_player_score" json:"fantasy_player_score,omitempty"`
	XXX_unrecognized   []byte                                              `json:"-"`
}

func (m *CMsgDOTAFantasyTeamScoreResponse) Reset()         { *m = CMsgDOTAFantasyTeamScoreResponse{} }
func (m *CMsgDOTAFantasyTeamScoreResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamScoreResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{20}
}

const Default_CMsgDOTAFantasyTeamScoreResponse_Result CMsgDOTAFantasyTeamScoreResponse_EResult = CMsgDOTAFantasyTeamScoreResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamScoreResponse) GetResult() CMsgDOTAFantasyTeamScoreResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamScoreResponse_Result
}

func (m *CMsgDOTAFantasyTeamScoreResponse) GetFantasyTeamScore() float32 {
	if m != nil && m.FantasyTeamScore != nil {
		return *m.FantasyTeamScore
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreResponse) GetFantasyPlayerScore() []*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore {
	if m != nil {
		return m.FantasyPlayerScore
	}
	return nil
}

type CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore struct {
	AccountId        *uint32  `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Score            *float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) Reset() {
	*m = CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore{}
}
func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) ProtoMessage() {}
func (*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{20, 0}
}

func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyTeamStandingsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,3,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,4,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,5,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterLastMatch  *bool   `protobuf:"varint,6,opt,name=filter_last_match" json:"filter_last_match,omitempty"`
	FilterInHall     *bool   `protobuf:"varint,7,opt,name=filter_in_hall" json:"filter_in_hall,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) Reset()         { *m = CMsgDOTAFantasyTeamStandingsRequest{} }
func (m *CMsgDOTAFantasyTeamStandingsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamStandingsRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamStandingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{21}
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterLastMatch() bool {
	if m != nil && m.FilterLastMatch != nil {
		return *m.FilterLastMatch
	}
	return false
}

func (m *CMsgDOTAFantasyTeamStandingsRequest) GetFilterInHall() bool {
	if m != nil && m.FilterInHall != nil {
		return *m.FilterInHall
	}
	return false
}

type CMsgDOTAFantasyTeamStandingsResponse struct {
	Result           *CMsgDOTAFantasyTeamStandingsResponse_EResult         `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamStandingsResponse_EResult,def=0" json:"result,omitempty"`
	TeamScores       []*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore `protobuf:"bytes,3,rep,name=team_scores" json:"team_scores,omitempty"`
	XXX_unrecognized []byte                                                `json:"-"`
}

func (m *CMsgDOTAFantasyTeamStandingsResponse) Reset()         { *m = CMsgDOTAFantasyTeamStandingsResponse{} }
func (m *CMsgDOTAFantasyTeamStandingsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamStandingsResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamStandingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{22}
}

const Default_CMsgDOTAFantasyTeamStandingsResponse_Result CMsgDOTAFantasyTeamStandingsResponse_EResult = CMsgDOTAFantasyTeamStandingsResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamStandingsResponse) GetResult() CMsgDOTAFantasyTeamStandingsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamStandingsResponse_Result
}

func (m *CMsgDOTAFantasyTeamStandingsResponse) GetTeamScores() []*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore {
	if m != nil {
		return m.TeamScores
	}
	return nil
}

type CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore struct {
	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32  `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	FantasyTeamIndex *uint32  `protobuf:"varint,3,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	FantasyTeamLogo  *uint64  `protobuf:"varint,4,opt,name=fantasy_team_logo" json:"fantasy_team_logo,omitempty"`
	OwnerName        *string  `protobuf:"bytes,5,opt,name=owner_name" json:"owner_name,omitempty"`
	FantasyTeamName  *string  `protobuf:"bytes,6,opt,name=fantasy_team_name" json:"fantasy_team_name,omitempty"`
	Score            *float32 `protobuf:"fixed32,7,opt,name=score" json:"score,omitempty"`
	ScoreAgainst     *float32 `protobuf:"fixed32,8,opt,name=score_against" json:"score_against,omitempty"`
	Wins             *uint32  `protobuf:"varint,9,opt,name=wins" json:"wins,omitempty"`
	Losses           *uint32  `protobuf:"varint,10,opt,name=losses" json:"losses,omitempty"`
	Streak           *int32   `protobuf:"varint,11,opt,name=streak" json:"streak,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) Reset() {
	*m = CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore{}
}
func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) ProtoMessage() {}
func (*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{22, 0}
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamLogo() uint64 {
	if m != nil && m.FantasyTeamLogo != nil {
		return *m.FantasyTeamLogo
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetOwnerName() string {
	if m != nil && m.OwnerName != nil {
		return *m.OwnerName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetFantasyTeamName() string {
	if m != nil && m.FantasyTeamName != nil {
		return *m.FantasyTeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetScoreAgainst() float32 {
	if m != nil && m.ScoreAgainst != nil {
		return *m.ScoreAgainst
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetWins() uint32 {
	if m != nil && m.Wins != nil {
		return *m.Wins
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetLosses() uint32 {
	if m != nil && m.Losses != nil {
		return *m.Losses
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore) GetStreak() int32 {
	if m != nil && m.Streak != nil {
		return *m.Streak
	}
	return 0
}

type CMsgDOTAFantasyPlayerScoreRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,2,opt,name=player_account_id" json:"player_account_id,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,3,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,4,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,5,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterLastMatch  *bool   `protobuf:"varint,6,opt,name=filter_last_match" json:"filter_last_match,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) Reset()         { *m = CMsgDOTAFantasyPlayerScoreRequest{} }
func (m *CMsgDOTAFantasyPlayerScoreRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{23}
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreRequest) GetFilterLastMatch() bool {
	if m != nil && m.FilterLastMatch != nil {
		return *m.FilterLastMatch
	}
	return false
}

type CMsgDOTAFantasyPlayerScoreResponse struct {
	Result           *CMsgDOTAFantasyPlayerScoreResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerScoreResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                     `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	PlayerAccountId  *uint32                                     `protobuf:"varint,3,opt,name=player_account_id" json:"player_account_id,omitempty"`
	PlayerName       *string                                     `protobuf:"bytes,4,opt,name=player_name" json:"player_name,omitempty"`
	Score            *float32                                    `protobuf:"fixed32,5,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) Reset()         { *m = CMsgDOTAFantasyPlayerScoreResponse{} }
func (m *CMsgDOTAFantasyPlayerScoreResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{24}
}

const Default_CMsgDOTAFantasyPlayerScoreResponse_Result CMsgDOTAFantasyPlayerScoreResponse_EResult = CMsgDOTAFantasyPlayerScoreResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetResult() CMsgDOTAFantasyPlayerScoreResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerScoreResponse_Result
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *CMsgDOTAFantasyPlayerScoreResponse) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerStandingsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Count            *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Role             *uint32 `protobuf:"varint,3,opt,name=role" json:"role,omitempty"`
	FilterStartTime  *uint32 `protobuf:"varint,4,opt,name=filter_start_time" json:"filter_start_time,omitempty"`
	FilterEndTime    *uint32 `protobuf:"varint,5,opt,name=filter_end_time" json:"filter_end_time,omitempty"`
	FilterMatchId    *uint64 `protobuf:"varint,6,opt,name=filter_match_id" json:"filter_match_id,omitempty"`
	FilterLastMatch  *bool   `protobuf:"varint,7,opt,name=filter_last_match" json:"filter_last_match,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) Reset()         { *m = CMsgDOTAFantasyPlayerStandingsRequest{} }
func (m *CMsgDOTAFantasyPlayerStandingsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerStandingsRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerStandingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{25}
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetRole() uint32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterStartTime() uint32 {
	if m != nil && m.FilterStartTime != nil {
		return *m.FilterStartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterEndTime() uint32 {
	if m != nil && m.FilterEndTime != nil {
		return *m.FilterEndTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterMatchId() uint64 {
	if m != nil && m.FilterMatchId != nil {
		return *m.FilterMatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsRequest) GetFilterLastMatch() bool {
	if m != nil && m.FilterLastMatch != nil {
		return *m.FilterLastMatch
	}
	return false
}

type CMsgDOTAFantasyPlayerStandingsResponse struct {
	Result           *CMsgDOTAFantasyPlayerStandingsResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerStandingsResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                                   `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Role             *uint32                                                   `protobuf:"varint,3,opt,name=role" json:"role,omitempty"`
	PlayerScores     []*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore `protobuf:"bytes,4,rep,name=player_scores" json:"player_scores,omitempty"`
	XXX_unrecognized []byte                                                    `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) Reset() {
	*m = CMsgDOTAFantasyPlayerStandingsResponse{}
}
func (m *CMsgDOTAFantasyPlayerStandingsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerStandingsResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerStandingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{26}
}

const Default_CMsgDOTAFantasyPlayerStandingsResponse_Result CMsgDOTAFantasyPlayerStandingsResponse_EResult = CMsgDOTAFantasyPlayerStandingsResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetResult() CMsgDOTAFantasyPlayerStandingsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerStandingsResponse_Result
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetRole() uint32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse) GetPlayerScores() []*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore {
	if m != nil {
		return m.PlayerScores
	}
	return nil
}

type CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore struct {
	PlayerAccountId  *uint32  `protobuf:"varint,1,opt,name=player_account_id" json:"player_account_id,omitempty"`
	PlayerName       *string  `protobuf:"bytes,2,opt,name=player_name" json:"player_name,omitempty"`
	Score            *float32 `protobuf:"fixed32,3,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) Reset() {
	*m = CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore{}
}
func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) ProtoMessage() {}
func (*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{26, 0}
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerInfoRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerInfoRequest) Reset()         { *m = CMsgDOTAFantasyPlayerInfoRequest{} }
func (m *CMsgDOTAFantasyPlayerInfoRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerInfoRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{27}
}

type CMsgDOTAFantasyPlayerInfoResponse struct {
	Msg              *CMsgGCPlayerInfo `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerInfoResponse) Reset()         { *m = CMsgDOTAFantasyPlayerInfoResponse{} }
func (m *CMsgDOTAFantasyPlayerInfoResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerInfoResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{28}
}

func (m *CMsgDOTAFantasyPlayerInfoResponse) GetMsg() *CMsgGCPlayerInfo {
	if m != nil {
		return m.Msg
	}
	return nil
}

type CMsgDOTAFantasyLeagueCreateRequest struct {
	SeasonId          *uint32 `protobuf:"varint,1,opt,name=season_id" json:"season_id,omitempty"`
	FantasyLeagueName *string `protobuf:"bytes,2,opt,name=fantasy_league_name" json:"fantasy_league_name,omitempty"`
	Password          *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	TeamName          *string `protobuf:"bytes,4,opt,name=team_name" json:"team_name,omitempty"`
	Logo              *uint64 `protobuf:"varint,5,opt,name=logo" json:"logo,omitempty"`
	TicketItemId      *uint64 `protobuf:"varint,6,opt,name=ticket_item_id" json:"ticket_item_id,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) Reset()         { *m = CMsgDOTAFantasyLeagueCreateRequest{} }
func (m *CMsgDOTAFantasyLeagueCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueCreateRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{29}
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetSeasonId() uint32 {
	if m != nil && m.SeasonId != nil {
		return *m.SeasonId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetFantasyLeagueName() string {
	if m != nil && m.FantasyLeagueName != nil {
		return *m.FantasyLeagueName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetLogo() uint64 {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueCreateRequest) GetTicketItemId() uint64 {
	if m != nil && m.TicketItemId != nil {
		return *m.TicketItemId
	}
	return 0
}

type CMsgDOTAFantasyLeagueCreateResponse struct {
	Result           *CMsgDOTAFantasyLeagueCreateResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueCreateResponse_EResult,def=0" json:"result,omitempty"`
	FantasyLeagueId  *uint32                                      `protobuf:"varint,2,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueCreateResponse) Reset()         { *m = CMsgDOTAFantasyLeagueCreateResponse{} }
func (m *CMsgDOTAFantasyLeagueCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueCreateResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{30}
}

const Default_CMsgDOTAFantasyLeagueCreateResponse_Result CMsgDOTAFantasyLeagueCreateResponse_EResult = CMsgDOTAFantasyLeagueCreateResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueCreateResponse) GetResult() CMsgDOTAFantasyLeagueCreateResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueCreateResponse_Result
}

func (m *CMsgDOTAFantasyLeagueCreateResponse) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamCreateRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Password         *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	TeamName         *string `protobuf:"bytes,3,opt,name=team_name" json:"team_name,omitempty"`
	Logo             *uint64 `protobuf:"varint,4,opt,name=logo" json:"logo,omitempty"`
	TicketItemId     *uint64 `protobuf:"varint,5,opt,name=ticket_item_id" json:"ticket_item_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamCreateRequest) Reset()         { *m = CMsgDOTAFantasyTeamCreateRequest{} }
func (m *CMsgDOTAFantasyTeamCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamCreateRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{31}
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetLogo() uint64 {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamCreateRequest) GetTicketItemId() uint64 {
	if m != nil && m.TicketItemId != nil {
		return *m.TicketItemId
	}
	return 0
}

type CMsgDOTAFantasyTeamCreateResponse struct {
	Result           *CMsgDOTAFantasyTeamCreateResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamCreateResponse_EResult,def=0" json:"result,omitempty"`
	FantasyTeamIndex *uint32                                    `protobuf:"varint,2,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamCreateResponse) Reset()         { *m = CMsgDOTAFantasyTeamCreateResponse{} }
func (m *CMsgDOTAFantasyTeamCreateResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamCreateResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{32}
}

const Default_CMsgDOTAFantasyTeamCreateResponse_Result CMsgDOTAFantasyTeamCreateResponse_EResult = CMsgDOTAFantasyTeamCreateResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamCreateResponse) GetResult() CMsgDOTAFantasyTeamCreateResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamCreateResponse_Result
}

func (m *CMsgDOTAFantasyTeamCreateResponse) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

type CMsgDOTAFantasyLeagueEditInvitesRequest struct {
	FantasyLeagueId  *uint32                                                 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Password         *string                                                 `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	InviteChange     []*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange `protobuf:"bytes,3,rep,name=invite_change" json:"invite_change,omitempty"`
	XXX_unrecognized []byte                                                  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) Reset() {
	*m = CMsgDOTAFantasyLeagueEditInvitesRequest{}
}
func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInvitesRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueEditInvitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{33}
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest) GetInviteChange() []*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange {
	if m != nil {
		return m.InviteChange
	}
	return nil
}

type CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Invited          *bool   `protobuf:"varint,2,opt,name=invited" json:"invited,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) Reset() {
	*m = CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange{}
}
func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) ProtoMessage() {}
func (*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{33, 0}
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange) GetInvited() bool {
	if m != nil && m.Invited != nil {
		return *m.Invited
	}
	return false
}

type CMsgDOTAFantasyLeagueEditInvitesResponse struct {
	Result           *CMsgDOTAFantasyLeagueEditInvitesResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueEditInvitesResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueEditInvitesResponse) Reset() {
	*m = CMsgDOTAFantasyLeagueEditInvitesResponse{}
}
func (m *CMsgDOTAFantasyLeagueEditInvitesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueEditInvitesResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueEditInvitesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{34}
}

const Default_CMsgDOTAFantasyLeagueEditInvitesResponse_Result CMsgDOTAFantasyLeagueEditInvitesResponse_EResult = CMsgDOTAFantasyLeagueEditInvitesResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueEditInvitesResponse) GetResult() CMsgDOTAFantasyLeagueEditInvitesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueEditInvitesResponse_Result
}

type CMsgDOTAFantasyLeagueDraftStatusRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftStatusRequest) Reset() {
	*m = CMsgDOTAFantasyLeagueDraftStatusRequest{}
}
func (m *CMsgDOTAFantasyLeagueDraftStatusRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftStatusRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueDraftStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{35}
}

func (m *CMsgDOTAFantasyLeagueDraftStatusRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyLeagueDraftStatus struct {
	FantasyLeagueId  *uint32  `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	DraftOrder       []uint32 `protobuf:"varint,2,rep,name=draft_order" json:"draft_order,omitempty"`
	CurrentPick      *uint32  `protobuf:"varint,3,opt,name=current_pick" json:"current_pick,omitempty"`
	TimeRemaining    *uint32  `protobuf:"varint,4,opt,name=time_remaining" json:"time_remaining,omitempty"`
	PendingResume    *bool    `protobuf:"varint,5,opt,name=pending_resume" json:"pending_resume,omitempty"`
	Completed        *bool    `protobuf:"varint,6,opt,name=completed" json:"completed,omitempty"`
	AvailablePlayers []uint32 `protobuf:"varint,7,rep,name=available_players" json:"available_players,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) Reset()         { *m = CMsgDOTAFantasyLeagueDraftStatus{} }
func (m *CMsgDOTAFantasyLeagueDraftStatus) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftStatus) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueDraftStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{36}
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetDraftOrder() []uint32 {
	if m != nil {
		return m.DraftOrder
	}
	return nil
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetCurrentPick() uint32 {
	if m != nil && m.CurrentPick != nil {
		return *m.CurrentPick
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetTimeRemaining() uint32 {
	if m != nil && m.TimeRemaining != nil {
		return *m.TimeRemaining
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetPendingResume() bool {
	if m != nil && m.PendingResume != nil {
		return *m.PendingResume
	}
	return false
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetCompleted() bool {
	if m != nil && m.Completed != nil {
		return *m.Completed
	}
	return false
}

func (m *CMsgDOTAFantasyLeagueDraftStatus) GetAvailablePlayers() []uint32 {
	if m != nil {
		return m.AvailablePlayers
	}
	return nil
}

type CMsgDOTAFantasyLeagueDraftPlayerRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,3,opt,name=player_account_id" json:"player_account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) Reset() {
	*m = CMsgDOTAFantasyLeagueDraftPlayerRequest{}
}
func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftPlayerRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueDraftPlayerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{37}
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

type CMsgDOTAFantasyLeagueDraftPlayerResponse struct {
	Result           *CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAFantasyLeagueDraftPlayerResponse) Reset() {
	*m = CMsgDOTAFantasyLeagueDraftPlayerResponse{}
}
func (m *CMsgDOTAFantasyLeagueDraftPlayerResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeagueDraftPlayerResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeagueDraftPlayerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{38}
}

const Default_CMsgDOTAFantasyLeagueDraftPlayerResponse_Result CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult = CMsgDOTAFantasyLeagueDraftPlayerResponse_SUCCESS

func (m *CMsgDOTAFantasyLeagueDraftPlayerResponse) GetResult() CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeagueDraftPlayerResponse_Result
}

type CMsgDOTAFantasyTeamRosterSwapRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Slot_1           *uint32 `protobuf:"varint,4,opt,name=slot_1" json:"slot_1,omitempty"`
	Slot_2           *uint32 `protobuf:"varint,5,opt,name=slot_2" json:"slot_2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) Reset()         { *m = CMsgDOTAFantasyTeamRosterSwapRequest{} }
func (m *CMsgDOTAFantasyTeamRosterSwapRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterSwapRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamRosterSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{39}
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetSlot_1() uint32 {
	if m != nil && m.Slot_1 != nil {
		return *m.Slot_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterSwapRequest) GetSlot_2() uint32 {
	if m != nil && m.Slot_2 != nil {
		return *m.Slot_2
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterSwapResponse struct {
	Result           *CMsgDOTAFantasyTeamRosterSwapResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamRosterSwapResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterSwapResponse) Reset()         { *m = CMsgDOTAFantasyTeamRosterSwapResponse{} }
func (m *CMsgDOTAFantasyTeamRosterSwapResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterSwapResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamRosterSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{40}
}

const Default_CMsgDOTAFantasyTeamRosterSwapResponse_Result CMsgDOTAFantasyTeamRosterSwapResponse_EResult = CMsgDOTAFantasyTeamRosterSwapResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamRosterSwapResponse) GetResult() CMsgDOTAFantasyTeamRosterSwapResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterSwapResponse_Result
}

type CMsgDOTAFantasyTeamRosterAddDropRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	AddAccountId     *uint32 `protobuf:"varint,5,opt,name=add_account_id" json:"add_account_id,omitempty"`
	DropAccountId    *uint32 `protobuf:"varint,6,opt,name=drop_account_id" json:"drop_account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) Reset() {
	*m = CMsgDOTAFantasyTeamRosterAddDropRequest{}
}
func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterAddDropRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamRosterAddDropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{41}
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetAddAccountId() uint32 {
	if m != nil && m.AddAccountId != nil {
		return *m.AddAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterAddDropRequest) GetDropAccountId() uint32 {
	if m != nil && m.DropAccountId != nil {
		return *m.DropAccountId
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterAddDropResponse struct {
	Result           *CMsgDOTAFantasyTeamRosterAddDropResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamRosterAddDropResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                            `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterAddDropResponse) Reset() {
	*m = CMsgDOTAFantasyTeamRosterAddDropResponse{}
}
func (m *CMsgDOTAFantasyTeamRosterAddDropResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterAddDropResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamRosterAddDropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{42}
}

const Default_CMsgDOTAFantasyTeamRosterAddDropResponse_Result CMsgDOTAFantasyTeamRosterAddDropResponse_EResult = CMsgDOTAFantasyTeamRosterAddDropResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamRosterAddDropResponse) GetResult() CMsgDOTAFantasyTeamRosterAddDropResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterAddDropResponse_Result
}

type CMsgDOTAFantasyTeamTradesRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradesRequest) Reset()         { *m = CMsgDOTAFantasyTeamTradesRequest{} }
func (m *CMsgDOTAFantasyTeamTradesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradesRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamTradesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{43}
}

func (m *CMsgDOTAFantasyTeamTradesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyTeamTradesResponse struct {
	Result           *CMsgDOTAFantasyTeamTradesResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamTradesResponse_EResult,def=0" json:"result,omitempty"`
	Trades           []*CMsgDOTAFantasyTeamTradesResponse_Trade `protobuf:"bytes,2,rep,name=trades" json:"trades,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradesResponse) Reset()         { *m = CMsgDOTAFantasyTeamTradesResponse{} }
func (m *CMsgDOTAFantasyTeamTradesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradesResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamTradesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{44}
}

const Default_CMsgDOTAFantasyTeamTradesResponse_Result CMsgDOTAFantasyTeamTradesResponse_EResult = CMsgDOTAFantasyTeamTradesResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamTradesResponse) GetResult() CMsgDOTAFantasyTeamTradesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamTradesResponse_Result
}

func (m *CMsgDOTAFantasyTeamTradesResponse) GetTrades() []*CMsgDOTAFantasyTeamTradesResponse_Trade {
	if m != nil {
		return m.Trades
	}
	return nil
}

type CMsgDOTAFantasyTeamTradesResponse_Trade struct {
	Timestamp         *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	OwnerAccountId_1  *uint32 `protobuf:"varint,2,opt,name=owner_account_id_1" json:"owner_account_id_1,omitempty"`
	OwnerAccountId_2  *uint32 `protobuf:"varint,3,opt,name=owner_account_id_2" json:"owner_account_id_2,omitempty"`
	PlayerAccountId_1 *uint32 `protobuf:"varint,4,opt,name=player_account_id_1" json:"player_account_id_1,omitempty"`
	PlayerAccountId_2 *uint32 `protobuf:"varint,5,opt,name=player_account_id_2" json:"player_account_id_2,omitempty"`
	Status            *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) Reset() {
	*m = CMsgDOTAFantasyTeamTradesResponse_Trade{}
}
func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradesResponse_Trade) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamTradesResponse_Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{44, 0}
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetOwnerAccountId_1() uint32 {
	if m != nil && m.OwnerAccountId_1 != nil {
		return *m.OwnerAccountId_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetOwnerAccountId_2() uint32 {
	if m != nil && m.OwnerAccountId_2 != nil {
		return *m.OwnerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetPlayerAccountId_1() uint32 {
	if m != nil && m.PlayerAccountId_1 != nil {
		return *m.PlayerAccountId_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetPlayerAccountId_2() uint32 {
	if m != nil && m.PlayerAccountId_2 != nil {
		return *m.PlayerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradesResponse_Trade) GetStatus() uint32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type CMsgDOTAFantasyTeamTradeCancelRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex_1      *uint32 `protobuf:"varint,3,opt,name=team_index_1" json:"team_index_1,omitempty"`
	OwnerAccountId_2 *uint32 `protobuf:"varint,4,opt,name=owner_account_id_2" json:"owner_account_id_2,omitempty"`
	TeamIndex_2      *uint32 `protobuf:"varint,5,opt,name=team_index_2" json:"team_index_2,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) Reset()         { *m = CMsgDOTAFantasyTeamTradeCancelRequest{} }
func (m *CMsgDOTAFantasyTeamTradeCancelRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradeCancelRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamTradeCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{45}
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetTeamIndex_1() uint32 {
	if m != nil && m.TeamIndex_1 != nil {
		return *m.TeamIndex_1
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetOwnerAccountId_2() uint32 {
	if m != nil && m.OwnerAccountId_2 != nil {
		return *m.OwnerAccountId_2
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamTradeCancelRequest) GetTeamIndex_2() uint32 {
	if m != nil && m.TeamIndex_2 != nil {
		return *m.TeamIndex_2
	}
	return 0
}

type CMsgDOTAFantasyTeamTradeCancelResponse struct {
	Result           *CMsgDOTAFantasyTeamTradeCancelResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamTradeCancelResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *CMsgDOTAFantasyTeamTradeCancelResponse) Reset() {
	*m = CMsgDOTAFantasyTeamTradeCancelResponse{}
}
func (m *CMsgDOTAFantasyTeamTradeCancelResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamTradeCancelResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamTradeCancelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{46}
}

const Default_CMsgDOTAFantasyTeamTradeCancelResponse_Result CMsgDOTAFantasyTeamTradeCancelResponse_EResult = CMsgDOTAFantasyTeamTradeCancelResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamTradeCancelResponse) GetResult() CMsgDOTAFantasyTeamTradeCancelResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamTradeCancelResponse_Result
}

type CMsgDOTAFantasyTeamRosterRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,2,opt,name=team_index" json:"team_index,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,3,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterRequest) Reset()         { *m = CMsgDOTAFantasyTeamRosterRequest{} }
func (m *CMsgDOTAFantasyTeamRosterRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamRosterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{47}
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyTeamRosterRequest) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgDOTAFantasyTeamRosterResponse struct {
	Result           *CMsgDOTAFantasyTeamRosterResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyTeamRosterResponse_EResult,def=0" json:"result,omitempty"`
	PlayerAccountIds []uint32                                   `protobuf:"varint,2,rep,name=player_account_ids" json:"player_account_ids,omitempty"`
	PlayerLocked     []bool                                     `protobuf:"varint,3,rep,name=player_locked" json:"player_locked,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyTeamRosterResponse) Reset()         { *m = CMsgDOTAFantasyTeamRosterResponse{} }
func (m *CMsgDOTAFantasyTeamRosterResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyTeamRosterResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyTeamRosterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{48}
}

const Default_CMsgDOTAFantasyTeamRosterResponse_Result CMsgDOTAFantasyTeamRosterResponse_EResult = CMsgDOTAFantasyTeamRosterResponse_SUCCESS

func (m *CMsgDOTAFantasyTeamRosterResponse) GetResult() CMsgDOTAFantasyTeamRosterResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyTeamRosterResponse_Result
}

func (m *CMsgDOTAFantasyTeamRosterResponse) GetPlayerAccountIds() []uint32 {
	if m != nil {
		return m.PlayerAccountIds
	}
	return nil
}

func (m *CMsgDOTAFantasyTeamRosterResponse) GetPlayerLocked() []bool {
	if m != nil {
		return m.PlayerLocked
	}
	return nil
}

type CMsgDOTAFantasyPlayerHisoricalStatsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsRequest) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsRequest{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsRequest) ProtoMessage() {}
func (*CMsgDOTAFantasyPlayerHisoricalStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{49}
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse struct {
	Result           *CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult       `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult,def=0" json:"result,omitempty"`
	Stats            []*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats `protobuf:"bytes,2,rep,name=stats" json:"stats,omitempty"`
	XXX_unrecognized []byte                                                     `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsResponse{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse) ProtoMessage() {}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{50}
}

const Default_CMsgDOTAFantasyPlayerHisoricalStatsResponse_Result CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult = CMsgDOTAFantasyPlayerHisoricalStatsResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) GetResult() CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerHisoricalStatsResponse_Result
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse) GetStats() []*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator struct {
	Matches          *uint32  `protobuf:"varint,1,opt,name=matches" json:"matches,omitempty"`
	Levels           *float32 `protobuf:"fixed32,2,opt,name=levels" json:"levels,omitempty"`
	Kills            *float32 `protobuf:"fixed32,3,opt,name=kills" json:"kills,omitempty"`
	Deaths           *float32 `protobuf:"fixed32,4,opt,name=deaths" json:"deaths,omitempty"`
	Assists          *float32 `protobuf:"fixed32,5,opt,name=assists" json:"assists,omitempty"`
	LastHits         *float32 `protobuf:"fixed32,6,opt,name=last_hits" json:"last_hits,omitempty"`
	Denies           *float32 `protobuf:"fixed32,7,opt,name=denies" json:"denies,omitempty"`
	Gpm              *float32 `protobuf:"fixed32,8,opt,name=gpm" json:"gpm,omitempty"`
	Xppm             *float32 `protobuf:"fixed32,9,opt,name=xppm" json:"xppm,omitempty"`
	Stuns            *float32 `protobuf:"fixed32,10,opt,name=stuns" json:"stuns,omitempty"`
	Healing          *float32 `protobuf:"fixed32,11,opt,name=healing" json:"healing,omitempty"`
	TowerKills       *float32 `protobuf:"fixed32,12,opt,name=tower_kills" json:"tower_kills,omitempty"`
	RoshanKills      *float32 `protobuf:"fixed32,13,opt,name=roshan_kills" json:"roshan_kills,omitempty"`
	Score            *float32 `protobuf:"fixed32,14,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) ProtoMessage() {}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{50, 0}
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetMatches() uint32 {
	if m != nil && m.Matches != nil {
		return *m.Matches
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetLevels() float32 {
	if m != nil && m.Levels != nil {
		return *m.Levels
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetKills() float32 {
	if m != nil && m.Kills != nil {
		return *m.Kills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetDeaths() float32 {
	if m != nil && m.Deaths != nil {
		return *m.Deaths
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetAssists() float32 {
	if m != nil && m.Assists != nil {
		return *m.Assists
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetLastHits() float32 {
	if m != nil && m.LastHits != nil {
		return *m.LastHits
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetDenies() float32 {
	if m != nil && m.Denies != nil {
		return *m.Denies
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetGpm() float32 {
	if m != nil && m.Gpm != nil {
		return *m.Gpm
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetXppm() float32 {
	if m != nil && m.Xppm != nil {
		return *m.Xppm
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetStuns() float32 {
	if m != nil && m.Stuns != nil {
		return *m.Stuns
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetHealing() float32 {
	if m != nil && m.Healing != nil {
		return *m.Healing
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetTowerKills() float32 {
	if m != nil && m.TowerKills != nil {
		return *m.TowerKills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetRoshanKills() float32 {
	if m != nil && m.RoshanKills != nil {
		return *m.RoshanKills
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator) GetScore() float32 {
	if m != nil && m.Score != nil {
		return *m.Score
	}
	return 0
}

type CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats struct {
	AccountId         *uint32                                                             `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	Weeks             *uint32                                                             `protobuf:"varint,2,opt,name=weeks" json:"weeks,omitempty"`
	StatsPremium      *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator `protobuf:"bytes,4,opt,name=stats_premium" json:"stats_premium,omitempty"`
	StatsProfessional *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator `protobuf:"bytes,5,opt,name=stats_professional" json:"stats_professional,omitempty"`
	XXX_unrecognized  []byte                                                              `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) Reset() {
	*m = CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats{}
}
func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) ProtoMessage() {}
func (*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{50, 1}
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetWeeks() uint32 {
	if m != nil && m.Weeks != nil {
		return *m.Weeks
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetStatsPremium() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator {
	if m != nil {
		return m.StatsPremium
	}
	return nil
}

func (m *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats) GetStatsProfessional() *CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator {
	if m != nil {
		return m.StatsProfessional
	}
	return nil
}

type CMsgDOTAFantasyMessageAdd struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyMessageAdd) Reset()                    { *m = CMsgDOTAFantasyMessageAdd{} }
func (m *CMsgDOTAFantasyMessageAdd) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessageAdd) ProtoMessage()               {}
func (*CMsgDOTAFantasyMessageAdd) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{51} }

func (m *CMsgDOTAFantasyMessageAdd) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessageAdd) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CMsgDOTAFantasyMessagesRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	StartMessage     *uint32 `protobuf:"varint,2,opt,name=start_message" json:"start_message,omitempty"`
	EndMessage       *uint32 `protobuf:"varint,3,opt,name=end_message" json:"end_message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyMessagesRequest) Reset()                    { *m = CMsgDOTAFantasyMessagesRequest{} }
func (m *CMsgDOTAFantasyMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessagesRequest) ProtoMessage()               {}
func (*CMsgDOTAFantasyMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{52} }

func (m *CMsgDOTAFantasyMessagesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesRequest) GetStartMessage() uint32 {
	if m != nil && m.StartMessage != nil {
		return *m.StartMessage
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesRequest) GetEndMessage() uint32 {
	if m != nil && m.EndMessage != nil {
		return *m.EndMessage
	}
	return 0
}

type CMsgDOTAFantasyMessagesResponse struct {
	Result           *CMsgDOTAFantasyMessagesResponse_EResult   `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyMessagesResponse_EResult,def=0" json:"result,omitempty"`
	Messages         []*CMsgDOTAFantasyMessagesResponse_Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
	NumTotalMessages *uint32                                    `protobuf:"varint,3,opt,name=num_total_messages" json:"num_total_messages,omitempty"`
	XXX_unrecognized []byte                                     `json:"-"`
}

func (m *CMsgDOTAFantasyMessagesResponse) Reset()         { *m = CMsgDOTAFantasyMessagesResponse{} }
func (m *CMsgDOTAFantasyMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessagesResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{53}
}

const Default_CMsgDOTAFantasyMessagesResponse_Result CMsgDOTAFantasyMessagesResponse_EResult = CMsgDOTAFantasyMessagesResponse_SUCCESS

func (m *CMsgDOTAFantasyMessagesResponse) GetResult() CMsgDOTAFantasyMessagesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyMessagesResponse_Result
}

func (m *CMsgDOTAFantasyMessagesResponse) GetMessages() []*CMsgDOTAFantasyMessagesResponse_Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *CMsgDOTAFantasyMessagesResponse) GetNumTotalMessages() uint32 {
	if m != nil && m.NumTotalMessages != nil {
		return *m.NumTotalMessages
	}
	return 0
}

type CMsgDOTAFantasyMessagesResponse_Message struct {
	MessageId        *uint32 `protobuf:"varint,1,opt,name=message_id" json:"message_id,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	AuthorAccountId  *uint32 `protobuf:"varint,3,opt,name=author_account_id" json:"author_account_id,omitempty"`
	Time             *uint32 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) Reset() {
	*m = CMsgDOTAFantasyMessagesResponse_Message{}
}
func (m *CMsgDOTAFantasyMessagesResponse_Message) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyMessagesResponse_Message) ProtoMessage()    {}
func (*CMsgDOTAFantasyMessagesResponse_Message) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{53, 0}
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetMessageId() uint32 {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetAuthorAccountId() uint32 {
	if m != nil && m.AuthorAccountId != nil {
		return *m.AuthorAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyMessagesResponse_Message) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type CMsgDOTAFantasyRemoveOwner struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	OwnerAccountId   *uint32 `protobuf:"varint,2,opt,name=owner_account_id" json:"owner_account_id,omitempty"`
	TeamIndex        *uint32 `protobuf:"varint,3,opt,name=team_index" json:"team_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyRemoveOwner) Reset()                    { *m = CMsgDOTAFantasyRemoveOwner{} }
func (m *CMsgDOTAFantasyRemoveOwner) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyRemoveOwner) ProtoMessage()               {}
func (*CMsgDOTAFantasyRemoveOwner) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{54} }

func (m *CMsgDOTAFantasyRemoveOwner) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyRemoveOwner) GetOwnerAccountId() uint32 {
	if m != nil && m.OwnerAccountId != nil {
		return *m.OwnerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyRemoveOwner) GetTeamIndex() uint32 {
	if m != nil && m.TeamIndex != nil {
		return *m.TeamIndex
	}
	return 0
}

type CMsgDOTAFantasyRemoveOwnerResponse struct {
	Result           *CMsgDOTAFantasyRemoveOwnerResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyRemoveOwnerResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgDOTAFantasyRemoveOwnerResponse) Reset()         { *m = CMsgDOTAFantasyRemoveOwnerResponse{} }
func (m *CMsgDOTAFantasyRemoveOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyRemoveOwnerResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyRemoveOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{55}
}

const Default_CMsgDOTAFantasyRemoveOwnerResponse_Result CMsgDOTAFantasyRemoveOwnerResponse_EResult = CMsgDOTAFantasyRemoveOwnerResponse_SUCCESS

func (m *CMsgDOTAFantasyRemoveOwnerResponse) GetResult() CMsgDOTAFantasyRemoveOwnerResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyRemoveOwnerResponse_Result
}

type CMsgDOTAFantasyScheduledMatchesRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyScheduledMatchesRequest) Reset() {
	*m = CMsgDOTAFantasyScheduledMatchesRequest{}
}
func (m *CMsgDOTAFantasyScheduledMatchesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyScheduledMatchesRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyScheduledMatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{56}
}

func (m *CMsgDOTAFantasyScheduledMatchesRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

type CMsgDOTAFantasyScheduledMatchesResponse struct {
	Result             *CMsgDOTAFantasyScheduledMatchesResponse_EResult              `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyScheduledMatchesResponse_EResult,def=0" json:"result,omitempty"`
	ScheduledMatchDays []*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays `protobuf:"bytes,2,rep,name=scheduled_match_days" json:"scheduled_match_days,omitempty"`
	XXX_unrecognized   []byte                                                        `json:"-"`
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse) Reset() {
	*m = CMsgDOTAFantasyScheduledMatchesResponse{}
}
func (m *CMsgDOTAFantasyScheduledMatchesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyScheduledMatchesResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyScheduledMatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{57}
}

const Default_CMsgDOTAFantasyScheduledMatchesResponse_Result CMsgDOTAFantasyScheduledMatchesResponse_EResult = CMsgDOTAFantasyScheduledMatchesResponse_SUCCESS

func (m *CMsgDOTAFantasyScheduledMatchesResponse) GetResult() CMsgDOTAFantasyScheduledMatchesResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyScheduledMatchesResponse_Result
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse) GetScheduledMatchDays() []*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays {
	if m != nil {
		return m.ScheduledMatchDays
	}
	return nil
}

type CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays struct {
	Timestamp        *uint32  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	TeamIds          []uint32 `protobuf:"varint,2,rep,name=team_ids" json:"team_ids,omitempty"`
	LeagueIds        []uint32 `protobuf:"varint,3,rep,name=league_ids" json:"league_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) Reset() {
	*m = CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays{}
}
func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) ProtoMessage() {}
func (*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{57, 0}
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetTeamIds() []uint32 {
	if m != nil {
		return m.TeamIds
	}
	return nil
}

func (m *CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays) GetLeagueIds() []uint32 {
	if m != nil {
		return m.LeagueIds
	}
	return nil
}

type CMsgDOTAFantasyLeaveLeagueRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	FantasyTeamIndex *uint32 `protobuf:"varint,2,opt,name=fantasy_team_index" json:"fantasy_team_index,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyLeaveLeagueRequest) Reset()         { *m = CMsgDOTAFantasyLeaveLeagueRequest{} }
func (m *CMsgDOTAFantasyLeaveLeagueRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeaveLeagueRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeaveLeagueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{58}
}

func (m *CMsgDOTAFantasyLeaveLeagueRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyLeaveLeagueRequest) GetFantasyTeamIndex() uint32 {
	if m != nil && m.FantasyTeamIndex != nil {
		return *m.FantasyTeamIndex
	}
	return 0
}

type CMsgDOTAFantasyLeaveLeagueResponse struct {
	Result           *CMsgDOTAFantasyLeaveLeagueResponse_EResult `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyLeaveLeagueResponse_EResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgDOTAFantasyLeaveLeagueResponse) Reset()         { *m = CMsgDOTAFantasyLeaveLeagueResponse{} }
func (m *CMsgDOTAFantasyLeaveLeagueResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyLeaveLeagueResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyLeaveLeagueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{59}
}

const Default_CMsgDOTAFantasyLeaveLeagueResponse_Result CMsgDOTAFantasyLeaveLeagueResponse_EResult = CMsgDOTAFantasyLeaveLeagueResponse_SUCCESS

func (m *CMsgDOTAFantasyLeaveLeagueResponse) GetResult() CMsgDOTAFantasyLeaveLeagueResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyLeaveLeagueResponse_Result
}

type CMsgDOTAFantasyPlayerScoreDetailsRequest struct {
	FantasyLeagueId  *uint32 `protobuf:"varint,1,opt,name=fantasy_league_id" json:"fantasy_league_id,omitempty"`
	PlayerAccountId  *uint32 `protobuf:"varint,2,opt,name=player_account_id" json:"player_account_id,omitempty"`
	StartTime        *uint32 `protobuf:"varint,3,opt,name=start_time" json:"start_time,omitempty"`
	EndTime          *uint32 `protobuf:"varint,4,opt,name=end_time" json:"end_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) Reset() {
	*m = CMsgDOTAFantasyPlayerScoreDetailsRequest{}
}
func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreDetailsRequest) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerScoreDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{60}
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetFantasyLeagueId() uint32 {
	if m != nil && m.FantasyLeagueId != nil {
		return *m.FantasyLeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetPlayerAccountId() uint32 {
	if m != nil && m.PlayerAccountId != nil {
		return *m.PlayerAccountId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsRequest) GetEndTime() uint32 {
	if m != nil && m.EndTime != nil {
		return *m.EndTime
	}
	return 0
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse struct {
	Result           *CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult           `protobuf:"varint,1,opt,name=result,enum=dota.CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult,def=0" json:"result,omitempty"`
	Data             []*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte                                                       `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) Reset() {
	*m = CMsgDOTAFantasyPlayerScoreDetailsResponse{}
}
func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse) ProtoMessage()    {}
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{61}
}

const Default_CMsgDOTAFantasyPlayerScoreDetailsResponse_Result CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult = CMsgDOTAFantasyPlayerScoreDetailsResponse_SUCCESS

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) GetResult() CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAFantasyPlayerScoreDetailsResponse_Result
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse) GetData() []*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData struct {
	MatchId          *uint64                   `protobuf:"varint,1,opt,name=match_id" json:"match_id,omitempty"`
	SeriesId         *uint32                   `protobuf:"varint,2,opt,name=series_id" json:"series_id,omitempty"`
	SeriesNum        *uint32                   `protobuf:"varint,3,opt,name=series_num" json:"series_num,omitempty"`
	SeriesType       *uint32                   `protobuf:"varint,4,opt,name=series_type" json:"series_type,omitempty"`
	LeagueTier       *uint32                   `protobuf:"varint,5,opt,name=league_tier" json:"league_tier,omitempty"`
	LeagueId         *uint32                   `protobuf:"varint,6,opt,name=league_id" json:"league_id,omitempty"`
	OpposingTeamId   *uint32                   `protobuf:"varint,7,opt,name=opposing_team_id" json:"opposing_team_id,omitempty"`
	OpposingTeamLogo *uint64                   `protobuf:"varint,8,opt,name=opposing_team_logo" json:"opposing_team_logo,omitempty"`
	OpposingTeamName *string                   `protobuf:"bytes,9,opt,name=opposing_team_name" json:"opposing_team_name,omitempty"`
	Stats            *CMsgFantasyLeagueScoring `protobuf:"bytes,10,opt,name=stats" json:"stats,omitempty"`
	OwnedBy          *uint32                   `protobuf:"varint,11,opt,name=owned_by" json:"owned_by,omitempty"`
	Benched          *bool                     `protobuf:"varint,12,opt,name=benched" json:"benched,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) Reset() {
	*m = CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData{}
}
func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) ProtoMessage() {}
func (*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{61, 0}
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesNum() uint32 {
	if m != nil && m.SeriesNum != nil {
		return *m.SeriesNum
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetLeagueTier() uint32 {
	if m != nil && m.LeagueTier != nil {
		return *m.LeagueTier
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamId() uint32 {
	if m != nil && m.OpposingTeamId != nil {
		return *m.OpposingTeamId
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamLogo() uint64 {
	if m != nil && m.OpposingTeamLogo != nil {
		return *m.OpposingTeamLogo
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOpposingTeamName() string {
	if m != nil && m.OpposingTeamName != nil {
		return *m.OpposingTeamName
	}
	return ""
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetStats() *CMsgFantasyLeagueScoring {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetOwnedBy() uint32 {
	if m != nil && m.OwnedBy != nil {
		return *m.OwnedBy
	}
	return 0
}

func (m *CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData) GetBenched() bool {
	if m != nil && m.Benched != nil {
		return *m.Benched
	}
	return false
}

type CMsgDOTATournament struct {
	TournamentId       *uint32                    `protobuf:"varint,1,opt,name=tournament_id" json:"tournament_id,omitempty"`
	DivisionId         *uint32                    `protobuf:"varint,2,opt,name=division_id" json:"division_id,omitempty"`
	ScheduleTime       *uint32                    `protobuf:"varint,3,opt,name=schedule_time" json:"schedule_time,omitempty"`
	SkillLevel         *uint32                    `protobuf:"varint,4,opt,name=skill_level" json:"skill_level,omitempty"`
	TournamentTemplate *ETournamentTemplate       `protobuf:"varint,5,opt,name=tournament_template,enum=dota.ETournamentTemplate,def=0" json:"tournament_template,omitempty"`
	State              *ETournamentState          `protobuf:"varint,6,opt,name=state,enum=dota.ETournamentState,def=0" json:"state,omitempty"`
	Teams              []*CMsgDOTATournament_Team `protobuf:"bytes,7,rep,name=teams" json:"teams,omitempty"`
	Games              []*CMsgDOTATournament_Game `protobuf:"bytes,8,rep,name=games" json:"games,omitempty"`
	Nodes              []*CMsgDOTATournament_Node `protobuf:"bytes,9,rep,name=nodes" json:"nodes,omitempty"`
	XXX_unrecognized   []byte                     `json:"-"`
}

func (m *CMsgDOTATournament) Reset()                    { *m = CMsgDOTATournament{} }
func (m *CMsgDOTATournament) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament) ProtoMessage()               {}
func (*CMsgDOTATournament) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{62} }

const Default_CMsgDOTATournament_TournamentTemplate ETournamentTemplate = ETournamentTemplate_k_ETournamentTemplate_None
const Default_CMsgDOTATournament_State ETournamentState = ETournamentState_k_ETournamentState_Unknown

func (m *CMsgDOTATournament) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTATournament) GetDivisionId() uint32 {
	if m != nil && m.DivisionId != nil {
		return *m.DivisionId
	}
	return 0
}

func (m *CMsgDOTATournament) GetScheduleTime() uint32 {
	if m != nil && m.ScheduleTime != nil {
		return *m.ScheduleTime
	}
	return 0
}

func (m *CMsgDOTATournament) GetSkillLevel() uint32 {
	if m != nil && m.SkillLevel != nil {
		return *m.SkillLevel
	}
	return 0
}

func (m *CMsgDOTATournament) GetTournamentTemplate() ETournamentTemplate {
	if m != nil && m.TournamentTemplate != nil {
		return *m.TournamentTemplate
	}
	return Default_CMsgDOTATournament_TournamentTemplate
}

func (m *CMsgDOTATournament) GetState() ETournamentState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgDOTATournament_State
}

func (m *CMsgDOTATournament) GetTeams() []*CMsgDOTATournament_Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CMsgDOTATournament) GetGames() []*CMsgDOTATournament_Game {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *CMsgDOTATournament) GetNodes() []*CMsgDOTATournament_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type CMsgDOTATournament_Team struct {
	TeamGid          *uint64  `protobuf:"fixed64,1,opt,name=team_gid" json:"team_gid,omitempty"`
	NodeOrState      *uint32  `protobuf:"varint,2,opt,name=node_or_state" json:"node_or_state,omitempty"`
	Players          []uint32 `protobuf:"varint,3,rep,packed,name=players" json:"players,omitempty"`
	PlayerBuyin      []uint32 `protobuf:"varint,9,rep,packed,name=player_buyin" json:"player_buyin,omitempty"`
	TeamId           *uint32  `protobuf:"varint,4,opt,name=team_id" json:"team_id,omitempty"`
	TeamName         *string  `protobuf:"bytes,5,opt,name=team_name" json:"team_name,omitempty"`
	TeamBaseLogo     *uint64  `protobuf:"varint,7,opt,name=team_base_logo" json:"team_base_logo,omitempty"`
	TeamUiLogo       *uint64  `protobuf:"varint,8,opt,name=team_ui_logo" json:"team_ui_logo,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTATournament_Team) Reset()                    { *m = CMsgDOTATournament_Team{} }
func (m *CMsgDOTATournament_Team) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Team) ProtoMessage()               {}
func (*CMsgDOTATournament_Team) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{62, 0} }

func (m *CMsgDOTATournament_Team) GetTeamGid() uint64 {
	if m != nil && m.TeamGid != nil {
		return *m.TeamGid
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetNodeOrState() uint32 {
	if m != nil && m.NodeOrState != nil {
		return *m.NodeOrState
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetPlayers() []uint32 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CMsgDOTATournament_Team) GetPlayerBuyin() []uint32 {
	if m != nil {
		return m.PlayerBuyin
	}
	return nil
}

func (m *CMsgDOTATournament_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgDOTATournament_Team) GetTeamBaseLogo() uint64 {
	if m != nil && m.TeamBaseLogo != nil {
		return *m.TeamBaseLogo
	}
	return 0
}

func (m *CMsgDOTATournament_Team) GetTeamUiLogo() uint64 {
	if m != nil && m.TeamUiLogo != nil {
		return *m.TeamUiLogo
	}
	return 0
}

type CMsgDOTATournament_Game struct {
	NodeIdx          *uint32               `protobuf:"varint,1,opt,name=node_idx" json:"node_idx,omitempty"`
	LobbyId          *uint64               `protobuf:"fixed64,2,opt,name=lobby_id" json:"lobby_id,omitempty"`
	MatchId          *uint64               `protobuf:"varint,3,opt,name=match_id" json:"match_id,omitempty"`
	TeamAGood        *bool                 `protobuf:"varint,4,opt,name=team_a_good" json:"team_a_good,omitempty"`
	State            *ETournamentGameState `protobuf:"varint,5,opt,name=state,enum=dota.ETournamentGameState,def=0" json:"state,omitempty"`
	StartTime        *uint32               `protobuf:"varint,6,opt,name=start_time" json:"start_time,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournament_Game) Reset()                    { *m = CMsgDOTATournament_Game{} }
func (m *CMsgDOTATournament_Game) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Game) ProtoMessage()               {}
func (*CMsgDOTATournament_Game) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{62, 1} }

const Default_CMsgDOTATournament_Game_State ETournamentGameState = ETournamentGameState_k_ETournamentGameState_Unknown

func (m *CMsgDOTATournament_Game) GetNodeIdx() uint32 {
	if m != nil && m.NodeIdx != nil {
		return *m.NodeIdx
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTATournament_Game) GetTeamAGood() bool {
	if m != nil && m.TeamAGood != nil {
		return *m.TeamAGood
	}
	return false
}

func (m *CMsgDOTATournament_Game) GetState() ETournamentGameState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgDOTATournament_Game_State
}

func (m *CMsgDOTATournament_Game) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

type CMsgDOTATournament_Node struct {
	NodeId           *uint32               `protobuf:"varint,1,opt,name=node_id" json:"node_id,omitempty"`
	TeamIdxA         *uint32               `protobuf:"varint,2,opt,name=team_idx_a" json:"team_idx_a,omitempty"`
	TeamIdxB         *uint32               `protobuf:"varint,3,opt,name=team_idx_b" json:"team_idx_b,omitempty"`
	NodeState        *ETournamentNodeState `protobuf:"varint,4,opt,name=node_state,enum=dota.ETournamentNodeState,def=0" json:"node_state,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournament_Node) Reset()                    { *m = CMsgDOTATournament_Node{} }
func (m *CMsgDOTATournament_Node) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournament_Node) ProtoMessage()               {}
func (*CMsgDOTATournament_Node) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{62, 2} }

const Default_CMsgDOTATournament_Node_NodeState ETournamentNodeState = ETournamentNodeState_k_ETournamentNodeState_Unknown

func (m *CMsgDOTATournament_Node) GetNodeId() uint32 {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetTeamIdxA() uint32 {
	if m != nil && m.TeamIdxA != nil {
		return *m.TeamIdxA
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetTeamIdxB() uint32 {
	if m != nil && m.TeamIdxB != nil {
		return *m.TeamIdxB
	}
	return 0
}

func (m *CMsgDOTATournament_Node) GetNodeState() ETournamentNodeState {
	if m != nil && m.NodeState != nil {
		return *m.NodeState
	}
	return Default_CMsgDOTATournament_Node_NodeState
}

type CMsgDOTATournamentStateChange struct {
	NewTournamentId     *uint32                                     `protobuf:"varint,1,opt,name=new_tournament_id" json:"new_tournament_id,omitempty"`
	Event               *ETournamentEvent                           `protobuf:"varint,2,opt,name=event,enum=dota.ETournamentEvent,def=0" json:"event,omitempty"`
	NewTournamentState  *ETournamentState                           `protobuf:"varint,3,opt,name=new_tournament_state,enum=dota.ETournamentState,def=0" json:"new_tournament_state,omitempty"`
	GameChanges         []*CMsgDOTATournamentStateChange_GameChange `protobuf:"bytes,4,rep,name=game_changes" json:"game_changes,omitempty"`
	TeamChanges         []*CMsgDOTATournamentStateChange_TeamChange `protobuf:"bytes,5,rep,name=team_changes" json:"team_changes,omitempty"`
	MergedTournamentIds []uint32                                    `protobuf:"varint,6,rep,packed,name=merged_tournament_ids" json:"merged_tournament_ids,omitempty"`
	XXX_unrecognized    []byte                                      `json:"-"`
}

func (m *CMsgDOTATournamentStateChange) Reset()                    { *m = CMsgDOTATournamentStateChange{} }
func (m *CMsgDOTATournamentStateChange) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentStateChange) ProtoMessage()               {}
func (*CMsgDOTATournamentStateChange) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{63} }

const Default_CMsgDOTATournamentStateChange_Event ETournamentEvent = ETournamentEvent_k_ETournamentEvent_None
const Default_CMsgDOTATournamentStateChange_NewTournamentState ETournamentState = ETournamentState_k_ETournamentState_Unknown

func (m *CMsgDOTATournamentStateChange) GetNewTournamentId() uint32 {
	if m != nil && m.NewTournamentId != nil {
		return *m.NewTournamentId
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange) GetEvent() ETournamentEvent {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return Default_CMsgDOTATournamentStateChange_Event
}

func (m *CMsgDOTATournamentStateChange) GetNewTournamentState() ETournamentState {
	if m != nil && m.NewTournamentState != nil {
		return *m.NewTournamentState
	}
	return Default_CMsgDOTATournamentStateChange_NewTournamentState
}

func (m *CMsgDOTATournamentStateChange) GetGameChanges() []*CMsgDOTATournamentStateChange_GameChange {
	if m != nil {
		return m.GameChanges
	}
	return nil
}

func (m *CMsgDOTATournamentStateChange) GetTeamChanges() []*CMsgDOTATournamentStateChange_TeamChange {
	if m != nil {
		return m.TeamChanges
	}
	return nil
}

func (m *CMsgDOTATournamentStateChange) GetMergedTournamentIds() []uint32 {
	if m != nil {
		return m.MergedTournamentIds
	}
	return nil
}

type CMsgDOTATournamentStateChange_GameChange struct {
	MatchId          *uint64               `protobuf:"varint,1,opt,name=match_id" json:"match_id,omitempty"`
	NewState         *ETournamentGameState `protobuf:"varint,2,opt,name=new_state,enum=dota.ETournamentGameState,def=0" json:"new_state,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *CMsgDOTATournamentStateChange_GameChange) Reset() {
	*m = CMsgDOTATournamentStateChange_GameChange{}
}
func (m *CMsgDOTATournamentStateChange_GameChange) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentStateChange_GameChange) ProtoMessage()    {}
func (*CMsgDOTATournamentStateChange_GameChange) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{63, 0}
}

const Default_CMsgDOTATournamentStateChange_GameChange_NewState ETournamentGameState = ETournamentGameState_k_ETournamentGameState_Unknown

func (m *CMsgDOTATournamentStateChange_GameChange) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange_GameChange) GetNewState() ETournamentGameState {
	if m != nil && m.NewState != nil {
		return *m.NewState
	}
	return Default_CMsgDOTATournamentStateChange_GameChange_NewState
}

type CMsgDOTATournamentStateChange_TeamChange struct {
	TeamGid          *uint64 `protobuf:"varint,1,opt,name=team_gid" json:"team_gid,omitempty"`
	NewNodeOrState   *uint32 `protobuf:"varint,2,opt,name=new_node_or_state" json:"new_node_or_state,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentStateChange_TeamChange) Reset() {
	*m = CMsgDOTATournamentStateChange_TeamChange{}
}
func (m *CMsgDOTATournamentStateChange_TeamChange) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentStateChange_TeamChange) ProtoMessage()    {}
func (*CMsgDOTATournamentStateChange_TeamChange) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{63, 1}
}

func (m *CMsgDOTATournamentStateChange_TeamChange) GetTeamGid() uint64 {
	if m != nil && m.TeamGid != nil {
		return *m.TeamGid
	}
	return 0
}

func (m *CMsgDOTATournamentStateChange_TeamChange) GetNewNodeOrState() uint32 {
	if m != nil && m.NewNodeOrState != nil {
		return *m.NewNodeOrState
	}
	return 0
}

type CMsgDOTATournamentRequest struct {
	TournamentId        *uint32 `protobuf:"varint,1,opt,name=tournament_id" json:"tournament_id,omitempty"`
	ClientTournamentGid *uint64 `protobuf:"varint,2,opt,name=client_tournament_gid" json:"client_tournament_gid,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgDOTATournamentRequest) Reset()                    { *m = CMsgDOTATournamentRequest{} }
func (m *CMsgDOTATournamentRequest) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentRequest) ProtoMessage()               {}
func (*CMsgDOTATournamentRequest) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{64} }

func (m *CMsgDOTATournamentRequest) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTATournamentRequest) GetClientTournamentGid() uint64 {
	if m != nil && m.ClientTournamentGid != nil {
		return *m.ClientTournamentGid
	}
	return 0
}

type CMsgDOTATournamentResponse struct {
	Result           *uint32             `protobuf:"varint,1,opt,name=result,def=2" json:"result,omitempty"`
	Tournament       *CMsgDOTATournament `protobuf:"bytes,2,opt,name=tournament" json:"tournament,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CMsgDOTATournamentResponse) Reset()                    { *m = CMsgDOTATournamentResponse{} }
func (m *CMsgDOTATournamentResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentResponse) ProtoMessage()               {}
func (*CMsgDOTATournamentResponse) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{65} }

const Default_CMsgDOTATournamentResponse_Result uint32 = 2

func (m *CMsgDOTATournamentResponse) GetResult() uint32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTATournamentResponse_Result
}

func (m *CMsgDOTATournamentResponse) GetTournament() *CMsgDOTATournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

type CMsgDOTAClearTournamentGame struct {
	TournamentId     *uint32 `protobuf:"varint,1,opt,name=tournament_id" json:"tournament_id,omitempty"`
	GameId           *uint32 `protobuf:"varint,2,opt,name=game_id" json:"game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAClearTournamentGame) Reset()                    { *m = CMsgDOTAClearTournamentGame{} }
func (m *CMsgDOTAClearTournamentGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAClearTournamentGame) ProtoMessage()               {}
func (*CMsgDOTAClearTournamentGame) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{66} }

func (m *CMsgDOTAClearTournamentGame) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgDOTAClearTournamentGame) GetGameId() uint32 {
	if m != nil && m.GameId != nil {
		return *m.GameId
	}
	return 0
}

type CMsgDOTAPassportVoteTeamGuess struct {
	LeagueId         *uint32 `protobuf:"varint,1,opt,name=league_id" json:"league_id,omitempty"`
	WinnerId         *uint32 `protobuf:"varint,2,opt,name=winner_id" json:"winner_id,omitempty"`
	RunnerupId       *uint32 `protobuf:"varint,3,opt,name=runnerup_id" json:"runnerup_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPassportVoteTeamGuess) Reset()                    { *m = CMsgDOTAPassportVoteTeamGuess{} }
func (m *CMsgDOTAPassportVoteTeamGuess) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVoteTeamGuess) ProtoMessage()               {}
func (*CMsgDOTAPassportVoteTeamGuess) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{67} }

func (m *CMsgDOTAPassportVoteTeamGuess) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTAPassportVoteTeamGuess) GetWinnerId() uint32 {
	if m != nil && m.WinnerId != nil {
		return *m.WinnerId
	}
	return 0
}

func (m *CMsgDOTAPassportVoteTeamGuess) GetRunnerupId() uint32 {
	if m != nil && m.RunnerupId != nil {
		return *m.RunnerupId
	}
	return 0
}

type CMsgDOTAPassportVoteGenericSelection struct {
	SelectionIndex   *DOTA_2013PassportSelectionIndices `protobuf:"varint,1,opt,name=selection_index,enum=dota.DOTA_2013PassportSelectionIndices,def=0" json:"selection_index,omitempty"`
	Selection        *uint32                            `protobuf:"varint,2,opt,name=selection" json:"selection,omitempty"`
	XXX_unrecognized []byte                             `json:"-"`
}

func (m *CMsgDOTAPassportVoteGenericSelection) Reset()         { *m = CMsgDOTAPassportVoteGenericSelection{} }
func (m *CMsgDOTAPassportVoteGenericSelection) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVoteGenericSelection) ProtoMessage()    {}
func (*CMsgDOTAPassportVoteGenericSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{68}
}

const Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex DOTA_2013PassportSelectionIndices = DOTA_2013PassportSelectionIndices_PP13_SEL_ALLSTAR_PLAYER_0

func (m *CMsgDOTAPassportVoteGenericSelection) GetSelectionIndex() DOTA_2013PassportSelectionIndices {
	if m != nil && m.SelectionIndex != nil {
		return *m.SelectionIndex
	}
	return Default_CMsgDOTAPassportVoteGenericSelection_SelectionIndex
}

func (m *CMsgDOTAPassportVoteGenericSelection) GetSelection() uint32 {
	if m != nil && m.Selection != nil {
		return *m.Selection
	}
	return 0
}

type CMsgDOTAPassportStampedPlayer struct {
	SteamId          *uint64 `protobuf:"varint,1,opt,name=steam_id" json:"steam_id,omitempty"`
	StampLevel       *uint32 `protobuf:"varint,2,opt,name=stamp_level" json:"stamp_level,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPassportStampedPlayer) Reset()                    { *m = CMsgDOTAPassportStampedPlayer{} }
func (m *CMsgDOTAPassportStampedPlayer) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportStampedPlayer) ProtoMessage()               {}
func (*CMsgDOTAPassportStampedPlayer) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{69} }

func (m *CMsgDOTAPassportStampedPlayer) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CMsgDOTAPassportStampedPlayer) GetStampLevel() uint32 {
	if m != nil && m.StampLevel != nil {
		return *m.StampLevel
	}
	return 0
}

type CMsgDOTAPassportPlayerCardChallenge struct {
	ChallengeId      *uint32 `protobuf:"varint,1,opt,name=challenge_id" json:"challenge_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAPassportPlayerCardChallenge) Reset()         { *m = CMsgDOTAPassportPlayerCardChallenge{} }
func (m *CMsgDOTAPassportPlayerCardChallenge) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportPlayerCardChallenge) ProtoMessage()    {}
func (*CMsgDOTAPassportPlayerCardChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{70}
}

func (m *CMsgDOTAPassportPlayerCardChallenge) GetChallengeId() uint32 {
	if m != nil && m.ChallengeId != nil {
		return *m.ChallengeId
	}
	return 0
}

type CMsgDOTAPassportVote struct {
	TeamVotes            []*CMsgDOTAPassportVoteTeamGuess        `protobuf:"bytes,1,rep,name=team_votes" json:"team_votes,omitempty"`
	GenericSelections    []*CMsgDOTAPassportVoteGenericSelection `protobuf:"bytes,2,rep,name=generic_selections" json:"generic_selections,omitempty"`
	StampedPlayers       []*CMsgDOTAPassportStampedPlayer        `protobuf:"bytes,3,rep,name=stamped_players" json:"stamped_players,omitempty"`
	PlayerCardChallenges []*CMsgDOTAPassportPlayerCardChallenge  `protobuf:"bytes,4,rep,name=player_card_challenges" json:"player_card_challenges,omitempty"`
	XXX_unrecognized     []byte                                  `json:"-"`
}

func (m *CMsgDOTAPassportVote) Reset()                    { *m = CMsgDOTAPassportVote{} }
func (m *CMsgDOTAPassportVote) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAPassportVote) ProtoMessage()               {}
func (*CMsgDOTAPassportVote) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{71} }

func (m *CMsgDOTAPassportVote) GetTeamVotes() []*CMsgDOTAPassportVoteTeamGuess {
	if m != nil {
		return m.TeamVotes
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetGenericSelections() []*CMsgDOTAPassportVoteGenericSelection {
	if m != nil {
		return m.GenericSelections
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetStampedPlayers() []*CMsgDOTAPassportStampedPlayer {
	if m != nil {
		return m.StampedPlayers
	}
	return nil
}

func (m *CMsgDOTAPassportVote) GetPlayerCardChallenges() []*CMsgDOTAPassportPlayerCardChallenge {
	if m != nil {
		return m.PlayerCardChallenges
	}
	return nil
}

type CMsgDOTATournamentInfo struct {
	LeagueId            *uint32                                 `protobuf:"varint,1,opt,name=league_id" json:"league_id,omitempty"`
	PhaseList           []*CMsgDOTATournamentInfo_Phase         `protobuf:"bytes,2,rep,name=phase_list" json:"phase_list,omitempty"`
	TeamsList           []*CMsgDOTATournamentInfo_Team          `protobuf:"bytes,3,rep,name=teams_list" json:"teams_list,omitempty"`
	UpcomingMatchesList []*CMsgDOTATournamentInfo_UpcomingMatch `protobuf:"bytes,4,rep,name=upcoming_matches_list" json:"upcoming_matches_list,omitempty"`
	NewsList            []*CMsgDOTATournamentInfo_News          `protobuf:"bytes,5,rep,name=news_list" json:"news_list,omitempty"`
	XXX_unrecognized    []byte                                  `json:"-"`
}

func (m *CMsgDOTATournamentInfo) Reset()                    { *m = CMsgDOTATournamentInfo{} }
func (m *CMsgDOTATournamentInfo) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo) ProtoMessage()               {}
func (*CMsgDOTATournamentInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{72} }

func (m *CMsgDOTATournamentInfo) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo) GetPhaseList() []*CMsgDOTATournamentInfo_Phase {
	if m != nil {
		return m.PhaseList
	}
	return nil
}

func (m *CMsgDOTATournamentInfo) GetTeamsList() []*CMsgDOTATournamentInfo_Team {
	if m != nil {
		return m.TeamsList
	}
	return nil
}

func (m *CMsgDOTATournamentInfo) GetUpcomingMatchesList() []*CMsgDOTATournamentInfo_UpcomingMatch {
	if m != nil {
		return m.UpcomingMatchesList
	}
	return nil
}

func (m *CMsgDOTATournamentInfo) GetNewsList() []*CMsgDOTATournamentInfo_News {
	if m != nil {
		return m.NewsList
	}
	return nil
}

type CMsgDOTATournamentInfo_PhaseGroup struct {
	GroupId          *uint32 `protobuf:"varint,1,opt,name=group_id" json:"group_id,omitempty"`
	GroupName        *string `protobuf:"bytes,2,opt,name=group_name" json:"group_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_PhaseGroup) Reset()         { *m = CMsgDOTATournamentInfo_PhaseGroup{} }
func (m *CMsgDOTATournamentInfo_PhaseGroup) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_PhaseGroup) ProtoMessage()    {}
func (*CMsgDOTATournamentInfo_PhaseGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{72, 0}
}

func (m *CMsgDOTATournamentInfo_PhaseGroup) GetGroupId() uint32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_PhaseGroup) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

type CMsgDOTATournamentInfo_Phase struct {
	PhaseId          *uint32                              `protobuf:"varint,1,opt,name=phase_id" json:"phase_id,omitempty"`
	PhaseName        *string                              `protobuf:"bytes,2,opt,name=phase_name" json:"phase_name,omitempty"`
	TypeId           *uint32                              `protobuf:"varint,3,opt,name=type_id" json:"type_id,omitempty"`
	Iterations       *uint32                              `protobuf:"varint,4,opt,name=iterations" json:"iterations,omitempty"`
	MinStartTime     *uint32                              `protobuf:"varint,5,opt,name=min_start_time" json:"min_start_time,omitempty"`
	MaxStartTime     *uint32                              `protobuf:"varint,6,opt,name=max_start_time" json:"max_start_time,omitempty"`
	GroupList        []*CMsgDOTATournamentInfo_PhaseGroup `protobuf:"bytes,7,rep,name=group_list" json:"group_list,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *CMsgDOTATournamentInfo_Phase) Reset()         { *m = CMsgDOTATournamentInfo_Phase{} }
func (m *CMsgDOTATournamentInfo_Phase) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_Phase) ProtoMessage()    {}
func (*CMsgDOTATournamentInfo_Phase) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{72, 1}
}

func (m *CMsgDOTATournamentInfo_Phase) GetPhaseId() uint32 {
	if m != nil && m.PhaseId != nil {
		return *m.PhaseId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetPhaseName() string {
	if m != nil && m.PhaseName != nil {
		return *m.PhaseName
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_Phase) GetTypeId() uint32 {
	if m != nil && m.TypeId != nil {
		return *m.TypeId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetIterations() uint32 {
	if m != nil && m.Iterations != nil {
		return *m.Iterations
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetMinStartTime() uint32 {
	if m != nil && m.MinStartTime != nil {
		return *m.MinStartTime
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetMaxStartTime() uint32 {
	if m != nil && m.MaxStartTime != nil {
		return *m.MaxStartTime
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Phase) GetGroupList() []*CMsgDOTATournamentInfo_PhaseGroup {
	if m != nil {
		return m.GroupList
	}
	return nil
}

type CMsgDOTATournamentInfo_Team struct {
	TeamId           *uint32 `protobuf:"varint,1,opt,name=team_id" json:"team_id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Tag              *string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	TeamLogo         *uint64 `protobuf:"varint,4,opt,name=team_logo" json:"team_logo,omitempty"`
	Eliminated       *bool   `protobuf:"varint,5,opt,name=eliminated" json:"eliminated,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_Team) Reset()                    { *m = CMsgDOTATournamentInfo_Team{} }
func (m *CMsgDOTATournamentInfo_Team) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_Team) ProtoMessage()               {}
func (*CMsgDOTATournamentInfo_Team) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{72, 2} }

func (m *CMsgDOTATournamentInfo_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Team) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_Team) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_Team) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_Team) GetEliminated() bool {
	if m != nil && m.Eliminated != nil {
		return *m.Eliminated
	}
	return false
}

type CMsgDOTATournamentInfo_UpcomingMatch struct {
	SeriesId                    *uint32 `protobuf:"varint,1,opt,name=series_id" json:"series_id,omitempty"`
	Team1Id                     *uint32 `protobuf:"varint,2,opt,name=team1_id" json:"team1_id,omitempty"`
	Team2Id                     *uint32 `protobuf:"varint,3,opt,name=team2_id" json:"team2_id,omitempty"`
	Bo                          *uint32 `protobuf:"varint,4,opt,name=bo" json:"bo,omitempty"`
	StageName                   *string `protobuf:"bytes,5,opt,name=stage_name" json:"stage_name,omitempty"`
	StartTime                   *uint32 `protobuf:"varint,6,opt,name=start_time" json:"start_time,omitempty"`
	WinnerStage                 *string `protobuf:"bytes,7,opt,name=winner_stage" json:"winner_stage,omitempty"`
	LoserStage                  *string `protobuf:"bytes,8,opt,name=loser_stage" json:"loser_stage,omitempty"`
	Team1Tag                    *string `protobuf:"bytes,9,opt,name=team1_tag" json:"team1_tag,omitempty"`
	Team2Tag                    *string `protobuf:"bytes,10,opt,name=team2_tag" json:"team2_tag,omitempty"`
	Team1PrevOpponentTag        *string `protobuf:"bytes,11,opt,name=team1_prev_opponent_tag" json:"team1_prev_opponent_tag,omitempty"`
	Team2PrevOpponentTag        *string `protobuf:"bytes,12,opt,name=team2_prev_opponent_tag" json:"team2_prev_opponent_tag,omitempty"`
	Team1Logo                   *uint64 `protobuf:"varint,13,opt,name=team1_logo" json:"team1_logo,omitempty"`
	Team2Logo                   *uint64 `protobuf:"varint,14,opt,name=team2_logo" json:"team2_logo,omitempty"`
	Team1PrevOpponentLogo       *uint64 `protobuf:"varint,15,opt,name=team1_prev_opponent_logo" json:"team1_prev_opponent_logo,omitempty"`
	Team2PrevOpponentLogo       *uint64 `protobuf:"varint,16,opt,name=team2_prev_opponent_logo" json:"team2_prev_opponent_logo,omitempty"`
	Team1PrevOpponentId         *uint32 `protobuf:"varint,17,opt,name=team1_prev_opponent_id" json:"team1_prev_opponent_id,omitempty"`
	Team2PrevOpponentId         *uint32 `protobuf:"varint,18,opt,name=team2_prev_opponent_id" json:"team2_prev_opponent_id,omitempty"`
	Team1PrevMatchScore         *uint32 `protobuf:"varint,19,opt,name=team1_prev_match_score" json:"team1_prev_match_score,omitempty"`
	Team1PrevMatchOpponentScore *uint32 `protobuf:"varint,20,opt,name=team1_prev_match_opponent_score" json:"team1_prev_match_opponent_score,omitempty"`
	Team2PrevMatchScore         *uint32 `protobuf:"varint,21,opt,name=team2_prev_match_score" json:"team2_prev_match_score,omitempty"`
	Team2PrevMatchOpponentScore *uint32 `protobuf:"varint,22,opt,name=team2_prev_match_opponent_score" json:"team2_prev_match_opponent_score,omitempty"`
	PhaseType                   *uint32 `protobuf:"varint,23,opt,name=phase_type" json:"phase_type,omitempty"`
	Team1Score                  *uint32 `protobuf:"varint,24,opt,name=team1_score" json:"team1_score,omitempty"`
	Team2Score                  *uint32 `protobuf:"varint,25,opt,name=team2_score" json:"team2_score,omitempty"`
	XXX_unrecognized            []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) Reset()         { *m = CMsgDOTATournamentInfo_UpcomingMatch{} }
func (m *CMsgDOTATournamentInfo_UpcomingMatch) String() string { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_UpcomingMatch) ProtoMessage()    {}
func (*CMsgDOTATournamentInfo_UpcomingMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor9, []int{72, 3}
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetSeriesId() uint32 {
	if m != nil && m.SeriesId != nil {
		return *m.SeriesId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Id() uint32 {
	if m != nil && m.Team1Id != nil {
		return *m.Team1Id
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Id() uint32 {
	if m != nil && m.Team2Id != nil {
		return *m.Team2Id
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetBo() uint32 {
	if m != nil && m.Bo != nil {
		return *m.Bo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetStageName() string {
	if m != nil && m.StageName != nil {
		return *m.StageName
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetStartTime() uint32 {
	if m != nil && m.StartTime != nil {
		return *m.StartTime
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetWinnerStage() string {
	if m != nil && m.WinnerStage != nil {
		return *m.WinnerStage
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetLoserStage() string {
	if m != nil && m.LoserStage != nil {
		return *m.LoserStage
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Tag() string {
	if m != nil && m.Team1Tag != nil {
		return *m.Team1Tag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Tag() string {
	if m != nil && m.Team2Tag != nil {
		return *m.Team2Tag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentTag() string {
	if m != nil && m.Team1PrevOpponentTag != nil {
		return *m.Team1PrevOpponentTag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentTag() string {
	if m != nil && m.Team2PrevOpponentTag != nil {
		return *m.Team2PrevOpponentTag
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Logo() uint64 {
	if m != nil && m.Team1Logo != nil {
		return *m.Team1Logo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Logo() uint64 {
	if m != nil && m.Team2Logo != nil {
		return *m.Team2Logo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentLogo() uint64 {
	if m != nil && m.Team1PrevOpponentLogo != nil {
		return *m.Team1PrevOpponentLogo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentLogo() uint64 {
	if m != nil && m.Team2PrevOpponentLogo != nil {
		return *m.Team2PrevOpponentLogo
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevOpponentId() uint32 {
	if m != nil && m.Team1PrevOpponentId != nil {
		return *m.Team1PrevOpponentId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevOpponentId() uint32 {
	if m != nil && m.Team2PrevOpponentId != nil {
		return *m.Team2PrevOpponentId
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevMatchScore() uint32 {
	if m != nil && m.Team1PrevMatchScore != nil {
		return *m.Team1PrevMatchScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1PrevMatchOpponentScore() uint32 {
	if m != nil && m.Team1PrevMatchOpponentScore != nil {
		return *m.Team1PrevMatchOpponentScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevMatchScore() uint32 {
	if m != nil && m.Team2PrevMatchScore != nil {
		return *m.Team2PrevMatchScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2PrevMatchOpponentScore() uint32 {
	if m != nil && m.Team2PrevMatchOpponentScore != nil {
		return *m.Team2PrevMatchOpponentScore
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetPhaseType() uint32 {
	if m != nil && m.PhaseType != nil {
		return *m.PhaseType
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam1Score() uint32 {
	if m != nil && m.Team1Score != nil {
		return *m.Team1Score
	}
	return 0
}

func (m *CMsgDOTATournamentInfo_UpcomingMatch) GetTeam2Score() uint32 {
	if m != nil && m.Team2Score != nil {
		return *m.Team2Score
	}
	return 0
}

type CMsgDOTATournamentInfo_News struct {
	Link             *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title            *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Image            *string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Timestamp        *uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTATournamentInfo_News) Reset()                    { *m = CMsgDOTATournamentInfo_News{} }
func (m *CMsgDOTATournamentInfo_News) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTATournamentInfo_News) ProtoMessage()               {}
func (*CMsgDOTATournamentInfo_News) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{72, 4} }

func (m *CMsgDOTATournamentInfo_News) GetLink() string {
	if m != nil && m.Link != nil {
		return *m.Link
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_News) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_News) GetImage() string {
	if m != nil && m.Image != nil {
		return *m.Image
	}
	return ""
}

func (m *CMsgDOTATournamentInfo_News) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type CMsgWeekendTourneyOpts struct {
	Participating    *bool   `protobuf:"varint,1,opt,name=participating" json:"participating,omitempty"`
	DivisionId       *uint32 `protobuf:"varint,2,opt,name=division_id" json:"division_id,omitempty"`
	Buyin            *uint32 `protobuf:"varint,3,opt,name=buyin" json:"buyin,omitempty"`
	SkillLevel       *uint32 `protobuf:"varint,4,opt,name=skill_level" json:"skill_level,omitempty"`
	MatchGroups      *uint32 `protobuf:"varint,5,opt,name=match_groups" json:"match_groups,omitempty"`
	TeamId           *uint32 `protobuf:"varint,6,opt,name=team_id" json:"team_id,omitempty"`
	PickupTeamName   *string `protobuf:"bytes,7,opt,name=pickup_team_name" json:"pickup_team_name,omitempty"`
	PickupTeamLogo   *uint64 `protobuf:"varint,8,opt,name=pickup_team_logo" json:"pickup_team_logo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgWeekendTourneyOpts) Reset()                    { *m = CMsgWeekendTourneyOpts{} }
func (m *CMsgWeekendTourneyOpts) String() string            { return proto.CompactTextString(m) }
func (*CMsgWeekendTourneyOpts) ProtoMessage()               {}
func (*CMsgWeekendTourneyOpts) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{73} }

func (m *CMsgWeekendTourneyOpts) GetParticipating() bool {
	if m != nil && m.Participating != nil {
		return *m.Participating
	}
	return false
}

func (m *CMsgWeekendTourneyOpts) GetDivisionId() uint32 {
	if m != nil && m.DivisionId != nil {
		return *m.DivisionId
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetBuyin() uint32 {
	if m != nil && m.Buyin != nil {
		return *m.Buyin
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetSkillLevel() uint32 {
	if m != nil && m.SkillLevel != nil {
		return *m.SkillLevel
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetMatchGroups() uint32 {
	if m != nil && m.MatchGroups != nil {
		return *m.MatchGroups
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgWeekendTourneyOpts) GetPickupTeamName() string {
	if m != nil && m.PickupTeamName != nil {
		return *m.PickupTeamName
	}
	return ""
}

func (m *CMsgWeekendTourneyOpts) GetPickupTeamLogo() uint64 {
	if m != nil && m.PickupTeamLogo != nil {
		return *m.PickupTeamLogo
	}
	return 0
}

type CMsgWeekendTourneyLeave struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgWeekendTourneyLeave) Reset()                    { *m = CMsgWeekendTourneyLeave{} }
func (m *CMsgWeekendTourneyLeave) String() string            { return proto.CompactTextString(m) }
func (*CMsgWeekendTourneyLeave) ProtoMessage()               {}
func (*CMsgWeekendTourneyLeave) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{74} }

func init() {
	proto.RegisterType((*CMsgGCPlayerInfo)(nil), "dota.CMsgGCPlayerInfo")
	proto.RegisterType((*CMsgGCPlayerInfo_PlayerInfo)(nil), "dota.CMsgGCPlayerInfo.PlayerInfo")
	proto.RegisterType((*CMsgGCPlayerInfo_RegionLeaderboard)(nil), "dota.CMsgGCPlayerInfo.RegionLeaderboard")
	proto.RegisterType((*CMsgDOTACreateFantasyLeagueRequest)(nil), "dota.CMsgDOTACreateFantasyLeagueRequest")
	proto.RegisterType((*CMsgDOTACreateFantasyLeagueResponse)(nil), "dota.CMsgDOTACreateFantasyLeagueResponse")
	proto.RegisterType((*CMsgFantasyLeagueScoring)(nil), "dota.CMsgFantasyLeagueScoring")
	proto.RegisterType((*CMsgDOTAFantasyLeagueInfo)(nil), "dota.CMsgDOTAFantasyLeagueInfo")
	proto.RegisterType((*CMsgDOTAFantasyLeagueInfo_OwnerInfo)(nil), "dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo")
	proto.RegisterType((*CMsgDOTAFantasyLeagueEditInfoRequest)(nil), "dota.CMsgDOTAFantasyLeagueEditInfoRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueEditInfoResponse)(nil), "dota.CMsgDOTAFantasyLeagueEditInfoResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueFindRequest)(nil), "dota.CMsgDOTAFantasyLeagueFindRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueFindResponse)(nil), "dota.CMsgDOTAFantasyLeagueFindResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueInfoRequest)(nil), "dota.CMsgDOTAFantasyLeagueInfoRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueInfoResponse)(nil), "dota.CMsgDOTAFantasyLeagueInfoResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueMatchupsRequest)(nil), "dota.CMsgDOTAFantasyLeagueMatchupsRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueMatchupsResponse)(nil), "dota.CMsgDOTAFantasyLeagueMatchupsResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueMatchupsResponse_Matchup)(nil), "dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup")
	proto.RegisterType((*CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups)(nil), "dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups")
	proto.RegisterType((*CMsgDOTAEditFantasyTeamRequest)(nil), "dota.CMsgDOTAEditFantasyTeamRequest")
	proto.RegisterType((*CMsgDOTAEditFantasyTeamResponse)(nil), "dota.CMsgDOTAEditFantasyTeamResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)(nil), "dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID")
	proto.RegisterType((*CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)(nil), "dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID")
	proto.RegisterType((*CMsgDOTAFantasyTeamInfoResponse)(nil), "dota.CMsgDOTAFantasyTeamInfoResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamInfo)(nil), "dota.CMsgDOTAFantasyTeamInfo")
	proto.RegisterType((*CMsgDOTAFantasyTeamScoreRequest)(nil), "dota.CMsgDOTAFantasyTeamScoreRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamScoreResponse)(nil), "dota.CMsgDOTAFantasyTeamScoreResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore)(nil), "dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore")
	proto.RegisterType((*CMsgDOTAFantasyTeamStandingsRequest)(nil), "dota.CMsgDOTAFantasyTeamStandingsRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamStandingsResponse)(nil), "dota.CMsgDOTAFantasyTeamStandingsResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore)(nil), "dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore")
	proto.RegisterType((*CMsgDOTAFantasyPlayerScoreRequest)(nil), "dota.CMsgDOTAFantasyPlayerScoreRequest")
	proto.RegisterType((*CMsgDOTAFantasyPlayerScoreResponse)(nil), "dota.CMsgDOTAFantasyPlayerScoreResponse")
	proto.RegisterType((*CMsgDOTAFantasyPlayerStandingsRequest)(nil), "dota.CMsgDOTAFantasyPlayerStandingsRequest")
	proto.RegisterType((*CMsgDOTAFantasyPlayerStandingsResponse)(nil), "dota.CMsgDOTAFantasyPlayerStandingsResponse")
	proto.RegisterType((*CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore)(nil), "dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore")
	proto.RegisterType((*CMsgDOTAFantasyPlayerInfoRequest)(nil), "dota.CMsgDOTAFantasyPlayerInfoRequest")
	proto.RegisterType((*CMsgDOTAFantasyPlayerInfoResponse)(nil), "dota.CMsgDOTAFantasyPlayerInfoResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueCreateRequest)(nil), "dota.CMsgDOTAFantasyLeagueCreateRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueCreateResponse)(nil), "dota.CMsgDOTAFantasyLeagueCreateResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamCreateRequest)(nil), "dota.CMsgDOTAFantasyTeamCreateRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamCreateResponse)(nil), "dota.CMsgDOTAFantasyTeamCreateResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueEditInvitesRequest)(nil), "dota.CMsgDOTAFantasyLeagueEditInvitesRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange)(nil), "dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange")
	proto.RegisterType((*CMsgDOTAFantasyLeagueEditInvitesResponse)(nil), "dota.CMsgDOTAFantasyLeagueEditInvitesResponse")
	proto.RegisterType((*CMsgDOTAFantasyLeagueDraftStatusRequest)(nil), "dota.CMsgDOTAFantasyLeagueDraftStatusRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueDraftStatus)(nil), "dota.CMsgDOTAFantasyLeagueDraftStatus")
	proto.RegisterType((*CMsgDOTAFantasyLeagueDraftPlayerRequest)(nil), "dota.CMsgDOTAFantasyLeagueDraftPlayerRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeagueDraftPlayerResponse)(nil), "dota.CMsgDOTAFantasyLeagueDraftPlayerResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamRosterSwapRequest)(nil), "dota.CMsgDOTAFantasyTeamRosterSwapRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamRosterSwapResponse)(nil), "dota.CMsgDOTAFantasyTeamRosterSwapResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamRosterAddDropRequest)(nil), "dota.CMsgDOTAFantasyTeamRosterAddDropRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamRosterAddDropResponse)(nil), "dota.CMsgDOTAFantasyTeamRosterAddDropResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamTradesRequest)(nil), "dota.CMsgDOTAFantasyTeamTradesRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamTradesResponse)(nil), "dota.CMsgDOTAFantasyTeamTradesResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamTradesResponse_Trade)(nil), "dota.CMsgDOTAFantasyTeamTradesResponse.Trade")
	proto.RegisterType((*CMsgDOTAFantasyTeamTradeCancelRequest)(nil), "dota.CMsgDOTAFantasyTeamTradeCancelRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamTradeCancelResponse)(nil), "dota.CMsgDOTAFantasyTeamTradeCancelResponse")
	proto.RegisterType((*CMsgDOTAFantasyTeamRosterRequest)(nil), "dota.CMsgDOTAFantasyTeamRosterRequest")
	proto.RegisterType((*CMsgDOTAFantasyTeamRosterResponse)(nil), "dota.CMsgDOTAFantasyTeamRosterResponse")
	proto.RegisterType((*CMsgDOTAFantasyPlayerHisoricalStatsRequest)(nil), "dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest")
	proto.RegisterType((*CMsgDOTAFantasyPlayerHisoricalStatsResponse)(nil), "dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse")
	proto.RegisterType((*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator)(nil), "dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator")
	proto.RegisterType((*CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats)(nil), "dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats")
	proto.RegisterType((*CMsgDOTAFantasyMessageAdd)(nil), "dota.CMsgDOTAFantasyMessageAdd")
	proto.RegisterType((*CMsgDOTAFantasyMessagesRequest)(nil), "dota.CMsgDOTAFantasyMessagesRequest")
	proto.RegisterType((*CMsgDOTAFantasyMessagesResponse)(nil), "dota.CMsgDOTAFantasyMessagesResponse")
	proto.RegisterType((*CMsgDOTAFantasyMessagesResponse_Message)(nil), "dota.CMsgDOTAFantasyMessagesResponse.Message")
	proto.RegisterType((*CMsgDOTAFantasyRemoveOwner)(nil), "dota.CMsgDOTAFantasyRemoveOwner")
	proto.RegisterType((*CMsgDOTAFantasyRemoveOwnerResponse)(nil), "dota.CMsgDOTAFantasyRemoveOwnerResponse")
	proto.RegisterType((*CMsgDOTAFantasyScheduledMatchesRequest)(nil), "dota.CMsgDOTAFantasyScheduledMatchesRequest")
	proto.RegisterType((*CMsgDOTAFantasyScheduledMatchesResponse)(nil), "dota.CMsgDOTAFantasyScheduledMatchesResponse")
	proto.RegisterType((*CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays)(nil), "dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays")
	proto.RegisterType((*CMsgDOTAFantasyLeaveLeagueRequest)(nil), "dota.CMsgDOTAFantasyLeaveLeagueRequest")
	proto.RegisterType((*CMsgDOTAFantasyLeaveLeagueResponse)(nil), "dota.CMsgDOTAFantasyLeaveLeagueResponse")
	proto.RegisterType((*CMsgDOTAFantasyPlayerScoreDetailsRequest)(nil), "dota.CMsgDOTAFantasyPlayerScoreDetailsRequest")
	proto.RegisterType((*CMsgDOTAFantasyPlayerScoreDetailsResponse)(nil), "dota.CMsgDOTAFantasyPlayerScoreDetailsResponse")
	proto.RegisterType((*CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData)(nil), "dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData")
	proto.RegisterType((*CMsgDOTATournament)(nil), "dota.CMsgDOTATournament")
	proto.RegisterType((*CMsgDOTATournament_Team)(nil), "dota.CMsgDOTATournament.Team")
	proto.RegisterType((*CMsgDOTATournament_Game)(nil), "dota.CMsgDOTATournament.Game")
	proto.RegisterType((*CMsgDOTATournament_Node)(nil), "dota.CMsgDOTATournament.Node")
	proto.RegisterType((*CMsgDOTATournamentStateChange)(nil), "dota.CMsgDOTATournamentStateChange")
	proto.RegisterType((*CMsgDOTATournamentStateChange_GameChange)(nil), "dota.CMsgDOTATournamentStateChange.GameChange")
	proto.RegisterType((*CMsgDOTATournamentStateChange_TeamChange)(nil), "dota.CMsgDOTATournamentStateChange.TeamChange")
	proto.RegisterType((*CMsgDOTATournamentRequest)(nil), "dota.CMsgDOTATournamentRequest")
	proto.RegisterType((*CMsgDOTATournamentResponse)(nil), "dota.CMsgDOTATournamentResponse")
	proto.RegisterType((*CMsgDOTAClearTournamentGame)(nil), "dota.CMsgDOTAClearTournamentGame")
	proto.RegisterType((*CMsgDOTAPassportVoteTeamGuess)(nil), "dota.CMsgDOTAPassportVoteTeamGuess")
	proto.RegisterType((*CMsgDOTAPassportVoteGenericSelection)(nil), "dota.CMsgDOTAPassportVoteGenericSelection")
	proto.RegisterType((*CMsgDOTAPassportStampedPlayer)(nil), "dota.CMsgDOTAPassportStampedPlayer")
	proto.RegisterType((*CMsgDOTAPassportPlayerCardChallenge)(nil), "dota.CMsgDOTAPassportPlayerCardChallenge")
	proto.RegisterType((*CMsgDOTAPassportVote)(nil), "dota.CMsgDOTAPassportVote")
	proto.RegisterType((*CMsgDOTATournamentInfo)(nil), "dota.CMsgDOTATournamentInfo")
	proto.RegisterType((*CMsgDOTATournamentInfo_PhaseGroup)(nil), "dota.CMsgDOTATournamentInfo.PhaseGroup")
	proto.RegisterType((*CMsgDOTATournamentInfo_Phase)(nil), "dota.CMsgDOTATournamentInfo.Phase")
	proto.RegisterType((*CMsgDOTATournamentInfo_Team)(nil), "dota.CMsgDOTATournamentInfo.Team")
	proto.RegisterType((*CMsgDOTATournamentInfo_UpcomingMatch)(nil), "dota.CMsgDOTATournamentInfo.UpcomingMatch")
	proto.RegisterType((*CMsgDOTATournamentInfo_News)(nil), "dota.CMsgDOTATournamentInfo.News")
	proto.RegisterType((*CMsgWeekendTourneyOpts)(nil), "dota.CMsgWeekendTourneyOpts")
	proto.RegisterType((*CMsgWeekendTourneyLeave)(nil), "dota.CMsgWeekendTourneyLeave")
	proto.RegisterEnum("dota.ETournamentGameState", ETournamentGameState_name, ETournamentGameState_value)
	proto.RegisterEnum("dota.ETournamentTeamState", ETournamentTeamState_name, ETournamentTeamState_value)
	proto.RegisterEnum("dota.ETournamentState", ETournamentState_name, ETournamentState_value)
	proto.RegisterEnum("dota.ETournamentNodeState", ETournamentNodeState_name, ETournamentNodeState_value)
	proto.RegisterEnum("dota.ETournamentEvent", ETournamentEvent_name, ETournamentEvent_value)
	proto.RegisterEnum("dota.DOTA_2013PassportSelectionIndices", DOTA_2013PassportSelectionIndices_name, DOTA_2013PassportSelectionIndices_value)
	proto.RegisterEnum("dota.CMsgDOTACreateFantasyLeagueResponse_EResult", CMsgDOTACreateFantasyLeagueResponse_EResult_name, CMsgDOTACreateFantasyLeagueResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueEditInfoResponse_EResult", CMsgDOTAFantasyLeagueEditInfoResponse_EResult_name, CMsgDOTAFantasyLeagueEditInfoResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueFindResponse_EResult", CMsgDOTAFantasyLeagueFindResponse_EResult_name, CMsgDOTAFantasyLeagueFindResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueInfoResponse_EResult", CMsgDOTAFantasyLeagueInfoResponse_EResult_name, CMsgDOTAFantasyLeagueInfoResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueMatchupsResponse_EResult", CMsgDOTAFantasyLeagueMatchupsResponse_EResult_name, CMsgDOTAFantasyLeagueMatchupsResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAEditFantasyTeamResponse_EResult", CMsgDOTAEditFantasyTeamResponse_EResult_name, CMsgDOTAEditFantasyTeamResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamScoreResponse_EResult", CMsgDOTAFantasyTeamScoreResponse_EResult_name, CMsgDOTAFantasyTeamScoreResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamStandingsResponse_EResult", CMsgDOTAFantasyTeamStandingsResponse_EResult_name, CMsgDOTAFantasyTeamStandingsResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyPlayerScoreResponse_EResult", CMsgDOTAFantasyPlayerScoreResponse_EResult_name, CMsgDOTAFantasyPlayerScoreResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyPlayerStandingsResponse_EResult", CMsgDOTAFantasyPlayerStandingsResponse_EResult_name, CMsgDOTAFantasyPlayerStandingsResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueCreateResponse_EResult", CMsgDOTAFantasyLeagueCreateResponse_EResult_name, CMsgDOTAFantasyLeagueCreateResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamCreateResponse_EResult", CMsgDOTAFantasyTeamCreateResponse_EResult_name, CMsgDOTAFantasyTeamCreateResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueEditInvitesResponse_EResult", CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_name, CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult", CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_name, CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamRosterSwapResponse_EResult", CMsgDOTAFantasyTeamRosterSwapResponse_EResult_name, CMsgDOTAFantasyTeamRosterSwapResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamRosterAddDropResponse_EResult", CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_name, CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamTradesResponse_EResult", CMsgDOTAFantasyTeamTradesResponse_EResult_name, CMsgDOTAFantasyTeamTradesResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamTradeCancelResponse_EResult", CMsgDOTAFantasyTeamTradeCancelResponse_EResult_name, CMsgDOTAFantasyTeamTradeCancelResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyTeamRosterResponse_EResult", CMsgDOTAFantasyTeamRosterResponse_EResult_name, CMsgDOTAFantasyTeamRosterResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult", CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_name, CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyMessagesResponse_EResult", CMsgDOTAFantasyMessagesResponse_EResult_name, CMsgDOTAFantasyMessagesResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyRemoveOwnerResponse_EResult", CMsgDOTAFantasyRemoveOwnerResponse_EResult_name, CMsgDOTAFantasyRemoveOwnerResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyScheduledMatchesResponse_EResult", CMsgDOTAFantasyScheduledMatchesResponse_EResult_name, CMsgDOTAFantasyScheduledMatchesResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyLeaveLeagueResponse_EResult", CMsgDOTAFantasyLeaveLeagueResponse_EResult_name, CMsgDOTAFantasyLeaveLeagueResponse_EResult_value)
	proto.RegisterEnum("dota.CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult", CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_name, CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_value)
}

var fileDescriptor9 = []byte{
	// 6068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x3c, 0x5b, 0x6c, 0x24, 0xd9,
	0x55, 0xe9, 0x97, 0x1f, 0xd7, 0xaf, 0x3b, 0x3d, 0xaf, 0x9e, 0x9e, 0x77, 0xcd, 0x6e, 0xe6, 0xb1,
	0x59, 0xaf, 0xdd, 0x7e, 0xcd, 0xcc, 0xee, 0x66, 0xb7, 0x6d, 0xb7, 0x3d, 0xde, 0xb5, 0xbb, 0xbd,
	0xee, 0xf6, 0x0c, 0xb3, 0x21, 0x29, 0xd5, 0x74, 0xd7, 0xb4, 0x4b, 0xd3, 0x5d, 0xd5, 0xa9, 0xaa,
	0x9e, 0x19, 0xa3, 0x08, 0x25, 0x12, 0x24, 0x2c, 0x08, 0x45, 0x08, 0x05, 0x09, 0x08, 0x6c, 0x20,
	0x09, 0x04, 0xf2, 0x83, 0x14, 0x22, 0xbe, 0xd0, 0x0a, 0x21, 0x85, 0x1f, 0x24, 0x3e, 0x10, 0xf0,
	0x05, 0xbf, 0xe4, 0x87, 0x0f, 0x84, 0x10, 0x88, 0x0f, 0xc4, 0xb9, 0x8f, 0x7a, 0xd7, 0x2d, 0x77,
	0x7b, 0x4d, 0xbe, 0x66, 0xfa, 0x9e, 0x73, 0x4f, 0xdd, 0x7b, 0xde, 0xe7, 0xdc, 0x7b, 0x8d, 0x5e,
	0x69, 0x19, 0xb6, 0x22, 0xb7, 0x9b, 0x5d, 0xd5, 0xb2, 0x94, 0xb6, 0x6a, 0xc9, 0xcd, 0x8e, 0xa6,
	0xea, 0xb6, 0xfc, 0x54, 0xd1, 0x6d, 0xc5, 0x3a, 0x9c, 0xed, 0x99, 0x86, 0x6d, 0xe4, 0xb3, 0x04,
	0xab, 0x78, 0x9e, 0xe2, 0x5a, 0x07, 0x8a, 0xa9, 0xb6, 0x64, 0x55, 0xef, 0x77, 0x2d, 0x06, 0x2e,
	0x5e, 0x8a, 0x10, 0x31, 0xba, 0x5d, 0x43, 0x67, 0x50, 0xe9, 0x2f, 0x32, 0x08, 0xaf, 0xed, 0x58,
	0xed, 0xcd, 0xb5, 0xdd, 0x8e, 0x72, 0xa8, 0x9a, 0x5b, 0xfa, 0x53, 0x23, 0xbf, 0x82, 0x26, 0x7b,
	0xf4, 0x97, 0xac, 0xc1, 0x4f, 0xab, 0x90, 0xba, 0x96, 0xb9, 0x35, 0x51, 0xba, 0x3e, 0x4b, 0x28,
	0xcd, 0x86, 0xb1, 0x67, 0x7d, 0x13, 0x3f, 0x8f, 0x26, 0x3b, 0xaa, 0xd2, 0x52, 0xcd, 0x27, 0x86,
	0x62, 0xb6, 0xac, 0x42, 0x9a, 0x4e, 0xbc, 0x25, 0x98, 0xb8, 0xa7, 0xb6, 0x35, 0x43, 0xdf, 0xf6,
	0x26, 0x14, 0xff, 0x2d, 0x85, 0x90, 0x8f, 0x5c, 0x1e, 0x21, 0xa5, 0xd9, 0x34, 0xfa, 0xb0, 0x65,
	0xad, 0x05, 0xab, 0x48, 0xdd, 0x9a, 0xca, 0x4f, 0xa2, 0xac, 0xae, 0x74, 0x55, 0x20, 0x9d, 0xba,
	0x35, 0x9e, 0x3f, 0x83, 0x26, 0x29, 0xdc, 0x3c, 0x84, 0x6d, 0xb5, 0xd4, 0x42, 0xc6, 0x19, 0xe5,
	0x2c, 0x92, 0x4d, 0xa3, 0xa3, 0x16, 0xb2, 0x74, 0xe6, 0x0c, 0x1a, 0xb5, 0x55, 0xa5, 0x4b, 0x48,
	0xe5, 0xe8, 0xc0, 0x29, 0x34, 0x4e, 0x07, 0x28, 0xbd, 0x11, 0x3a, 0x13, 0xa3, 0x31, 0x3a, 0x64,
	0x2b, 0xed, 0xc2, 0x28, 0x1d, 0x81, 0x59, 0x56, 0xcf, 0xd0, 0x2d, 0xc3, 0x2c, 0x8c, 0xd1, 0x01,
	0x98, 0xa5, 0x59, 0x72, 0xc7, 0x68, 0x3e, 0x53, 0x5b, 0x85, 0x71, 0x18, 0x1a, 0xcb, 0x4f, 0xa3,
	0x11, 0x18, 0x02, 0x86, 0x16, 0x10, 0xfd, 0x0d, 0xdf, 0x67, 0x70, 0x19, 0x96, 0xa6, 0x75, 0x0a,
	0x13, 0xee, 0xe7, 0x34, 0x90, 0x82, 0xad, 0x74, 0x7b, 0x85, 0x49, 0x32, 0x54, 0xbc, 0x8f, 0x4e,
	0x45, 0x98, 0x40, 0xd6, 0xd0, 0xd2, 0x9e, 0x6b, 0x16, 0x0c, 0xf3, 0x3d, 0x9f, 0x46, 0x13, 0x1e,
	0x1f, 0x18, 0x57, 0xa7, 0xa4, 0x1f, 0xa5, 0x90, 0x44, 0x58, 0xba, 0x5e, 0x6b, 0x94, 0xd7, 0x4c,
	0x55, 0xb1, 0xd5, 0x0d, 0xb6, 0x67, 0xa0, 0xd5, 0xee, 0xab, 0x7b, 0xea, 0x97, 0xfb, 0xf0, 0x2d,
	0x32, 0xb7, 0x43, 0x07, 0xd8, 0x36, 0x53, 0x74, 0x0f, 0xde, 0x60, 0xc7, 0x68, 0x1b, 0x94, 0x97,
	0xd9, 0x7c, 0x0d, 0x4d, 0x5b, 0x6a, 0x47, 0x6d, 0xda, 0xf0, 0x61, 0xb9, 0xeb, 0x70, 0x73, 0xba,
	0x74, 0x89, 0x89, 0x8f, 0x53, 0x97, 0xeb, 0x2e, 0xce, 0x0e, 0xe0, 0xdc, 0xbf, 0xb0, 0x51, 0xae,
	0x36, 0xca, 0xf5, 0xc7, 0x72, 0xbd, 0xb2, 0x5d, 0x59, 0x6b, 0x6c, 0xd5, 0xaa, 0xf2, 0x56, 0xf5,
	0x61, 0x79, 0x7b, 0x6b, 0x9d, 0x88, 0x8f, 0x32, 0x93, 0xae, 0x9c, 0x09, 0x41, 0xfa, 0xef, 0x14,
	0xba, 0x91, 0xb8, 0x6a, 0xca, 0x6c, 0x35, 0xff, 0x1e, 0x1a, 0x31, 0x55, 0xab, 0xdf, 0xb1, 0xe9,
	0x8a, 0xa7, 0x4b, 0xf3, 0x9e, 0x0e, 0x1d, 0x31, 0x75, 0xb6, 0xb2, 0x47, 0x27, 0xde, 0x1f, 0xad,
	0xef, 0xaf, 0xad, 0x55, 0xea, 0x75, 0xe9, 0x97, 0x52, 0x68, 0x94, 0x0f, 0xe6, 0x27, 0x90, 0x33,
	0x8c, 0x3f, 0x93, 0x3f, 0x8b, 0x4e, 0x55, 0xf6, 0xf6, 0x6a, 0x7b, 0xf2, 0x7e, 0xb5, 0xbe, 0x5b,
	0x59, 0xdb, 0xda, 0xd8, 0xaa, 0xac, 0xe3, 0x54, 0xbe, 0x88, 0xce, 0xb1, 0xe1, 0x46, 0xad, 0x26,
	0xef, 0x94, 0xab, 0x8f, 0xe5, 0xed, 0x4a, 0x79, 0x73, 0xbf, 0x52, 0xc7, 0xe9, 0xfc, 0x25, 0x54,
	0x60, 0x30, 0xbe, 0x49, 0xb9, 0x51, 0x29, 0xef, 0xc8, 0x6b, 0xb5, 0xfd, 0x6a, 0x03, 0x67, 0xf2,
	0x17, 0xd1, 0x79, 0x06, 0x5d, 0xdb, 0xab, 0x94, 0x29, 0x2f, 0xd6, 0xb7, 0xea, 0xe5, 0xd5, 0x6d,
	0x20, 0x9b, 0x95, 0x3e, 0x4e, 0xa3, 0x02, 0x59, 0x7f, 0x60, 0xd5, 0xf5, 0xa6, 0x61, 0x6a, 0x7a,
	0x3b, 0x3f, 0x85, 0x72, 0x1d, 0xf5, 0xb9, 0xda, 0xa1, 0xdb, 0x4d, 0x93, 0x9f, 0xcf, 0xb4, 0x4e,
	0xc7, 0xa2, 0xa2, 0x49, 0x13, 0x05, 0x6b, 0xc1, 0x86, 0x0f, 0x2c, 0x2a, 0x92, 0x34, 0x51, 0x4a,
	0xc5, 0xb2, 0x34, 0xcb, 0xb6, 0x28, 0x5b, 0xd3, 0x44, 0xb7, 0x3a, 0x8a, 0x65, 0xcb, 0x07, 0x1a,
	0x0c, 0xe5, 0xbc, 0x39, 0xba, 0xa6, 0x5a, 0x54, 0xb5, 0xd3, 0xb0, 0xf3, 0x4c, 0xbb, 0xd7, 0xa5,
	0x5a, 0x9d, 0x26, 0x56, 0xf4, 0xb2, 0x07, 0xbf, 0xc6, 0x9c, 0xaf, 0x59, 0x76, 0x5f, 0xb7, 0xa8,
	0x3a, 0x53, 0xea, 0x07, 0xaa, 0xd2, 0x81, 0x65, 0x51, 0x7d, 0x4e, 0x13, 0x75, 0xb1, 0x8d, 0x17,
	0xe0, 0x0e, 0xd8, 0x9a, 0x26, 0xe8, 0x20, 0x28, 0xb9, 0x69, 0x80, 0xbf, 0xd1, 0xf9, 0xe8, 0x24,
	0x1d, 0x2d, 0xa2, 0x7c, 0x17, 0xf8, 0xac, 0xf5, 0xc0, 0x53, 0x99, 0x60, 0x12, 0x6a, 0x57, 0xeb,
	0x77, 0x0b, 0x53, 0x14, 0x76, 0x15, 0x9d, 0x0f, 0xc0, 0x8c, 0xa7, 0xe0, 0x92, 0x40, 0x91, 0x94,
	0x4e, 0x61, 0x9a, 0x20, 0x48, 0xff, 0x9c, 0x43, 0x17, 0x1c, 0x09, 0x07, 0xb8, 0x44, 0xbd, 0xc1,
	0x05, 0x74, 0xca, 0xb1, 0x6a, 0xae, 0xbc, 0xae, 0x53, 0x00, 0xca, 0xc4, 0xab, 0x69, 0x94, 0x1c,
	0xd0, 0xf6, 0x79, 0x8d, 0x34, 0x45, 0xb8, 0x88, 0x4e, 0x87, 0xe6, 0x52, 0x6b, 0x60, 0xee, 0x22,
	0xaa, 0xf8, 0xd9, 0x93, 0x54, 0xfc, 0x9c, 0xe3, 0xb7, 0xa8, 0xad, 0x8d, 0x50, 0x5b, 0x7b, 0x03,
	0xbc, 0x0a, 0x93, 0x3c, 0x15, 0xc8, 0x44, 0xe9, 0x8a, 0xa7, 0xdf, 0xb1, 0xfa, 0x01, 0x24, 0x5b,
	0xa6, 0xf2, 0xd4, 0x96, 0x89, 0x0b, 0x61, 0xde, 0x23, 0x7f, 0x1e, 0xcd, 0xb0, 0xb1, 0x9e, 0xd6,
	0x7c, 0xc6, 0x00, 0x53, 0x14, 0x00, 0xa2, 0xb1, 0x54, 0xc5, 0x82, 0x95, 0x82, 0xb3, 0x31, 0xed,
	0xc2, 0x0c, 0x1d, 0x3d, 0x8b, 0xa6, 0xf8, 0x68, 0x47, 0xd5, 0xdb, 0xf6, 0x41, 0x01, 0xd3, 0x61,
	0xa0, 0xfc, 0x5c, 0xb5, 0x0d, 0xf9, 0xb9, 0x61, 0x83, 0xae, 0x9c, 0x72, 0x08, 0x28, 0xcd, 0x2f,
	0xf7, 0xc1, 0x07, 0x91, 0xfd, 0x5a, 0x85, 0x3c, 0x1d, 0x05, 0x8d, 0xb2, 0x3a, 0x86, 0x2d, 0xcf,
	0x17, 0x4e, 0x07, 0x7e, 0x97, 0x0a, 0x67, 0x02, 0xbf, 0x17, 0x0a, 0x67, 0x03, 0xbf, 0x17, 0x0b,
	0xe7, 0x02, 0xbf, 0x97, 0x0a, 0xe7, 0x1d, 0xb7, 0xf6, 0x44, 0xd5, 0x9b, 0x07, 0x32, 0x19, 0xb5,
	0x0a, 0x05, 0x3a, 0xf8, 0x36, 0x42, 0xc6, 0x0b, 0x9d, 0x87, 0x9e, 0xc2, 0x05, 0x1a, 0x40, 0x6e,
	0x07, 0x8d, 0x3f, 0xa2, 0x1a, 0xb3, 0x35, 0x32, 0x83, 0x2a, 0x09, 0xe8, 0x2e, 0x0b, 0x5d, 0x56,
	0xa1, 0x48, 0xdc, 0xa4, 0xe3, 0x75, 0xe5, 0x5f, 0x00, 0xc5, 0x28, 0x5c, 0x74, 0xd7, 0x41, 0x19,
	0x51, 0xb8, 0x44, 0x7f, 0x83, 0xc3, 0xed, 0x81, 0x39, 0xbd, 0x30, 0xcc, 0x56, 0xe1, 0x32, 0xd1,
	0x88, 0xe2, 0x3e, 0x1a, 0xf7, 0x48, 0x16, 0x10, 0x66, 0x2b, 0x8a, 0xc4, 0x22, 0xea, 0x46, 0x81,
	0xff, 0x4c, 0xa5, 0xa8, 0xaa, 0x8d, 0x11, 0x35, 0xe5, 0xc1, 0xd3, 0x87, 0x9f, 0xa1, 0x2e, 0xbb,
	0x8f, 0x5e, 0x89, 0xdd, 0x43, 0xa5, 0xa5, 0xd9, 0xe4, 0x53, 0x8e, 0xcf, 0x4e, 0xd0, 0xf4, 0x12,
	0x1a, 0x57, 0x01, 0x9b, 0x71, 0x27, 0x4d, 0x55, 0xe7, 0xea, 0x11, 0xdc, 0x91, 0xfe, 0x32, 0x85,
	0x5e, 0x3d, 0xe2, 0xbb, 0xdc, 0xeb, 0x6e, 0x87, 0xbc, 0xee, 0x42, 0x02, 0xe9, 0xf0, 0xe4, 0xa8,
	0xdf, 0xdd, 0x18, 0xce, 0xed, 0x9e, 0x47, 0xa7, 0xd9, 0x70, 0xb5, 0x26, 0xef, 0x56, 0xf6, 0x76,
	0xb6, 0xea, 0x75, 0x30, 0x2a, 0x9c, 0x96, 0x6a, 0xe8, 0x5a, 0xec, 0x0a, 0x36, 0x34, 0xbd, 0x35,
	0x00, 0xcb, 0xfc, 0xe2, 0xa5, 0x59, 0x83, 0xf4, 0xb7, 0x69, 0x74, 0x3d, 0x81, 0x22, 0x67, 0xc6,
	0x83, 0x10, 0x33, 0xde, 0x48, 0x60, 0x86, 0x7f, 0x62, 0x84, 0x11, 0x22, 0xef, 0xc3, 0x52, 0x18,
	0x58, 0x79, 0xc0, 0x77, 0x79, 0x8e, 0x49, 0xfa, 0x9e, 0x28, 0x70, 0xb9, 0x11, 0x8a, 0x05, 0x26,
	0xe0, 0x58, 0x43, 0xde, 0x80, 0x18, 0x44, 0xd8, 0x78, 0x0e, 0xe5, 0x19, 0x6c, 0xb5, 0xbc, 0x2e,
	0xef, 0x96, 0xeb, 0xf5, 0x47, 0xb5, 0xbd, 0x75, 0x88, 0x5c, 0xb1, 0x5c, 0xcf, 0x80, 0x31, 0x20,
	0x36, 0xbc, 0xb1, 0xbf, 0xbd, 0x8d, 0xb3, 0xa0, 0xed, 0x67, 0xd8, 0xef, 0xf2, 0x36, 0xc4, 0xb0,
	0xf5, 0xc7, 0xf2, 0x4e, 0x65, 0x67, 0xb5, 0xb2, 0x87, 0x73, 0x9e, 0x7c, 0xf8, 0x47, 0xb7, 0x6b,
	0x6b, 0xef, 0x03, 0x89, 0x11, 0xe9, 0x6d, 0x81, 0x7c, 0x06, 0x53, 0x69, 0xe9, 0xc7, 0x29, 0x81,
	0x34, 0x02, 0xaa, 0x39, 0x8c, 0x34, 0xfe, 0x7f, 0xd4, 0x92, 0xf0, 0x93, 0x6f, 0x7d, 0x0b, 0x18,
	0x2a, 0x95, 0x05, 0xd6, 0xbc, 0xa3, 0xd8, 0xcd, 0x83, 0x7e, 0xcf, 0x1a, 0x60, 0xeb, 0x7f, 0x92,
	0x15, 0x58, 0xa6, 0x47, 0xe3, 0x18, 0x96, 0x19, 0x9e, 0x1c, 0x55, 0xc8, 0xd8, 0x25, 0xb1, 0x48,
	0x59, 0x47, 0x33, 0x2f, 0x54, 0xf5, 0x59, 0xe7, 0x50, 0xee, 0x72, 0x32, 0xd4, 0x79, 0x4d, 0x94,
	0xee, 0x0f, 0xf3, 0xc5, 0x47, 0x94, 0x84, 0x33, 0x5c, 0x6c, 0xa2, 0x51, 0xfe, 0x7f, 0x92, 0x20,
	0x84, 0xbd, 0x29, 0x04, 0x14, 0x66, 0xa9, 0x71, 0xb0, 0x12, 0x5f, 0xd7, 0x0c, 0x8b, 0x98, 0x2a,
	0x20, 0xbb, 0x39, 0x10, 0x1b, 0x28, 0xb1, 0x1c, 0xa8, 0xf8, 0x15, 0x34, 0x1d, 0xfc, 0x6c, 0x7e,
	0x1d, 0x8d, 0xf2, 0x4d, 0xf0, 0x12, 0x66, 0x28, 0xae, 0x39, 0x2b, 0x86, 0x00, 0x49, 0xc3, 0x28,
	0x8b, 0xb0, 0x69, 0xc7, 0xa7, 0xa8, 0x7a, 0x8b, 0x8d, 0x64, 0xa8, 0x28, 0xe5, 0x93, 0xd1, 0x2a,
	0x91, 0x17, 0xcc, 0x40, 0xf0, 0xb8, 0xe2, 0xac, 0x9b, 0xb8, 0x5e, 0xbe, 0xf6, 0x06, 0xe4, 0x19,
	0x03, 0xf8, 0x40, 0x27, 0x23, 0x01, 0x37, 0xa5, 0xbe, 0xe4, 0x7b, 0x08, 0x94, 0x3f, 0x19, 0xa7,
	0xb6, 0xa1, 0x43, 0x34, 0x53, 0x21, 0x5c, 0xcd, 0x4a, 0x50, 0x92, 0x5d, 0x15, 0x7e, 0x97, 0x2b,
	0xe7, 0x46, 0x48, 0x39, 0x5f, 0x0f, 0xb2, 0x59, 0x30, 0x2d, 0x6a, 0x99, 0x5f, 0x1b, 0x32, 0x51,
	0x77, 0xd3, 0xed, 0x40, 0x32, 0xbe, 0x55, 0xdd, 0xa8, 0xf9, 0x33, 0xf5, 0x6a, 0x79, 0xa7, 0xe2,
	0x7a, 0xb3, 0x46, 0xf9, 0xfd, 0x0a, 0x70, 0x53, 0xc4, 0xe6, 0xac, 0xb4, 0x8d, 0xde, 0x08, 0xa9,
	0x07, 0x59, 0xb3, 0xcf, 0x95, 0xad, 0x1e, 0x06, 0x7d, 0xcd, 0x7a, 0x92, 0x81, 0xbf, 0x87, 0x66,
	0x8f, 0xa2, 0x46, 0x13, 0x8d, 0x32, 0x53, 0x78, 0x20, 0x26, 0xcc, 0x36, 0xa4, 0x0f, 0x3c, 0x41,
	0x44, 0x68, 0x71, 0x41, 0xcc, 0xa2, 0x51, 0x26, 0x08, 0xa7, 0x66, 0xbf, 0x1c, 0xab, 0xf0, 0xce,
	0x3c, 0xe9, 0x27, 0x29, 0x74, 0x5e, 0x00, 0x4b, 0xd2, 0xa6, 0xb8, 0x35, 0xa6, 0x1d, 0x0b, 0x76,
	0x26, 0xf9, 0xf4, 0x2d, 0x13, 0xd5, 0xb7, 0x6c, 0x54, 0xdf, 0x72, 0x34, 0x33, 0x86, 0x3c, 0xf9,
	0x85, 0xa6, 0xb3, 0xa2, 0x85, 0xa6, 0x6a, 0x1d, 0xc3, 0xb2, 0x20, 0x31, 0x1d, 0xa5, 0xbf, 0xcf,
	0xa1, 0xe9, 0x66, 0xdf, 0x34, 0x49, 0x13, 0x04, 0x8a, 0x0f, 0x5b, 0x25, 0x45, 0x39, 0xc9, 0xac,
	0xfe, 0x31, 0x15, 0xcb, 0x1c, 0x92, 0x3d, 0xab, 0x03, 0x98, 0xc7, 0xf1, 0x36, 0x04, 0xf9, 0xf7,
	0x53, 0xad, 0x03, 0x8b, 0x60, 0xae, 0x92, 0x4c, 0xa2, 0x36, 0x43, 0xbf, 0xc4, 0x00, 0x3e, 0xc7,
	0x91, 0x0b, 0xcd, 0x71, 0xfd, 0xc7, 0x88, 0x93, 0x9d, 0x6b, 0x7a, 0xb3, 0xd3, 0x6f, 0xa9, 0x32,
	0x4d, 0x8a, 0xe9, 0x86, 0xc7, 0xa4, 0xff, 0x49, 0x47, 0x82, 0xab, 0x6f, 0x63, 0x5c, 0xec, 0x9b,
	0x21, 0xfb, 0x9b, 0x15, 0x4a, 0x3d, 0x30, 0x2f, 0x1a, 0x17, 0xc2, 0xbb, 0xa5, 0x0e, 0x96, 0xd7,
	0xa0, 0x0d, 0x74, 0xc6, 0x81, 0xf1, 0xfc, 0x96, 0x41, 0x59, 0x74, 0x58, 0x1e, 0xf0, 0x93, 0x04,
	0x81, 0x75, 0x78, 0xe8, 0x78, 0x71, 0x11, 0xcd, 0x84, 0x86, 0x62, 0xbb, 0x3e, 0xa4, 0x42, 0xf5,
	0xd6, 0x22, 0xa9, 0x27, 0x93, 0x59, 0xe6, 0x2f, 0xa3, 0x0b, 0x0c, 0x50, 0x7b, 0x54, 0xad, 0xec,
	0xd1, 0x34, 0x6a, 0xab, 0xca, 0xdd, 0x31, 0xb8, 0xdc, 0xbf, 0xf3, 0x35, 0x2b, 0xfc, 0x3b, 0xb2,
	0x15, 0xbd, 0x05, 0x45, 0xd9, 0x00, 0x11, 0x9e, 0x2c, 0x9c, 0x55, 0x81, 0x4c, 0x9d, 0x62, 0x35,
	0x23, 0x23, 0xd2, 0x8c, 0xac, 0x48, 0xcd, 0x72, 0x21, 0x35, 0xa3, 0xb5, 0x3f, 0x85, 0x52, 0x6d,
	0x1a, 0x23, 0x76, 0xc2, 0x41, 0x9a, 0x2e, 0x1f, 0x28, 0x9d, 0x0e, 0x57, 0xa7, 0x5f, 0xcb, 0x46,
	0x92, 0x96, 0xd0, 0x8e, 0xb8, 0x4a, 0xbd, 0x1f, 0x52, 0xa9, 0x92, 0x58, 0xbe, 0xe1, 0xb9, 0x51,
	0xb5, 0xda, 0x41, 0x13, 0x9e, 0x3a, 0x39, 0xf9, 0xc4, 0xdd, 0x21, 0x28, 0x12, 0x24, 0x57, 0x97,
	0x8a, 0xff, 0x9b, 0x42, 0x53, 0x81, 0x91, 0x93, 0x37, 0x6d, 0x1f, 0xc1, 0x50, 0x40, 0x24, 0xea,
	0xc9, 0x08, 0x52, 0x3f, 0x96, 0x73, 0x72, 0xf8, 0x00, 0xba, 0xaf, 0xa3, 0xe8, 0x6a, 0x2e, 0x6b,
	0xbc, 0x90, 0x22, 0x9c, 0x66, 0x2d, 0x4a, 0x5b, 0x01, 0x37, 0x67, 0xf3, 0x0e, 0x8c, 0xe3, 0xf5,
	0xc6, 0x43, 0x5e, 0x0f, 0xb9, 0x05, 0xab, 0x6d, 0xaa, 0xca, 0x33, 0xda, 0x7a, 0xc9, 0x9d, 0x58,
	0x61, 0xf5, 0x57, 0xd1, 0xcc, 0xdb, 0x67, 0x88, 0x03, 0x68, 0x77, 0x6c, 0xad, 0xfb, 0x33, 0xd5,
	0x74, 0xe9, 0x37, 0xd2, 0x5e, 0x1b, 0x34, 0x6e, 0x0f, 0x5c, 0x9f, 0xb7, 0x42, 0xfa, 0x3c, 0x17,
	0xab, 0x7d, 0x31, 0x33, 0x87, 0x4a, 0x9e, 0x05, 0xb5, 0x3f, 0xef, 0x15, 0x70, 0x90, 0x2f, 0xfe,
	0xb9, 0xca, 0x41, 0x5b, 0x76, 0x27, 0x26, 0xd7, 0xbf, 0x89, 0x16, 0xfc, 0x7c, 0x67, 0xc7, 0xf7,
	0x5c, 0xa0, 0xa1, 0xb4, 0x97, 0x9e, 0x11, 0x4b, 0x37, 0x2b, 0x92, 0x6e, 0x4e, 0x24, 0xdd, 0x11,
	0xb1, 0x74, 0x99, 0xbf, 0xfa, 0x66, 0x06, 0x7d, 0xf6, 0xa8, 0x9d, 0x70, 0x09, 0xef, 0x84, 0x24,
	0xbc, 0x98, 0x24, 0xe1, 0xa3, 0x7d, 0x56, 0x82, 0x94, 0x83, 0xac, 0xa8, 0xa3, 0x29, 0x7f, 0x3c,
	0x24, 0x1d, 0x59, 0xe2, 0xde, 0xde, 0x1a, 0xea, 0xf3, 0xe1, 0xb0, 0xb8, 0x1b, 0x0d, 0x8b, 0xb1,
	0xba, 0x95, 0x8a, 0xd3, 0xad, 0x74, 0x50, 0xb7, 0x32, 0x27, 0xaa, 0x5b, 0x52, 0x24, 0x1f, 0xf1,
	0x0e, 0x6c, 0xb8, 0x56, 0x49, 0x0f, 0x04, 0x6e, 0x25, 0x90, 0xab, 0xde, 0x40, 0x99, 0xae, 0xd5,
	0xa6, 0x3b, 0x98, 0x28, 0x9d, 0x8b, 0x3f, 0x22, 0x92, 0x3e, 0x4e, 0x45, 0xac, 0x9b, 0xa5, 0xdd,
	0xec, 0x00, 0xc0, 0x51, 0x63, 0xc8, 0x23, 0x79, 0x6b, 0xd3, 0xe5, 0x49, 0x62, 0xcf, 0xc5, 0xdf,
	0x12, 0x0a, 0x56, 0x3e, 0x3e, 0xe3, 0x74, 0x3a, 0xb6, 0xcc, 0x05, 0x41, 0x44, 0xb5, 0xb5, 0xe6,
	0x33, 0x15, 0xd8, 0x6e, 0xab, 0x5d, 0x57, 0x79, 0xa5, 0x7f, 0x48, 0x47, 0x72, 0x84, 0xe0, 0x0a,
	0x07, 0x3b, 0xd0, 0x48, 0x98, 0x3a, 0x8c, 0x6e, 0x92, 0x8c, 0x3e, 0x5e, 0xce, 0x02, 0x81, 0x86,
	0x2a, 0xd1, 0x7a, 0xa5, 0x5c, 0x27, 0x8d, 0x6c, 0x52, 0x89, 0x5e, 0x40, 0x67, 0x23, 0x25, 0x2a,
	0xa9, 0xa5, 0xfc, 0xd5, 0x13, 0x01, 0xd1, 0xa2, 0x8b, 0x02, 0xb2, 0xf1, 0xda, 0x94, 0xf3, 0x6a,
	0xb1, 0x8d, 0xf2, 0xd6, 0x76, 0x05, 0xa8, 0xd5, 0x36, 0x6b, 0xf2, 0xfe, 0xee, 0x76, 0xad, 0xbc,
	0x8e, 0x47, 0x40, 0x7d, 0x67, 0xdc, 0xa5, 0x35, 0xb6, 0xd6, 0xde, 0xaf, 0x34, 0xf0, 0xa8, 0xf4,
	0x2b, 0xa9, 0xd8, 0xc4, 0x37, 0x28, 0xf7, 0x61, 0xba, 0x7e, 0x71, 0xf5, 0xae, 0x23, 0xe2, 0xac,
	0x40, 0xc4, 0x54, 0xf4, 0xd2, 0xb7, 0x32, 0x11, 0x7d, 0xf6, 0x2f, 0x65, 0xa8, 0x06, 0x55, 0x74,
	0xe2, 0xd1, 0x59, 0xb8, 0xaf, 0x68, 0x97, 0x3e, 0x4a, 0x0f, 0x2b, 0xdf, 0x24, 0xde, 0x93, 0x33,
	0x99, 0x8b, 0x9e, 0x24, 0x9d, 0x13, 0x0d, 0xaf, 0x1f, 0x91, 0x81, 0x74, 0x67, 0xda, 0x43, 0xe0,
	0x52, 0x0e, 0xf6, 0x0c, 0x73, 0xc2, 0x9e, 0xe1, 0x88, 0xa0, 0x19, 0x39, 0x1a, 0xaf, 0x27, 0x63,
	0x71, 0x9a, 0x30, 0x2e, 0xea, 0x3b, 0x22, 0xe9, 0x5f, 0x52, 0xe8, 0x66, 0x42, 0x6b, 0xfa, 0x39,
	0x48, 0xd1, 0x3a, 0x96, 0xa6, 0x7c, 0x40, 0x6a, 0x31, 0x32, 0x5d, 0x6e, 0x1e, 0x28, 0x7a, 0x5b,
	0x1d, 0xa0, 0x03, 0x16, 0xfd, 0xe4, 0x2c, 0xfb, 0xb9, 0x46, 0x29, 0x14, 0x17, 0xd0, 0xa4, 0xff,
	0x77, 0x6c, 0x91, 0x33, 0x83, 0x46, 0xd9, 0x67, 0xd9, 0x3a, 0xc6, 0xa4, 0x3f, 0x4d, 0xa1, 0x5b,
	0x47, 0x7f, 0x8d, 0xeb, 0x5f, 0x2d, 0xa4, 0x7f, 0xcb, 0x83, 0xae, 0x56, 0xd4, 0x8d, 0x79, 0x7d,
	0xa8, 0x88, 0x21, 0xad, 0x0b, 0x84, 0xb1, 0x4e, 0x8e, 0xa8, 0x20, 0xe2, 0xd9, 0xfd, 0x41, 0x3a,
	0xa2, 0x3f, 0x49, 0x09, 0x9a, 0xc9, 0x3e, 0x32, 0x49, 0xc2, 0x84, 0x50, 0xc8, 0xce, 0xc4, 0x40,
	0x9a, 0xaa, 0xc9, 0x8e, 0xca, 0xe9, 0x2d, 0x01, 0xde, 0x35, 0x20, 0x47, 0x65, 0x3c, 0x70, 0x53,
	0x73, 0xef, 0xaa, 0xb2, 0xa9, 0x76, 0x21, 0x15, 0x27, 0x47, 0x71, 0x59, 0x67, 0xbc, 0xa7, 0xd2,
	0xf8, 0x2c, 0x13, 0x86, 0xf2, 0xfc, 0x65, 0x8c, 0xf8, 0x8f, 0xa6, 0xd1, 0xed, 0x75, 0x54, 0x22,
	0xa0, 0x11, 0xe7, 0xac, 0x47, 0x79, 0xae, 0x68, 0x1d, 0xe5, 0x49, 0x47, 0x95, 0x9d, 0x73, 0xa7,
	0x51, 0xda, 0x91, 0xb0, 0x92, 0xd8, 0xc1, 0x22, 0xdc, 0x31, 0xfb, 0x76, 0xe2, 0x24, 0x53, 0xfa,
	0x46, 0x46, 0xa0, 0x30, 0x81, 0xaf, 0x1e, 0x43, 0x61, 0x62, 0xe6, 0x47, 0x15, 0x46, 0xe8, 0x9b,
	0x04, 0x39, 0xc6, 0x35, 0x74, 0x29, 0xd8, 0xbe, 0x0b, 0xfa, 0x1f, 0xf0, 0x4e, 0xaf, 0xa2, 0xeb,
	0x8e, 0xef, 0x0a, 0x78, 0x26, 0x52, 0xa8, 0xaf, 0xef, 0x95, 0x37, 0x1a, 0x5b, 0xd5, 0x4d, 0xf0,
	0x51, 0x89, 0x65, 0x7c, 0xd6, 0x0b, 0x64, 0x04, 0x40, 0x51, 0xea, 0x72, 0x63, 0x7f, 0xaf, 0xea,
	0xf7, 0x5c, 0xbb, 0xdb, 0xe5, 0xc7, 0x15, 0x77, 0x25, 0xe0, 0xb9, 0x5c, 0xb7, 0xc9, 0x21, 0xfb,
	0xd5, 0xf2, 0x43, 0x70, 0xa0, 0xe4, 0x30, 0x1f, 0xfc, 0x97, 0xeb, 0x36, 0x39, 0x14, 0xfc, 0x15,
	0xdb, 0x42, 0x7d, 0xbb, 0xd6, 0xa8, 0xe3, 0x31, 0x12, 0xbe, 0xe2, 0x0a, 0xed, 0x3d, 0xda, 0xb4,
	0xaa, 0xbf, 0x50, 0x7a, 0x9f, 0xa2, 0x69, 0xeb, 0x5e, 0x22, 0xc9, 0x84, 0x8e, 0x65, 0xb3, 0xa1,
	0x63, 0x59, 0x9a, 0x77, 0x4b, 0xff, 0x11, 0xad, 0x06, 0xc2, 0x4b, 0x19, 0xea, 0x90, 0x21, 0x7e,
	0x72, 0x54, 0x1d, 0xbe, 0x32, 0x9c, 0x36, 0x24, 0x0a, 0xd1, 0xd7, 0x17, 0xa7, 0x1c, 0x76, 0x05,
	0x95, 0xf1, 0xc8, 0x11, 0x80, 0x13, 0x1c, 0xb2, 0xd2, 0x47, 0xd1, 0xe0, 0xe0, 0x2d, 0xbc, 0xdc,
	0x6a, 0xad, 0x9b, 0xc6, 0x71, 0x65, 0x00, 0x0e, 0x42, 0x69, 0xb5, 0xfc, 0xd6, 0x97, 0xf3, 0xce,
	0xe3, 0x8d, 0x9e, 0x1f, 0x30, 0xc2, 0x8e, 0x79, 0xd2, 0x11, 0xb3, 0x8c, 0x59, 0xcb, 0x50, 0x66,
	0x29, 0x9c, 0x1f, 0x95, 0xc3, 0x0f, 0x53, 0x27, 0x2a, 0x88, 0x2b, 0xa8, 0x18, 0x52, 0xfd, 0x86,
	0xec, 0x99, 0x46, 0x26, 0x62, 0x38, 0xd4, 0xe8, 0xaa, 0x34, 0x4b, 0x04, 0x5b, 0x74, 0x0d, 0xa7,
	0xb1, 0x57, 0x5e, 0xf7, 0xda, 0xf2, 0xbb, 0x95, 0xea, 0x3a, 0xb1, 0xe5, 0x5c, 0xcc, 0x61, 0x22,
	0xd9, 0x6a, 0xc3, 0x54, 0x5a, 0x83, 0x04, 0x73, 0xe9, 0x37, 0xe3, 0x73, 0x35, 0x67, 0xfe, 0xd0,
	0xb9, 0x5a, 0x70, 0x62, 0x34, 0x57, 0x7b, 0x1b, 0x8d, 0xd8, 0x14, 0x85, 0xdf, 0x75, 0x7b, 0x7d,
	0x50, 0x4a, 0xf4, 0x67, 0xf1, 0xdb, 0x29, 0x94, 0xa3, 0xff, 0x0b, 0x1a, 0xb6, 0xf8, 0x38, 0x6c,
	0xde, 0x6b, 0x5e, 0xc5, 0x1c, 0x95, 0x65, 0x9c, 0xd2, 0x27, 0x12, 0x20, 0x5c, 0xef, 0x10, 0x0b,
	0xe4, 0xae, 0x82, 0x35, 0x9a, 0x48, 0x88, 0xe5, 0x8a, 0x7b, 0x52, 0x45, 0xe3, 0xaf, 0xc6, 0xbb,
	0x20, 0xba, 0xf3, 0x35, 0x45, 0x6f, 0xaa, 0x9d, 0x01, 0x4c, 0x11, 0xa2, 0xb8, 0x67, 0x8a, 0xfc,
	0x18, 0x50, 0xc4, 0x88, 0x6c, 0xcc, 0x0c, 0xc7, 0x1f, 0xfe, 0x7d, 0x2a, 0xd2, 0x53, 0x88, 0x2c,
	0x66, 0xa8, 0x9e, 0x82, 0x60, 0x76, 0xd4, 0x12, 0x3f, 0x3c, 0xa1, 0xb6, 0xb5, 0x9b, 0x93, 0x93,
	0x34, 0x99, 0xd8, 0x11, 0xce, 0x48, 0xbf, 0x18, 0x6b, 0x37, 0xcc, 0x45, 0x1c, 0xd3, 0xcf, 0xc5,
	0xb5, 0x4e, 0x33, 0xd1, 0x28, 0xc4, 0x2e, 0xf6, 0x7d, 0x23, 0x1d, 0x6b, 0x78, 0xce, 0x02, 0x86,
	0x36, 0xbc, 0xe0, 0xc4, 0xd8, 0x22, 0x29, 0xa2, 0xc7, 0xfc, 0x6a, 0x24, 0x69, 0xb2, 0x72, 0x18,
	0xbf, 0xa6, 0x49, 0xf2, 0xf7, 0xb1, 0x9f, 0xd5, 0xa9, 0xc1, 0x26, 0xba, 0x13, 0xdb, 0xfd, 0x78,
	0xa0, 0x59, 0x86, 0xa9, 0x35, 0x95, 0x0e, 0xc9, 0x62, 0x07, 0xf1, 0x65, 0xdf, 0x1a, 0x41, 0xaf,
	0x0d, 0x44, 0x89, 0x33, 0x77, 0x2f, 0xc4, 0xdc, 0x7b, 0x09, 0x2d, 0xa8, 0x78, 0x12, 0x51, 0x36,
	0x6f, 0x93, 0xab, 0x81, 0x80, 0xc1, 0xdd, 0xdb, 0xdb, 0xc3, 0x93, 0x74, 0x5b, 0x5e, 0xb6, 0x55,
	0xfc, 0x5a, 0x1a, 0x9d, 0xf3, 0xf5, 0xb4, 0xca, 0xcd, 0x66, 0xbf, 0xdb, 0xef, 0x28, 0xb6, 0x61,
	0x92, 0xe2, 0x87, 0x36, 0xfe, 0x54, 0x8b, 0x6b, 0x24, 0x69, 0x82, 0x93, 0x1b, 0x91, 0xce, 0x1d,
	0x48, 0xf7, 0x4a, 0x64, 0x26, 0x74, 0x25, 0x32, 0x1b, 0xbe, 0x12, 0x99, 0x8b, 0x5e, 0x89, 0x1c,
	0x09, 0x5d, 0x89, 0x1c, 0xf5, 0x5f, 0x89, 0x1c, 0x0b, 0x5c, 0x89, 0x1c, 0x0f, 0x5e, 0x89, 0x44,
	0xe1, 0x2b, 0x91, 0x13, 0x71, 0x57, 0x22, 0x27, 0x63, 0xaf, 0x44, 0x4e, 0xb9, 0xa4, 0x68, 0x23,
	0x8e, 0x5e, 0x72, 0x2c, 0xfe, 0x57, 0x0a, 0x4d, 0xf8, 0x78, 0x22, 0x3a, 0xee, 0x22, 0x97, 0x30,
	0x2c, 0x6e, 0x88, 0x32, 0x9a, 0xa2, 0x42, 0x70, 0xef, 0x53, 0x66, 0x69, 0xd3, 0xec, 0xc1, 0xb1,
	0x85, 0x11, 0x66, 0x7e, 0x0b, 0xe5, 0x9d, 0x0f, 0xf8, 0x2e, 0x65, 0xe6, 0x4e, 0xf6, 0x2b, 0x27,
	0x16, 0x4d, 0x36, 0x23, 0xb7, 0x44, 0x77, 0xd8, 0xdd, 0x76, 0x48, 0x85, 0x92, 0x7c, 0x1c, 0x51,
	0x31, 0x86, 0xc8, 0xef, 0x81, 0xb5, 0xbd, 0x2b, 0x15, 0x41, 0x42, 0x83, 0xb4, 0x0d, 0xce, 0x52,
	0xa1, 0x98, 0xb6, 0xec, 0xa7, 0x49, 0x0b, 0x50, 0xd2, 0xf7, 0x76, 0x06, 0x59, 0x5d, 0xf6, 0xaf,
	0xe9, 0xc8, 0xf1, 0xb4, 0xf7, 0xa5, 0xc1, 0x2e, 0x51, 0x08, 0xa6, 0x45, 0x2d, 0xf6, 0x1d, 0x34,
	0xe6, 0x5c, 0xf5, 0x4f, 0xcc, 0x49, 0x22, 0x94, 0xf8, 0x00, 0xf1, 0xac, 0x7a, 0xbf, 0x2b, 0xdb,
	0x30, 0xa7, 0x23, 0xbb, 0xa4, 0xe8, 0x46, 0x8a, 0x8f, 0xd0, 0xa8, 0x83, 0x06, 0x7a, 0xcb, 0x81,
	0x62, 0x0e, 0xd3, 0x02, 0xb9, 0x6f, 0x1f, 0x18, 0x31, 0x31, 0x04, 0xec, 0xcd, 0x3b, 0x35, 0x38,
	0x31, 0xdd, 0x50, 0x51, 0x31, 0xb4, 0xcf, 0x3d, 0xb5, 0x6b, 0x3c, 0x57, 0xe9, 0x2d, 0x8b, 0xe3,
	0x9d, 0x13, 0x06, 0x43, 0x23, 0x13, 0xe8, 0x4f, 0xa3, 0x7d, 0x69, 0xdf, 0x77, 0x86, 0x3c, 0x75,
	0x8a, 0x99, 0x19, 0xcd, 0x1d, 0x5e, 0x9c, 0x50, 0xf0, 0x12, 0x74, 0xd3, 0x32, 0x5e, 0xab, 0x8e,
	0x26, 0xf4, 0x4e, 0x0b, 0x2f, 0x2b, 0xad, 0x45, 0xb2, 0xa5, 0x3a, 0x78, 0xe9, 0x56, 0xbf, 0xa3,
	0xb6, 0x76, 0x98, 0xc3, 0x1e, 0x20, 0x94, 0xfd, 0x53, 0x3a, 0x52, 0x8d, 0x45, 0xa9, 0x70, 0xa6,
	0x55, 0x43, 0x4c, 0x5b, 0x8a, 0x65, 0x9a, 0x68, 0x7a, 0xd4, 0x20, 0xbe, 0x84, 0xce, 0x58, 0x0e,
	0x32, 0x3f, 0x7a, 0x6a, 0x29, 0x87, 0x8e, 0x71, 0xbc, 0x3b, 0x1c, 0xf5, 0x20, 0x60, 0x1d, 0xe8,
	0x14, 0x77, 0x50, 0x3e, 0x3a, 0x1a, 0x97, 0xcf, 0x3b, 0x8f, 0x4b, 0xbc, 0x44, 0x05, 0x54, 0xcb,
	0xe5, 0x94, 0xc5, 0x2f, 0x09, 0x0f, 0xd9, 0x76, 0xfb, 0x30, 0xee, 0xf2, 0xe4, 0x73, 0x35, 0xf8,
	0x08, 0x24, 0x41, 0xef, 0x93, 0x9a, 0xcd, 0x3f, 0x8d, 0x3d, 0x7d, 0xf1, 0x88, 0x0f, 0xa5, 0xe5,
	0x31, 0x33, 0x3f, 0xb5, 0x96, 0x9f, 0x41, 0xd8, 0xd3, 0x59, 0xae, 0xb1, 0xe9, 0x84, 0xdb, 0xb1,
	0x3e, 0x2d, 0xa7, 0xed, 0x23, 0xb9, 0xbc, 0xd6, 0xd8, 0x7a, 0x58, 0x01, 0x2d, 0xff, 0x7a, 0xb4,
	0xd5, 0xea, 0x8b, 0x62, 0xeb, 0xaa, 0xad, 0x68, 0x1d, 0xeb, 0xd3, 0x9d, 0x88, 0x07, 0xef, 0x11,
	0x66, 0x22, 0xf7, 0x08, 0x99, 0x23, 0xfc, 0x24, 0x8b, 0x6e, 0x0f, 0xb0, 0x10, 0xce, 0xfa, 0xdd,
	0x10, 0xeb, 0x57, 0x8e, 0x3a, 0xd6, 0x0e, 0x11, 0x88, 0xbb, 0xab, 0x91, 0x6d, 0x29, 0xb6, 0xc2,
	0xad, 0xe3, 0x9d, 0x61, 0xe9, 0x31, 0x10, 0x37, 0x03, 0x5b, 0x29, 0xfe, 0x30, 0x8d, 0x66, 0x42,
	0x63, 0x64, 0xd3, 0xee, 0x09, 0x70, 0x8a, 0x9e, 0xbc, 0xd0, 0xf3, 0x3b, 0x13, 0x12, 0xb3, 0x20,
	0xb7, 0xd8, 0x10, 0x04, 0x23, 0xef, 0x0c, 0x9d, 0x8f, 0xd9, 0x87, 0x3d, 0xe7, 0xbc, 0xd9, 0x7b,
	0xcb, 0x64, 0x6b, 0xaa, 0xe9, 0x3d, 0xed, 0xf2, 0x24, 0x33, 0xe2, 0x3a, 0xf8, 0x5e, 0xcf, 0xb0,
	0x48, 0x5f, 0xd7, 0x79, 0x07, 0x36, 0xea, 0x96, 0x90, 0x01, 0x08, 0x3d, 0x13, 0x1a, 0xa3, 0x2b,
	0x8b, 0xc0, 0xe8, 0xe9, 0xd1, 0x38, 0x0d, 0x6e, 0xaf, 0x3b, 0xb9, 0x31, 0x1a, 0xe8, 0x09, 0x07,
	0x6c, 0x9b, 0x44, 0x98, 0x96, 0xfc, 0xe4, 0x90, 0xbf, 0x08, 0x83, 0x70, 0x49, 0xef, 0x7a, 0x41,
	0x85, 0x32, 0x49, 0x1b, 0xfe, 0x6b, 0x27, 0xa0, 0xfe, 0xd2, 0x2f, 0x8f, 0xa2, 0xbc, 0x23, 0xb0,
	0x86, 0xd1, 0x37, 0xc9, 0x8a, 0x75, 0x9b, 0xe4, 0x2b, 0xb6, 0xfb, 0x2b, 0xd8, 0x30, 0xe7, 0xaf,
	0xcd, 0x3c, 0xe6, 0xd3, 0x5b, 0x2a, 0xcc, 0xa5, 0xf9, 0xb5, 0x95, 0xf0, 0x9f, 0x64, 0xb6, 0x32,
	0x7b, 0xaa, 0xc4, 0xf8, 0xbf, 0x87, 0x4e, 0xfb, 0xe8, 0xda, 0x6a, 0x17, 0xf4, 0xdf, 0x66, 0x3d,
	0xf3, 0xe9, 0xd2, 0x05, 0xc6, 0x93, 0x8a, 0xb7, 0x8e, 0x06, 0x47, 0xb8, 0x5f, 0x7c, 0x26, 0xc7,
	0x0c, 0xcb, 0x55, 0x43, 0x57, 0xf3, 0x65, 0xc6, 0x59, 0x76, 0x87, 0x66, 0xda, 0x39, 0x1d, 0xf6,
	0xa1, 0x93, 0x7c, 0x33, 0x4c, 0x82, 0x8e, 0xc9, 0xfb, 0xfa, 0x33, 0x1d, 0xd8, 0x9c, 0xff, 0x1c,
	0xca, 0x11, 0x79, 0xb1, 0x76, 0x7c, 0xe4, 0x22, 0xa4, 0x37, 0x6b, 0x96, 0x14, 0x9b, 0x04, 0xbb,
	0x0d, 0x3f, 0x2d, 0x7a, 0x9d, 0x30, 0x09, 0x7b, 0x13, 0xfe, 0x21, 0xd8, 0xba, 0x41, 0x7a, 0x3e,
	0xe3, 0x47, 0x60, 0x57, 0x01, 0xab, 0xf8, 0x67, 0x29, 0x94, 0xa5, 0x1f, 0x71, 0xfc, 0x7f, 0x9b,
	0x33, 0x7f, 0x84, 0xf0, 0x99, 0x10, 0x92, 0x0d, 0x7a, 0x8f, 0xc2, 0xf6, 0x72, 0x48, 0xf7, 0x11,
	0x0b, 0x8d, 0x09, 0xab, 0x69, 0x10, 0x76, 0xc1, 0x7d, 0x94, 0xf9, 0xa4, 0x7f, 0xa8, 0xe9, 0xf4,
	0xdb, 0x0c, 0xe2, 0x7b, 0xd8, 0x98, 0x8d, 0xde, 0xb4, 0x64, 0x37, 0x94, 0xc8, 0x61, 0x07, 0x19,
	0x7a, 0xa2, 0x58, 0xfc, 0xd1, 0xdf, 0x28, 0xd5, 0x6f, 0xa7, 0x45, 0xd2, 0xd7, 0x7c, 0x5a, 0x4f,
	0x97, 0x4c, 0x77, 0x0a, 0x4b, 0xa6, 0x0b, 0xd4, 0x5a, 0x2f, 0xbd, 0x20, 0xd6, 0x31, 0x9e, 0x3c,
	0x39, 0x74, 0x94, 0x65, 0x24, 0x60, 0xce, 0x19, 0x4a, 0xf4, 0x34, 0xbf, 0xef, 0xa5, 0xc8, 0x6d,
	0xc3, 0x60, 0x8b, 0x1a, 0x83, 0x28, 0xc1, 0x65, 0xca, 0x34, 0xa3, 0x18, 0x91, 0x29, 0xf9, 0x20,
	0x93, 0xeb, 0x95, 0x80, 0x5c, 0xdd, 0x71, 0x57, 0xb6, 0x41, 0x4f, 0x4a, 0xcd, 0xbb, 0xf8, 0x4d,
	0x58, 0x32, 0x61, 0x37, 0xe1, 0x06, 0x5f, 0x72, 0xb8, 0xb5, 0xd1, 0x7a, 0x29, 0x2b, 0xe1, 0x9c,
	0x0e, 0xc6, 0x9e, 0x70, 0xed, 0xae, 0x22, 0x44, 0x27, 0xb2, 0x55, 0x66, 0x05, 0xab, 0x24, 0xdf,
	0x88, 0x5b, 0xa5, 0x3b, 0xee, 0xac, 0x52, 0xfa, 0x7e, 0x16, 0x5d, 0x8e, 0xea, 0x04, 0xc5, 0xe1,
	0x87, 0x80, 0x10, 0x2c, 0x74, 0xf5, 0x85, 0x1c, 0x67, 0x96, 0x9f, 0x47, 0x39, 0xb0, 0x31, 0x7e,
	0xfb, 0x26, 0xce, 0x02, 0x2a, 0x04, 0x7a, 0xff, 0x7c, 0x60, 0x0d, 0x74, 0x8c, 0x59, 0xd0, 0x2e,
	0x3a, 0x13, 0x22, 0xcd, 0xb6, 0x95, 0x39, 0xb6, 0x41, 0xad, 0xa3, 0x49, 0x62, 0x22, 0xfc, 0x48,
	0xd4, 0xb9, 0xe6, 0x32, 0x2b, 0xd2, 0x7d, 0xdf, 0x3e, 0xa9, 0xd1, 0xf0, 0x2d, 0xaf, 0x73, 0x7d,
	0x73, 0xa8, 0xe4, 0x06, 0xa7, 0x42, 0x8f, 0xce, 0x19, 0x95, 0xeb, 0xe8, 0x6c, 0x57, 0x35, 0xdb,
	0xe0, 0x4b, 0x03, 0xbc, 0x23, 0x75, 0x3e, 0x37, 0x8a, 0x62, 0x17, 0x21, 0xdf, 0x67, 0xa3, 0x21,
	0x67, 0x07, 0x8d, 0x13, 0x06, 0x79, 0x66, 0xf7, 0xa9, 0x54, 0xb2, 0x78, 0x0f, 0x21, 0xdf, 0xfa,
	0xc2, 0x96, 0x9e, 0x75, 0x44, 0x1d, 0x63, 0xed, 0xd2, 0x07, 0x5e, 0x39, 0xeb, 0x7d, 0xc1, 0x49,
	0x35, 0x04, 0x5e, 0xfb, 0x32, 0x3a, 0xcb, 0xdf, 0x82, 0xfb, 0xa0, 0x6d, 0x6e, 0x92, 0x59, 0xe9,
	0x8b, 0x5e, 0x15, 0xe4, 0x27, 0xc9, 0x93, 0x86, 0x53, 0x81, 0xa4, 0x61, 0xea, 0x7e, 0xaa, 0x04,
	0x1e, 0x0d, 0x79, 0x84, 0xf8, 0xbb, 0xb2, 0x82, 0x48, 0x28, 0x52, 0x05, 0x5d, 0x74, 0x1f, 0xe2,
	0x42, 0x98, 0x35, 0x83, 0x8c, 0x11, 0xad, 0x19, 0x0c, 0x93, 0x2a, 0x90, 0x7b, 0x57, 0xe5, 0x43,
	0xcf, 0x3e, 0x76, 0x15, 0x0b, 0x16, 0x67, 0xda, 0x0f, 0x0d, 0x5b, 0x25, 0x7c, 0xdc, 0x84, 0xcd,
	0x5b, 0xc1, 0x28, 0x9e, 0x72, 0x5c, 0xdb, 0x0b, 0x4d, 0xa7, 0xef, 0x03, 0x5b, 0x5e, 0xc5, 0x6d,
	0xf6, 0xc9, 0x50, 0xbf, 0xe7, 0x9d, 0x84, 0xfe, 0x96, 0xef, 0xfc, 0xcd, 0x4f, 0x7c, 0x53, 0x05,
	0x44, 0xad, 0xe9, 0xbe, 0xe5, 0xcc, 0x7f, 0x01, 0xcd, 0x78, 0x8f, 0x3f, 0x59, 0xf2, 0xcb, 0x52,
	0xa9, 0x9b, 0x6c, 0xfb, 0x84, 0x80, 0x5c, 0x9a, 0x9b, 0x5f, 0x70, 0xa8, 0xb8, 0x53, 0xb7, 0xf4,
	0x96, 0xd6, 0x54, 0xad, 0xfb, 0x17, 0x76, 0x77, 0xe7, 0x17, 0xc8, 0x2b, 0x50, 0xb9, 0xbc, 0xbd,
	0x5d, 0x6f, 0x94, 0xdd, 0x93, 0x8f, 0x39, 0x96, 0xd7, 0x70, 0x74, 0xbe, 0xe9, 0x8d, 0xe8, 0xa6,
	0xeb, 0xa4, 0x46, 0x50, 0x5b, 0x2c, 0x4d, 0x22, 0xba, 0x63, 0x39, 0xee, 0x3c, 0xe5, 0xb8, 0x53,
	0x5a, 0x46, 0xf0, 0xb0, 0xcb, 0xe8, 0xbc, 0xe9, 0x5d, 0x3b, 0x72, 0xe8, 0x30, 0x02, 0x6b, 0x8a,
	0xd9, 0x5a, 0x23, 0x57, 0x7e, 0x55, 0xa2, 0x89, 0xe4, 0xe8, 0xdb, 0xf9, 0xe1, 0x95, 0x63, 0xdf,
	0x49, 0xa3, 0x33, 0x71, 0xdc, 0xc9, 0xaf, 0x70, 0xbf, 0xc8, 0x1e, 0x83, 0xb2, 0x37, 0x04, 0x37,
	0x82, 0x7a, 0x10, 0x2f, 0xaa, 0x0d, 0x94, 0x6f, 0x33, 0xd6, 0xca, 0xee, 0x8e, 0x9d, 0x12, 0xeb,
	0x8e, 0x98, 0x40, 0x44, 0x1c, 0x6f, 0x81, 0x38, 0x18, 0x3b, 0x64, 0x7f, 0x08, 0x14, 0xae, 0x22,
	0xc8, 0xbb, 0x2d, 0x74, 0x8e, 0xc7, 0xc8, 0x26, 0x70, 0x41, 0x76, 0x77, 0xee, 0x78, 0xab, 0xdb,
	0xf1, 0x44, 0x62, 0x18, 0x27, 0x7d, 0x82, 0xd0, 0xb9, 0xa8, 0xea, 0xd3, 0x97, 0x11, 0x31, 0x6a,
	0xb9, 0x8c, 0x50, 0xef, 0x80, 0x86, 0x56, 0xcd, 0xb2, 0xf9, 0xb6, 0x25, 0x91, 0xfd, 0xb0, 0xbf,
	0x9a, 0x40, 0xd0, 0xf3, 0x4b, 0x8c, 0xdf, 0x16, 0x9b, 0x97, 0x09, 0xff, 0x9d, 0x85, 0x98, 0x79,
	0x34, 0x93, 0xd8, 0x42, 0x67, 0xfb, 0xbd, 0xa6, 0xd1, 0x25, 0x59, 0x29, 0xef, 0x9a, 0x32, 0x0a,
	0xd9, 0x38, 0x86, 0x87, 0x28, 0xec, 0xf3, 0x99, 0x34, 0x21, 0xcf, 0x2f, 0x52, 0x3f, 0xc8, 0xa7,
	0xe7, 0x06, 0x58, 0x40, 0x15, 0xb0, 0x8b, 0x25, 0x84, 0xe8, 0x06, 0x36, 0x4d, 0xa3, 0xdf, 0x23,
	0x2a, 0xdb, 0x26, 0xff, 0x09, 0xc4, 0x5c, 0x36, 0xe2, 0x5d, 0xba, 0x2b, 0x7e, 0x92, 0x42, 0x39,
	0xb6, 0x6b, 0x72, 0xe3, 0x86, 0x72, 0xcb, 0x8f, 0xcf, 0x46, 0x7c, 0x97, 0xf4, 0x48, 0x5a, 0x03,
	0x69, 0xbe, 0xd7, 0x31, 0x02, 0x24, 0xcd, 0x56, 0x4d, 0x85, 0xe9, 0x96, 0x7b, 0x59, 0x03, 0xf6,
	0x12, 0x7d, 0x67, 0x41, 0xc6, 0x95, 0x97, 0x72, 0x38, 0x4d, 0xc8, 0xbf, 0xe9, 0x2c, 0x8c, 0xee,
	0x97, 0xe5, 0x86, 0x37, 0x8f, 0x16, 0x14, 0xdd, 0x67, 0xf1, 0x31, 0x4f, 0xe4, 0x7c, 0x09, 0x57,
	0xdc, 0x1f, 0xa5, 0x98, 0x40, 0x19, 0xf2, 0xf7, 0x23, 0x44, 0x4f, 0xaa, 0xc8, 0x3e, 0xd4, 0x8e,
	0x06, 0xcb, 0x56, 0xc8, 0x4d, 0x12, 0x7a, 0xb9, 0xa4, 0xf8, 0x51, 0x0e, 0x4d, 0x05, 0x05, 0x13,
	0xa8, 0x89, 0x02, 0x0d, 0x84, 0x79, 0xcf, 0xf7, 0xf1, 0x91, 0x92, 0xc7, 0x24, 0x84, 0xd2, 0x4f,
	0x0c, 0xce, 0x1c, 0x96, 0x27, 0xb5, 0x55, 0x7f, 0x22, 0x18, 0x93, 0x3b, 0x11, 0x27, 0xc1, 0x9d,
	0x2a, 0x45, 0xe7, 0x7f, 0xf9, 0x82, 0x14, 0x56, 0x86, 0xe5, 0x0e, 0x8e, 0xf9, 0xb7, 0x33, 0x4f,
	0xff, 0x42, 0xc6, 0xb8, 0x7f, 0xa8, 0x44, 0x87, 0x10, 0x1d, 0xba, 0x8a, 0xce, 0x33, 0xac, 0x9e,
	0xa9, 0x3e, 0x97, 0x49, 0x01, 0xa5, 0xd3, 0x58, 0xa5, 0xb0, 0xf6, 0xb9, 0x8b, 0x50, 0x8a, 0x41,
	0x98, 0x74, 0x96, 0xc9, 0x28, 0x50, 0xbe, 0x4d, 0x39, 0x7c, 0x63, 0x93, 0xe8, 0xd8, 0x34, 0x1d,
	0xbb, 0x86, 0x0a, 0x71, 0x5f, 0xa2, 0x18, 0x33, 0x7e, 0x8c, 0x52, 0x1c, 0x06, 0xa6, 0x18, 0x57,
	0xd0, 0xb9, 0x38, 0x1a, 0xc0, 0x52, 0xf6, 0x1a, 0x9e, 0xc3, 0x4b, 0x51, 0x78, 0xde, 0x0f, 0xe7,
	0xf3, 0x59, 0x9e, 0xc1, 0x3a, 0xfe, 0xec, 0x9d, 0xfc, 0x4d, 0x74, 0x35, 0x02, 0x77, 0xa9, 0x30,
	0xc4, 0x33, 0x31, 0x1f, 0xf2, 0x13, 0x3a, 0xeb, 0x27, 0x54, 0x4a, 0x20, 0x74, 0x2e, 0x68, 0x4e,
	0xb4, 0x4e, 0x76, 0x5f, 0xdb, 0xb3, 0x55, 0x30, 0xc4, 0x82, 0x7f, 0xb0, 0xc4, 0x07, 0x2f, 0xd0,
	0x54, 0xba, 0x02, 0x99, 0x34, 0x18, 0x39, 0xbd, 0x1d, 0xa9, 0xe9, 0xcf, 0xf8, 0xdf, 0x0c, 0x99,
	0x82, 0x82, 0x4a, 0xb3, 0x3b, 0xbe, 0xeb, 0xc5, 0x5a, 0xd7, 0xe9, 0x70, 0x8f, 0xc7, 0x9d, 0x08,
	0xfe, 0x75, 0x8a, 0x79, 0x50, 0xf2, 0x28, 0x53, 0xd5, 0x5b, 0xd4, 0xac, 0xd4, 0xc3, 0x5a, 0xcf,
	0xb6, 0xe8, 0x01, 0x1d, 0xe8, 0xa0, 0xd6, 0xd4, 0x7a, 0x60, 0xcd, 0x3a, 0xbb, 0x05, 0x3c, 0x16,
	0x5f, 0x8b, 0xc2, 0x87, 0x58, 0xc1, 0x93, 0x50, 0x83, 0x82, 0x02, 0x33, 0x6e, 0x50, 0xdb, 0xb6,
	0xb8, 0x0f, 0xf0, 0x99, 0xa9, 0xdb, 0x02, 0x20, 0xf7, 0xbf, 0xc0, 0xfa, 0xbd, 0xf2, 0x88, 0xe9,
	0x7a, 0x08, 0xe2, 0x95, 0x42, 0xd2, 0x05, 0xf6, 0x42, 0x2e, 0xb8, 0x09, 0xda, 0xcb, 0xba, 0xf3,
	0x83, 0x0c, 0x3a, 0x13, 0x97, 0x14, 0xe6, 0x25, 0x74, 0x44, 0xba, 0x08, 0x25, 0xfd, 0x0d, 0x74,
	0x55, 0x80, 0xc3, 0x4e, 0x91, 0xd5, 0x16, 0x54, 0x76, 0xaf, 0xa0, 0x6b, 0x02, 0x24, 0xb7, 0xe3,
	0x88, 0xd3, 0x90, 0x0d, 0x5f, 0x16, 0x60, 0x95, 0x21, 0xa8, 0x3e, 0x57, 0x71, 0x86, 0x5c, 0xa4,
	0x12, 0xa0, 0xec, 0x29, 0xad, 0x87, 0x5a, 0xd3, 0x36, 0xcc, 0x43, 0x7c, 0x26, 0xff, 0x59, 0x24,
	0x09, 0xd0, 0xd6, 0x35, 0x53, 0x75, 0xf0, 0xce, 0xe6, 0x67, 0xd1, 0x9d, 0x23, 0xc9, 0xad, 0x1e,
	0x6e, 0x18, 0xe6, 0x53, 0x55, 0xb3, 0xf1, 0xb9, 0xfc, 0x1b, 0xe8, 0xb5, 0xa3, 0xe9, 0x7a, 0x13,
	0xce, 0xe7, 0x6f, 0xa1, 0x57, 0x44, 0x1b, 0x57, 0xcd, 0xe7, 0xaa, 0xb9, 0xa1, 0x68, 0x9d, 0xbe,
	0xa9, 0xe2, 0x5b, 0x09, 0x2c, 0xaa, 0x1a, 0x76, 0x55, 0x55, 0x5b, 0xc0, 0xa2, 0xdb, 0x77, 0x7e,
	0x7d, 0x34, 0x20, 0x2a, 0xfe, 0xca, 0x28, 0x46, 0x54, 0x2e, 0xc4, 0x27, 0xaa, 0x6b, 0xe8, 0x92,
	0x00, 0x87, 0x14, 0x7d, 0xf3, 0x20, 0xa7, 0x1b, 0x42, 0x2a, 0x04, 0x63, 0x47, 0x79, 0x89, 0xbf,
	0x3a, 0x06, 0xcc, 0xbd, 0x2e, 0x40, 0xaa, 0xb8, 0xd1, 0x00, 0xff, 0xa8, 0x0b, 0xb2, 0xba, 0x26,
	0xc0, 0xe3, 0xfc, 0x01, 0xb4, 0x3f, 0xef, 0xc2, 0xc6, 0xaf, 0x0a, 0xd0, 0xf6, 0xd4, 0xa7, 0x7d,
	0x9d, 0xec, 0xfb, 0xc7, 0x5d, 0x70, 0x19, 0x92, 0x88, 0x98, 0xa6, 0x6b, 0x16, 0x28, 0xd1, 0xbc,
	0x65, 0xe3, 0xdf, 0xee, 0x0f, 0x80, 0x58, 0xd2, 0x5b, 0xf8, 0x77, 0x06, 0x41, 0x5c, 0x30, 0x5b,
	0xf8, 0x77, 0x07, 0x41, 0x5c, 0xb4, 0x0f, 0xf0, 0xb7, 0x07, 0x41, 0x5c, 0x02, 0xc4, 0xdf, 0x1b,
	0x04, 0x71, 0x19, 0x10, 0x7f, 0x7f, 0x10, 0xc4, 0x15, 0x40, 0xfc, 0x78, 0x10, 0xc4, 0xbb, 0x80,
	0xf8, 0x9d, 0x41, 0x10, 0xef, 0x01, 0xe2, 0x1f, 0xf4, 0x41, 0x73, 0x6f, 0x1c, 0xc5, 0xf0, 0x39,
	0xc0, 0xfc, 0xc3, 0x81, 0x30, 0xe7, 0x01, 0xf3, 0xbb, 0x03, 0x61, 0x96, 0x00, 0xf3, 0x7b, 0x03,
	0x61, 0x2e, 0x00, 0xe6, 0xf7, 0x07, 0xc2, 0x24, 0xe2, 0xf9, 0xa3, 0x81, 0x30, 0x89, 0x7c, 0xfe,
	0x78, 0x20, 0x4c, 0x22, 0xa0, 0x1f, 0xf4, 0xef, 0x7c, 0x3d, 0x83, 0x70, 0xb8, 0xd3, 0x40, 0x6e,
	0x96, 0x89, 0xfb, 0x0f, 0x60, 0x87, 0x61, 0xef, 0x14, 0x74, 0x97, 0xab, 0x87, 0xe5, 0x16, 0x58,
	0x11, 0xbb, 0x57, 0x1a, 0x87, 0xe7, 0xdc, 0xdd, 0x65, 0x37, 0x38, 0x62, 0x30, 0x76, 0x68, 0x4b,
	0x01, 0xbc, 0x65, 0xd8, 0xa7, 0xc4, 0x79, 0x9e, 0xac, 0x00, 0x8b, 0xec, 0xb9, 0xfc, 0x44, 0xd1,
	0x5b, 0x10, 0x95, 0x5b, 0x38, 0x97, 0xbf, 0x8d, 0x5e, 0x15, 0x60, 0x35, 0x20, 0x5e, 0x1a, 0x7d,
	0xdb, 0x71, 0x7a, 0x23, 0x11, 0xa7, 0x17, 0x41, 0x65, 0x86, 0x8d, 0x47, 0x23, 0x1e, 0x9f, 0x61,
	0x6e, 0xe9, 0xbb, 0xa6, 0xd1, 0x86, 0xd2, 0xde, 0xc2, 0xad, 0x88, 0xc7, 0x67, 0x28, 0x8f, 0x14,
	0x8d, 0xc4, 0xdb, 0x86, 0x41, 0xf7, 0x8a, 0xd5, 0x3b, 0xff, 0x1e, 0x8c, 0x61, 0x6e, 0x17, 0x2b,
	0xe2, 0x18, 0x23, 0xfd, 0xad, 0x98, 0x18, 0xe6, 0xe1, 0xf8, 0x62, 0x58, 0x38, 0x56, 0x78, 0x48,
	0x64, 0x67, 0x16, 0x78, 0xe9, 0xc7, 0xaa, 0x5d, 0xb6, 0x2c, 0xad, 0xad, 0x53, 0xd9, 0x84, 0x19,
	0xe6, 0xe1, 0x6f, 0xe9, 0xab, 0xaa, 0xfd, 0x42, 0x55, 0x75, 0xe2, 0xe3, 0x2d, 0x90, 0x93, 0x18,
	0x95, 0x60, 0xf8, 0xd8, 0x91, 0x8d, 0xe8, 0x84, 0x87, 0x5a, 0x96, 0x1f, 0x19, 0x3a, 0x08, 0x4a,
	0x8c, 0xb1, 0x4a, 0x31, 0x46, 0x12, 0x3e, 0x47, 0x69, 0x78, 0xf1, 0x6b, 0x34, 0x01, 0x75, 0x35,
	0x88, 0x3a, 0x96, 0xb8, 0xb2, 0xd5, 0x43, 0x15, 0x8f, 0x47, 0x14, 0xcd, 0x8f, 0xe1, 0xd0, 0x41,
	0x11, 0xed, 0xf1, 0xb0, 0x82, 0x8a, 0x3b, 0x71, 0xe7, 0x3f, 0x83, 0xc6, 0x47, 0xbb, 0x86, 0xe4,
	0x6f, 0x29, 0x08, 0x7a, 0x89, 0x20, 0xe8, 0x30, 0x6d, 0x06, 0xf4, 0x7e, 0xb3, 0x17, 0x2d, 0x44,
	0xda, 0x47, 0x61, 0x5a, 0xdc, 0xc8, 0xd2, 0x11, 0x05, 0x63, 0x98, 0x44, 0x70, 0xb5, 0xbe, 0x0d,
	0x85, 0x10, 0x49, 0x5b, 0xc2, 0x0a, 0xc6, 0xa9, 0x91, 0xae, 0x03, 0xe4, 0x35, 0x3a, 0x61, 0x4f,
	0x36, 0x3f, 0x87, 0x3e, 0x97, 0xbc, 0xb8, 0x90, 0x83, 0xc8, 0x45, 0x18, 0xea, 0x91, 0xf5, 0x2c,
	0x77, 0x24, 0xff, 0x1a, 0xba, 0x19, 0x83, 0xe5, 0x26, 0x5e, 0x3c, 0xd1, 0x30, 0xc9, 0xbe, 0xe9,
	0x85, 0xf0, 0x18, 0x64, 0xd7, 0x0c, 0xc6, 0xf2, 0xef, 0xa0, 0x37, 0x05, 0xdf, 0xdc, 0xf5, 0x32,
	0x61, 0x43, 0x27, 0x96, 0xde, 0x02, 0x06, 0xc8, 0x15, 0xf2, 0x47, 0x0d, 0x37, 0x54, 0x95, 0xdb,
	0xfc, 0x78, 0xfe, 0x5d, 0xf4, 0xd6, 0xb1, 0x08, 0xb8, 0x1a, 0x72, 0xe7, 0xbb, 0x67, 0xd1, 0xf5,
	0x23, 0xdb, 0x59, 0xc4, 0x37, 0x0a, 0x1b, 0x5a, 0xa0, 0x0a, 0x09, 0xe0, 0x79, 0x76, 0x79, 0x58,
	0x04, 0x2e, 0x31, 0xc7, 0x2b, 0x02, 0x2f, 0xb0, 0x8b, 0xfc, 0x22, 0xf0, 0x22, 0x48, 0x3a, 0x01,
	0xbc, 0x04, 0x62, 0x4d, 0x00, 0x2f, 0x83, 0x3c, 0x13, 0xc0, 0x2b, 0x20, 0xc1, 0x04, 0xf0, 0x5d,
	0x90, 0x5f, 0x02, 0xf8, 0x1e, 0x48, 0xe7, 0x12, 0x2a, 0xb8, 0xe0, 0x0f, 0xf6, 0xcb, 0xdb, 0xbb,
	0x7b, 0x95, 0x75, 0xf9, 0x51, 0xa5, 0xde, 0x00, 0xa6, 0xa1, 0x04, 0xe8, 0x3c, 0x9e, 0x48, 0x80,
	0x96, 0xf0, 0x64, 0x02, 0x74, 0x01, 0x4f, 0x25, 0x40, 0x17, 0xf1, 0x74, 0x02, 0x74, 0x09, 0xcf,
	0x24, 0x40, 0x97, 0x31, 0x4e, 0x80, 0xae, 0xe0, 0x53, 0x09, 0xd0, 0xbb, 0x38, 0x9f, 0x00, 0xbd,
	0x87, 0x4f, 0x07, 0x58, 0x19, 0xe2, 0xc6, 0x1c, 0x14, 0x21, 0x09, 0xe0, 0x79, 0xa8, 0x3d, 0x12,
	0xc0, 0x25, 0x28, 0x35, 0x12, 0xc0, 0x0b, 0x50, 0x58, 0x24, 0x80, 0x17, 0x71, 0x21, 0x7e, 0xe1,
	0x95, 0x32, 0x15, 0xe3, 0x85, 0x04, 0xe8, 0x3c, 0x2e, 0x26, 0x40, 0x4b, 0xf8, 0x62, 0x02, 0x74,
	0x01, 0x5f, 0x4a, 0x80, 0x2e, 0xe2, 0xcb, 0x09, 0xd0, 0x25, 0x7c, 0x25, 0x01, 0xba, 0x8c, 0xaf,
	0x26, 0x40, 0x57, 0xf0, 0xb5, 0x04, 0xe8, 0x5d, 0x7c, 0x3d, 0x01, 0x7a, 0x0f, 0x4b, 0xf1, 0xac,
	0x64, 0xdc, 0x98, 0xc3, 0x37, 0x92, 0xc0, 0xf3, 0xf8, 0x95, 0x24, 0x70, 0x09, 0xbf, 0x9a, 0x04,
	0x5e, 0xc0, 0x9f, 0x4d, 0x02, 0x2f, 0xe2, 0x9b, 0xe4, 0xc5, 0x8f, 0x0b, 0x26, 0x0f, 0x0f, 0xd6,
	0xf6, 0x77, 0xd9, 0x03, 0x84, 0x5b, 0x24, 0xce, 0x45, 0x40, 0xcc, 0x8e, 0xf1, 0x6d, 0x92, 0x81,
	0xc6, 0xce, 0xa3, 0xb7, 0xa4, 0xf0, 0x1d, 0x12, 0xab, 0x05, 0x93, 0x19, 0xc6, 0x6b, 0xe4, 0x41,
	0x91, 0x8b, 0x51, 0x79, 0x58, 0xa9, 0x36, 0xe8, 0xca, 0xe6, 0xf0, 0xe7, 0x04, 0x90, 0x79, 0xfc,
	0xba, 0x00, 0x52, 0xc2, 0xb3, 0x02, 0xc8, 0x02, 0x7e, 0x43, 0x00, 0x59, 0xc4, 0x73, 0x02, 0xc8,
	0x12, 0x9e, 0x17, 0x40, 0x96, 0x71, 0x49, 0x00, 0x59, 0xc1, 0x0b, 0x02, 0xc8, 0x5d, 0xbc, 0x28,
	0x80, 0xdc, 0xc3, 0x4b, 0x01, 0xee, 0xfb, 0x76, 0x3a, 0x87, 0x97, 0x45, 0xa0, 0x79, 0xbc, 0x22,
	0x02, 0x95, 0xf0, 0x5d, 0x11, 0x68, 0x01, 0xdf, 0x13, 0x81, 0x16, 0xf1, 0x7d, 0x11, 0x68, 0x09,
	0xbf, 0x29, 0x02, 0x2d, 0xe3, 0xb7, 0x44, 0xa0, 0x15, 0xfc, 0xb6, 0x08, 0x74, 0x17, 0x7f, 0x5e,
	0x04, 0xba, 0x87, 0xdf, 0x11, 0x80, 0x4a, 0x73, 0xf8, 0x5d, 0x11, 0x68, 0x1e, 0x97, 0x45, 0xa0,
	0x12, 0x5e, 0x15, 0x81, 0x16, 0xf0, 0x9a, 0x08, 0xb4, 0x88, 0xd7, 0x45, 0xa0, 0x25, 0x5c, 0x11,
	0x81, 0x96, 0xf1, 0x86, 0x08, 0xb4, 0x82, 0x37, 0x45, 0xa0, 0xbb, 0xf8, 0x81, 0x08, 0x74, 0x0f,
	0x6f, 0x09, 0x40, 0x0b, 0x73, 0xf8, 0x3d, 0x11, 0x68, 0x1e, 0xbf, 0x2f, 0x02, 0x95, 0xf0, 0xb6,
	0x08, 0xb4, 0x80, 0x77, 0x44, 0xa0, 0x45, 0x5c, 0x15, 0x81, 0x96, 0x70, 0x4d, 0x04, 0x5a, 0xc6,
	0xbb, 0x22, 0xd0, 0x0a, 0xfe, 0x40, 0x04, 0xba, 0x8b, 0xf7, 0x44, 0xa0, 0x7b, 0xb8, 0x2e, 0x00,
	0x2d, 0xce, 0xe1, 0x86, 0x08, 0x34, 0x8f, 0xf7, 0x45, 0xa0, 0x12, 0x7e, 0x28, 0x02, 0x2d, 0xe0,
	0x47, 0xe4, 0x6d, 0xb5, 0x0b, 0xaa, 0xd7, 0xb6, 0x6b, 0xe0, 0x94, 0x7e, 0x2e, 0x3a, 0x38, 0x8f,
	0x1f, 0x47, 0x07, 0x4b, 0xf8, 0xc3, 0xe8, 0xe0, 0x02, 0xfe, 0x42, 0x74, 0x70, 0x11, 0xff, 0x7c,
	0x74, 0x70, 0x09, 0x7f, 0x31, 0x3a, 0xb8, 0x8c, 0xbf, 0x14, 0x1d, 0x5c, 0xc1, 0xf2, 0x6a, 0xee,
	0x41, 0xea, 0xab, 0xa9, 0xcf, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x81, 0xf7, 0x2b,
	0xfc, 0x5c, 0x00, 0x00,
}
