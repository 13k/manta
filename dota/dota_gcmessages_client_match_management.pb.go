// Code generated by protoc-gen-go.
// source: dota_gcmessages_client_match_management.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EStartFindingMatchResult int32

const (
	EStartFindingMatchResult_k_EStartFindingMatchResult_Invalid                               EStartFindingMatchResult = 0
	EStartFindingMatchResult_k_EStartFindingMatchResult_OK                                    EStartFindingMatchResult = 1
	EStartFindingMatchResult_k_EStartFindingMatchResult_AlreadySearching                      EStartFindingMatchResult = 2
	EStartFindingMatchResult_k_EStartFindingMatchResult_FailGeneric                           EStartFindingMatchResult = 100
	EStartFindingMatchResult_k_EStartFindingMatchResult_FailedIgnore                          EStartFindingMatchResult = 101
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingDisabled                   EStartFindingMatchResult = 102
	EStartFindingMatchResult_k_EStartFindingMatchResult_RegionOffline                         EStartFindingMatchResult = 103
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingCooldown                   EStartFindingMatchResult = 104
	EStartFindingMatchResult_k_EStartFindingMatchResult_ClientOutOfDate                       EStartFindingMatchResult = 105
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNoLowPriority              EStartFindingMatchResult = 106
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNotUnlocked                EStartFindingMatchResult = 107
	EStartFindingMatchResult_k_EStartFindingMatchResult_GameModeNotUnlocked                   EStartFindingMatchResult = 108
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData         EStartFindingMatchResult = 109
	EStartFindingMatchResult_k_EStartFindingMatchResult_MissingInitialSkill                   EStartFindingMatchResult = 110
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge         EStartFindingMatchResult = 111
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberAlreadyInLobby                  EStartFindingMatchResult = 112
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberNotVACVerified                  EStartFindingMatchResult = 113
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyBadPartySize            EStartFindingMatchResult = 114
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall       EStartFindingMatchResult = 115
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge EStartFindingMatchResult = 116
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge       EStartFindingMatchResult = 117
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberMissingEventOwnership           EStartFindingMatchResult = 118
)

var EStartFindingMatchResult_name = map[int32]string{
	0:   "k_EStartFindingMatchResult_Invalid",
	1:   "k_EStartFindingMatchResult_OK",
	2:   "k_EStartFindingMatchResult_AlreadySearching",
	100: "k_EStartFindingMatchResult_FailGeneric",
	101: "k_EStartFindingMatchResult_FailedIgnore",
	102: "k_EStartFindingMatchResult_MatchmakingDisabled",
	103: "k_EStartFindingMatchResult_RegionOffline",
	104: "k_EStartFindingMatchResult_MatchmakingCooldown",
	105: "k_EStartFindingMatchResult_ClientOutOfDate",
	106: "k_EStartFindingMatchResult_CompetitiveNoLowPriority",
	107: "k_EStartFindingMatchResult_CompetitiveNotUnlocked",
	108: "k_EStartFindingMatchResult_GameModeNotUnlocked",
	109: "k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData",
	110: "k_EStartFindingMatchResult_MissingInitialSkill",
	111: "k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge",
	112: "k_EStartFindingMatchResult_MemberAlreadyInLobby",
	113: "k_EStartFindingMatchResult_MemberNotVACVerified",
	114: "k_EStartFindingMatchResult_WeekendTourneyBadPartySize",
	115: "k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall",
	116: "k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge",
	117: "k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge",
	118: "k_EStartFindingMatchResult_MemberMissingEventOwnership",
}
var EStartFindingMatchResult_value = map[string]int32{
	"k_EStartFindingMatchResult_Invalid":                               0,
	"k_EStartFindingMatchResult_OK":                                    1,
	"k_EStartFindingMatchResult_AlreadySearching":                      2,
	"k_EStartFindingMatchResult_FailGeneric":                           100,
	"k_EStartFindingMatchResult_FailedIgnore":                          101,
	"k_EStartFindingMatchResult_MatchmakingDisabled":                   102,
	"k_EStartFindingMatchResult_RegionOffline":                         103,
	"k_EStartFindingMatchResult_MatchmakingCooldown":                   104,
	"k_EStartFindingMatchResult_ClientOutOfDate":                       105,
	"k_EStartFindingMatchResult_CompetitiveNoLowPriority":              106,
	"k_EStartFindingMatchResult_CompetitiveNotUnlocked":                107,
	"k_EStartFindingMatchResult_GameModeNotUnlocked":                   108,
	"k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData":         109,
	"k_EStartFindingMatchResult_MissingInitialSkill":                   110,
	"k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge":         111,
	"k_EStartFindingMatchResult_MemberAlreadyInLobby":                  112,
	"k_EStartFindingMatchResult_MemberNotVACVerified":                  113,
	"k_EStartFindingMatchResult_WeekendTourneyBadPartySize":            114,
	"k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall":       115,
	"k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge": 116,
	"k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge":       117,
	"k_EStartFindingMatchResult_MemberMissingEventOwnership":           118,
}

func (x EStartFindingMatchResult) Enum() *EStartFindingMatchResult {
	p := new(EStartFindingMatchResult)
	*p = x
	return p
}
func (x EStartFindingMatchResult) String() string {
	return proto.EnumName(EStartFindingMatchResult_name, int32(x))
}
func (x *EStartFindingMatchResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EStartFindingMatchResult_value, data, "EStartFindingMatchResult")
	if err != nil {
		return err
	}
	*x = EStartFindingMatchResult(value)
	return nil
}
func (EStartFindingMatchResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type CMsgStartFindingMatch struct {
	Key               *string             `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Matchgroups       *uint32             `protobuf:"varint,2,opt,name=matchgroups,def=4294967295" json:"matchgroups,omitempty"`
	ClientVersion     *uint32             `protobuf:"varint,3,opt,name=client_version" json:"client_version,omitempty"`
	GameModes         *uint32             `protobuf:"varint,4,opt,name=game_modes,def=4294967295" json:"game_modes,omitempty"`
	BotDifficulty     *DOTABotDifficulty  `protobuf:"varint,5,opt,name=bot_difficulty,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty,omitempty"`
	MatchType         *MatchType          `protobuf:"varint,6,opt,name=match_type,enum=dota.MatchType,def=0" json:"match_type,omitempty"`
	Matchlanguages    *uint32             `protobuf:"varint,7,opt,name=matchlanguages,def=4294967295" json:"matchlanguages,omitempty"`
	MapPreference     *uint32             `protobuf:"varint,9,opt,name=map_preference" json:"map_preference,omitempty"`
	TeamId            *uint32             `protobuf:"varint,8,opt,name=team_id" json:"team_id,omitempty"`
	GameLanguageEnum  *MatchLanguages     `protobuf:"varint,10,opt,name=game_language_enum,enum=dota.MatchLanguages,def=0" json:"game_language_enum,omitempty"`
	GameLanguageName  *string             `protobuf:"bytes,11,opt,name=game_language_name" json:"game_language_name,omitempty"`
	PingData          *CMsgClientPingData `protobuf:"bytes,12,opt,name=ping_data" json:"ping_data,omitempty"`
	RegionSelectFlags *uint32             `protobuf:"varint,13,opt,name=region_select_flags" json:"region_select_flags,omitempty"`
	XXX_unrecognized  []byte              `json:"-"`
}

func (m *CMsgStartFindingMatch) Reset()                    { *m = CMsgStartFindingMatch{} }
func (m *CMsgStartFindingMatch) String() string            { return proto.CompactTextString(m) }
func (*CMsgStartFindingMatch) ProtoMessage()               {}
func (*CMsgStartFindingMatch) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

const Default_CMsgStartFindingMatch_Matchgroups uint32 = 4294967295
const Default_CMsgStartFindingMatch_GameModes uint32 = 4294967295
const Default_CMsgStartFindingMatch_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CMsgStartFindingMatch_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CMsgStartFindingMatch_Matchlanguages uint32 = 4294967295
const Default_CMsgStartFindingMatch_GameLanguageEnum MatchLanguages = MatchLanguages_MATCH_LANGUAGE_INVALID

func (m *CMsgStartFindingMatch) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CMsgStartFindingMatch) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return Default_CMsgStartFindingMatch_Matchgroups
}

func (m *CMsgStartFindingMatch) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return Default_CMsgStartFindingMatch_GameModes
}

func (m *CMsgStartFindingMatch) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CMsgStartFindingMatch_BotDifficulty
}

func (m *CMsgStartFindingMatch) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CMsgStartFindingMatch_MatchType
}

func (m *CMsgStartFindingMatch) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return Default_CMsgStartFindingMatch_Matchlanguages
}

func (m *CMsgStartFindingMatch) GetMapPreference() uint32 {
	if m != nil && m.MapPreference != nil {
		return *m.MapPreference
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetGameLanguageEnum() MatchLanguages {
	if m != nil && m.GameLanguageEnum != nil {
		return *m.GameLanguageEnum
	}
	return Default_CMsgStartFindingMatch_GameLanguageEnum
}

func (m *CMsgStartFindingMatch) GetGameLanguageName() string {
	if m != nil && m.GameLanguageName != nil {
		return *m.GameLanguageName
	}
	return ""
}

func (m *CMsgStartFindingMatch) GetPingData() *CMsgClientPingData {
	if m != nil {
		return m.PingData
	}
	return nil
}

func (m *CMsgStartFindingMatch) GetRegionSelectFlags() uint32 {
	if m != nil && m.RegionSelectFlags != nil {
		return *m.RegionSelectFlags
	}
	return 0
}

type CMsgStartFindingMatchResult struct {
	LegacyGenericEresult    *uint32                   `protobuf:"varint,1,opt,name=legacy_generic_eresult,def=2" json:"legacy_generic_eresult,omitempty"`
	Result                  *EStartFindingMatchResult `protobuf:"varint,2,opt,name=result,enum=dota.EStartFindingMatchResult,def=0" json:"result,omitempty"`
	ErrorToken              *string                   `protobuf:"bytes,3,opt,name=error_token" json:"error_token,omitempty"`
	DebugMessage            *string                   `protobuf:"bytes,4,opt,name=debug_message" json:"debug_message,omitempty"`
	ResponsiblePartyMembers []uint64                  `protobuf:"fixed64,5,rep,name=responsible_party_members" json:"responsible_party_members,omitempty"`
	XXX_unrecognized        []byte                    `json:"-"`
}

func (m *CMsgStartFindingMatchResult) Reset()                    { *m = CMsgStartFindingMatchResult{} }
func (m *CMsgStartFindingMatchResult) String() string            { return proto.CompactTextString(m) }
func (*CMsgStartFindingMatchResult) ProtoMessage()               {}
func (*CMsgStartFindingMatchResult) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

const Default_CMsgStartFindingMatchResult_LegacyGenericEresult uint32 = 2
const Default_CMsgStartFindingMatchResult_Result EStartFindingMatchResult = EStartFindingMatchResult_k_EStartFindingMatchResult_Invalid

func (m *CMsgStartFindingMatchResult) GetLegacyGenericEresult() uint32 {
	if m != nil && m.LegacyGenericEresult != nil {
		return *m.LegacyGenericEresult
	}
	return Default_CMsgStartFindingMatchResult_LegacyGenericEresult
}

func (m *CMsgStartFindingMatchResult) GetResult() EStartFindingMatchResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgStartFindingMatchResult_Result
}

func (m *CMsgStartFindingMatchResult) GetErrorToken() string {
	if m != nil && m.ErrorToken != nil {
		return *m.ErrorToken
	}
	return ""
}

func (m *CMsgStartFindingMatchResult) GetDebugMessage() string {
	if m != nil && m.DebugMessage != nil {
		return *m.DebugMessage
	}
	return ""
}

func (m *CMsgStartFindingMatchResult) GetResponsiblePartyMembers() []uint64 {
	if m != nil {
		return m.ResponsiblePartyMembers
	}
	return nil
}

type CMsgStopFindingMatch struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgStopFindingMatch) Reset()                    { *m = CMsgStopFindingMatch{} }
func (m *CMsgStopFindingMatch) String() string            { return proto.CompactTextString(m) }
func (*CMsgStopFindingMatch) ProtoMessage()               {}
func (*CMsgStopFindingMatch) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

type CMsgReadyUp struct {
	State            *DOTALobbyReadyState      `protobuf:"varint,1,opt,name=state,enum=dota.DOTALobbyReadyState,def=0" json:"state,omitempty"`
	ReadyUpKey       *uint64                   `protobuf:"fixed64,2,opt,name=ready_up_key" json:"ready_up_key,omitempty"`
	HardwareSpecs    *CDOTAClientHardwareSpecs `protobuf:"bytes,3,opt,name=hardware_specs" json:"hardware_specs,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgReadyUp) Reset()                    { *m = CMsgReadyUp{} }
func (m *CMsgReadyUp) String() string            { return proto.CompactTextString(m) }
func (*CMsgReadyUp) ProtoMessage()               {}
func (*CMsgReadyUp) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

const Default_CMsgReadyUp_State DOTALobbyReadyState = DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED

func (m *CMsgReadyUp) GetState() DOTALobbyReadyState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgReadyUp_State
}

func (m *CMsgReadyUp) GetReadyUpKey() uint64 {
	if m != nil && m.ReadyUpKey != nil {
		return *m.ReadyUpKey
	}
	return 0
}

func (m *CMsgReadyUp) GetHardwareSpecs() *CDOTAClientHardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return nil
}

type CMsgReadyUpStatus struct {
	LobbyId          *uint64  `protobuf:"fixed64,1,opt,name=lobby_id" json:"lobby_id,omitempty"`
	AcceptedIds      []uint32 `protobuf:"varint,2,rep,name=accepted_ids" json:"accepted_ids,omitempty"`
	DeclinedIds      []uint32 `protobuf:"varint,3,rep,name=declined_ids" json:"declined_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgReadyUpStatus) Reset()                    { *m = CMsgReadyUpStatus{} }
func (m *CMsgReadyUpStatus) String() string            { return proto.CompactTextString(m) }
func (*CMsgReadyUpStatus) ProtoMessage()               {}
func (*CMsgReadyUpStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

func (m *CMsgReadyUpStatus) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgReadyUpStatus) GetAcceptedIds() []uint32 {
	if m != nil {
		return m.AcceptedIds
	}
	return nil
}

func (m *CMsgReadyUpStatus) GetDeclinedIds() []uint32 {
	if m != nil {
		return m.DeclinedIds
	}
	return nil
}

type CMsgAbandonCurrentGame struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgAbandonCurrentGame) Reset()                    { *m = CMsgAbandonCurrentGame{} }
func (m *CMsgAbandonCurrentGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgAbandonCurrentGame) ProtoMessage()               {}
func (*CMsgAbandonCurrentGame) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

type CMsgPracticeLobbySetDetails struct {
	LobbyId                          *uint64                `protobuf:"varint,1,opt,name=lobby_id" json:"lobby_id,omitempty"`
	GameName                         *string                `protobuf:"bytes,2,opt,name=game_name" json:"game_name,omitempty"`
	TeamDetails                      []*CLobbyTeamDetails   `protobuf:"bytes,3,rep,name=team_details" json:"team_details,omitempty"`
	ServerRegion                     *uint32                `protobuf:"varint,4,opt,name=server_region" json:"server_region,omitempty"`
	GameMode                         *uint32                `protobuf:"varint,5,opt,name=game_mode" json:"game_mode,omitempty"`
	CmPick                           *DOTA_CM_PICK          `protobuf:"varint,6,opt,name=cm_pick,enum=dota.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	BotDifficulty                    *DOTABotDifficulty     `protobuf:"varint,9,opt,name=bot_difficulty,enum=dota.DOTABotDifficulty,def=2" json:"bot_difficulty,omitempty"`
	AllowCheats                      *bool                  `protobuf:"varint,10,opt,name=allow_cheats" json:"allow_cheats,omitempty"`
	FillWithBots                     *bool                  `protobuf:"varint,11,opt,name=fill_with_bots" json:"fill_with_bots,omitempty"`
	IntroMode                        *bool                  `protobuf:"varint,12,opt,name=intro_mode" json:"intro_mode,omitempty"`
	AllowSpectating                  *bool                  `protobuf:"varint,13,opt,name=allow_spectating" json:"allow_spectating,omitempty"`
	GameVersion                      *DOTAGameVersion       `protobuf:"varint,14,opt,name=game_version,enum=dota.DOTAGameVersion,def=0" json:"game_version,omitempty"`
	PassKey                          *string                `protobuf:"bytes,15,opt,name=pass_key" json:"pass_key,omitempty"`
	Leagueid                         *uint32                `protobuf:"varint,16,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant              *uint32                `protobuf:"varint,17,opt,name=penalty_level_radiant" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire                 *uint32                `protobuf:"varint,18,opt,name=penalty_level_dire" json:"penalty_level_dire,omitempty"`
	LoadGameId                       *uint32                `protobuf:"varint,19,opt,name=load_game_id" json:"load_game_id,omitempty"`
	SeriesType                       *uint32                `protobuf:"varint,20,opt,name=series_type" json:"series_type,omitempty"`
	RadiantSeriesWins                *uint32                `protobuf:"varint,21,opt,name=radiant_series_wins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins                   *uint32                `protobuf:"varint,22,opt,name=dire_series_wins" json:"dire_series_wins,omitempty"`
	Allchat                          *bool                  `protobuf:"varint,23,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay                      *LobbyDotaTVDelay      `protobuf:"varint,24,opt,name=dota_tv_delay,enum=dota.LobbyDotaTVDelay,def=1" json:"dota_tv_delay,omitempty"`
	Lan                              *bool                  `protobuf:"varint,25,opt,name=lan" json:"lan,omitempty"`
	CustomGameMode                   *string                `protobuf:"bytes,26,opt,name=custom_game_mode" json:"custom_game_mode,omitempty"`
	CustomMapName                    *string                `protobuf:"bytes,27,opt,name=custom_map_name" json:"custom_map_name,omitempty"`
	CustomDifficulty                 *uint32                `protobuf:"varint,28,opt,name=custom_difficulty" json:"custom_difficulty,omitempty"`
	CustomGameId                     *uint64                `protobuf:"varint,29,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	CustomMinPlayers                 *uint32                `protobuf:"varint,30,opt,name=custom_min_players" json:"custom_min_players,omitempty"`
	CustomMaxPlayers                 *uint32                `protobuf:"varint,31,opt,name=custom_max_players" json:"custom_max_players,omitempty"`
	LanHostPingToServerRegion        *uint32                `protobuf:"varint,32,opt,name=lan_host_ping_to_server_region" json:"lan_host_ping_to_server_region,omitempty"`
	Visibility                       *DOTALobbyVisibility   `protobuf:"varint,33,opt,name=visibility,enum=dota.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc                    *uint64                `protobuf:"fixed64,34,opt,name=custom_game_crc" json:"custom_game_crc,omitempty"`
	LeagueSeriesId                   *uint32                `protobuf:"varint,35,opt,name=league_series_id" json:"league_series_id,omitempty"`
	LeagueGameId                     *uint32                `protobuf:"varint,36,opt,name=league_game_id" json:"league_game_id,omitempty"`
	CustomGameTimestamp              *uint32                `protobuf:"fixed32,37,opt,name=custom_game_timestamp" json:"custom_game_timestamp,omitempty"`
	PreviousMatchOverride            *uint64                `protobuf:"varint,38,opt,name=previous_match_override" json:"previous_match_override,omitempty"`
	LeagueSelectionPriorityTeam      *uint32                `protobuf:"varint,39,opt,name=league_selection_priority_team" json:"league_selection_priority_team,omitempty"`
	LeagueSelectionPriorityChoice    *SelectionPriorityType `protobuf:"varint,40,opt,name=league_selection_priority_choice,enum=dota.SelectionPriorityType,def=0" json:"league_selection_priority_choice,omitempty"`
	LeagueNonSelectionPriorityChoice *SelectionPriorityType `protobuf:"varint,41,opt,name=league_non_selection_priority_choice,enum=dota.SelectionPriorityType,def=0" json:"league_non_selection_priority_choice,omitempty"`
	PauseSetting                     *LobbyDotaPauseSetting `protobuf:"varint,42,opt,name=pause_setting,enum=dota.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	XXX_unrecognized                 []byte                 `json:"-"`
}

func (m *CMsgPracticeLobbySetDetails) Reset()                    { *m = CMsgPracticeLobbySetDetails{} }
func (m *CMsgPracticeLobbySetDetails) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbySetDetails) ProtoMessage()               {}
func (*CMsgPracticeLobbySetDetails) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

const Default_CMsgPracticeLobbySetDetails_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CMsgPracticeLobbySetDetails_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_MEDIUM
const Default_CMsgPracticeLobbySetDetails_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CMsgPracticeLobbySetDetails_Allchat bool = false
const Default_CMsgPracticeLobbySetDetails_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_120
const Default_CMsgPracticeLobbySetDetails_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public
const Default_CMsgPracticeLobbySetDetails_LeagueSelectionPriorityChoice SelectionPriorityType = SelectionPriorityType_UNDEFINED
const Default_CMsgPracticeLobbySetDetails_LeagueNonSelectionPriorityChoice SelectionPriorityType = SelectionPriorityType_UNDEFINED
const Default_CMsgPracticeLobbySetDetails_PauseSetting LobbyDotaPauseSetting = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited

func (m *CMsgPracticeLobbySetDetails) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CMsgPracticeLobbySetDetails) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CMsgPracticeLobbySetDetails_CmPick
}

func (m *CMsgPracticeLobbySetDetails) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CMsgPracticeLobbySetDetails_BotDifficulty
}

func (m *CMsgPracticeLobbySetDetails) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CMsgPracticeLobbySetDetails_GameVersion
}

func (m *CMsgPracticeLobbySetDetails) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CMsgPracticeLobbySetDetails_Allchat
}

func (m *CMsgPracticeLobbySetDetails) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CMsgPracticeLobbySetDetails_DotaTvDelay
}

func (m *CMsgPracticeLobbySetDetails) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CMsgPracticeLobbySetDetails_Visibility
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueSeriesId() uint32 {
	if m != nil && m.LeagueSeriesId != nil {
		return *m.LeagueSeriesId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueGameId() uint32 {
	if m != nil && m.LeagueGameId != nil {
		return *m.LeagueGameId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueSelectionPriorityTeam() uint32 {
	if m != nil && m.LeagueSelectionPriorityTeam != nil {
		return *m.LeagueSelectionPriorityTeam
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueSelectionPriorityChoice() SelectionPriorityType {
	if m != nil && m.LeagueSelectionPriorityChoice != nil {
		return *m.LeagueSelectionPriorityChoice
	}
	return Default_CMsgPracticeLobbySetDetails_LeagueSelectionPriorityChoice
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueNonSelectionPriorityChoice() SelectionPriorityType {
	if m != nil && m.LeagueNonSelectionPriorityChoice != nil {
		return *m.LeagueNonSelectionPriorityChoice
	}
	return Default_CMsgPracticeLobbySetDetails_LeagueNonSelectionPriorityChoice
}

func (m *CMsgPracticeLobbySetDetails) GetPauseSetting() LobbyDotaPauseSetting {
	if m != nil && m.PauseSetting != nil {
		return *m.PauseSetting
	}
	return Default_CMsgPracticeLobbySetDetails_PauseSetting
}

type CMsgPracticeLobbyCreate struct {
	SearchKey        *string                           `protobuf:"bytes,1,opt,name=search_key" json:"search_key,omitempty"`
	PassKey          *string                           `protobuf:"bytes,5,opt,name=pass_key" json:"pass_key,omitempty"`
	ClientVersion    *uint32                           `protobuf:"varint,6,opt,name=client_version" json:"client_version,omitempty"`
	LobbyDetails     *CMsgPracticeLobbySetDetails      `protobuf:"bytes,7,opt,name=lobby_details" json:"lobby_details,omitempty"`
	SaveGame         *CMsgPracticeLobbyCreate_SaveGame `protobuf:"bytes,8,opt,name=save_game" json:"save_game,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *CMsgPracticeLobbyCreate) Reset()                    { *m = CMsgPracticeLobbyCreate{} }
func (m *CMsgPracticeLobbyCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyCreate) ProtoMessage()               {}
func (*CMsgPracticeLobbyCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

func (m *CMsgPracticeLobbyCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgPracticeLobbyCreate) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbyCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgPracticeLobbyCreate) GetLobbyDetails() *CMsgPracticeLobbySetDetails {
	if m != nil {
		return m.LobbyDetails
	}
	return nil
}

func (m *CMsgPracticeLobbyCreate) GetSaveGame() *CMsgPracticeLobbyCreate_SaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

type CMsgPracticeLobbyCreate_SaveGame struct {
	Data             []byte  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Version          *int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,3,opt,name=steam_id" json:"steam_id,omitempty"`
	Signature        *uint64 `protobuf:"fixed64,4,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyCreate_SaveGame) Reset()         { *m = CMsgPracticeLobbyCreate_SaveGame{} }
func (m *CMsgPracticeLobbyCreate_SaveGame) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyCreate_SaveGame) ProtoMessage()    {}
func (*CMsgPracticeLobbyCreate_SaveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{7, 0}
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetSignature() uint64 {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return 0
}

type CMsgPracticeLobbySetTeamSlot struct {
	Team             *DOTA_GC_TEAM      `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Slot             *uint32            `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	BotDifficulty    *DOTABotDifficulty `protobuf:"varint,3,opt,name=bot_difficulty,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMsgPracticeLobbySetTeamSlot) Reset()                    { *m = CMsgPracticeLobbySetTeamSlot{} }
func (m *CMsgPracticeLobbySetTeamSlot) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbySetTeamSlot) ProtoMessage()               {}
func (*CMsgPracticeLobbySetTeamSlot) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

const Default_CMsgPracticeLobbySetTeamSlot_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CMsgPracticeLobbySetTeamSlot_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE

func (m *CMsgPracticeLobbySetTeamSlot) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CMsgPracticeLobbySetTeamSlot_Team
}

func (m *CMsgPracticeLobbySetTeamSlot) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CMsgPracticeLobbySetTeamSlot) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CMsgPracticeLobbySetTeamSlot_BotDifficulty
}

type CMsgPracticeLobbySetCoach struct {
	Team             *DOTA_GC_TEAM `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CMsgPracticeLobbySetCoach) Reset()                    { *m = CMsgPracticeLobbySetCoach{} }
func (m *CMsgPracticeLobbySetCoach) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbySetCoach) ProtoMessage()               {}
func (*CMsgPracticeLobbySetCoach) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

const Default_CMsgPracticeLobbySetCoach_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CMsgPracticeLobbySetCoach) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CMsgPracticeLobbySetCoach_Team
}

type CMsgPracticeLobbyJoinBroadcastChannel struct {
	Channel               *uint32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	PreferredDescription  *string `protobuf:"bytes,2,opt,name=preferred_description" json:"preferred_description,omitempty"`
	PreferredCountryCode  *string `protobuf:"bytes,3,opt,name=preferred_country_code" json:"preferred_country_code,omitempty"`
	PreferredLanguageCode *string `protobuf:"bytes,4,opt,name=preferred_language_code" json:"preferred_language_code,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) Reset()         { *m = CMsgPracticeLobbyJoinBroadcastChannel{} }
func (m *CMsgPracticeLobbyJoinBroadcastChannel) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyJoinBroadcastChannel) ProtoMessage()    {}
func (*CMsgPracticeLobbyJoinBroadcastChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{10}
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredDescription() string {
	if m != nil && m.PreferredDescription != nil {
		return *m.PreferredDescription
	}
	return ""
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredCountryCode() string {
	if m != nil && m.PreferredCountryCode != nil {
		return *m.PreferredCountryCode
	}
	return ""
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredLanguageCode() string {
	if m != nil && m.PreferredLanguageCode != nil {
		return *m.PreferredLanguageCode
	}
	return ""
}

type CMsgPracticeLobbyCloseBroadcastChannel struct {
	Channel          *uint32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyCloseBroadcastChannel) Reset() {
	*m = CMsgPracticeLobbyCloseBroadcastChannel{}
}
func (m *CMsgPracticeLobbyCloseBroadcastChannel) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyCloseBroadcastChannel) ProtoMessage()    {}
func (*CMsgPracticeLobbyCloseBroadcastChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{11}
}

func (m *CMsgPracticeLobbyCloseBroadcastChannel) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

type CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) Reset() {
	*m = CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus{}
}
func (m *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) ProtoMessage() {}
func (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{12}
}

type CMsgPracticeLobbyKick struct {
	AccountId        *uint32 `protobuf:"varint,3,opt,name=account_id" json:"account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyKick) Reset()                    { *m = CMsgPracticeLobbyKick{} }
func (m *CMsgPracticeLobbyKick) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyKick) ProtoMessage()               {}
func (*CMsgPracticeLobbyKick) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{13} }

func (m *CMsgPracticeLobbyKick) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMsgPracticeLobbyKickFromTeam struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyKickFromTeam) Reset()                    { *m = CMsgPracticeLobbyKickFromTeam{} }
func (m *CMsgPracticeLobbyKickFromTeam) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyKickFromTeam) ProtoMessage()               {}
func (*CMsgPracticeLobbyKickFromTeam) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

func (m *CMsgPracticeLobbyKickFromTeam) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMsgPracticeLobbyLeave struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgPracticeLobbyLeave) Reset()                    { *m = CMsgPracticeLobbyLeave{} }
func (m *CMsgPracticeLobbyLeave) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyLeave) ProtoMessage()               {}
func (*CMsgPracticeLobbyLeave) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

type CMsgPracticeLobbyLaunch struct {
	ClientVersion    *uint32 `protobuf:"varint,5,opt,name=client_version" json:"client_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyLaunch) Reset()                    { *m = CMsgPracticeLobbyLaunch{} }
func (m *CMsgPracticeLobbyLaunch) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyLaunch) ProtoMessage()               {}
func (*CMsgPracticeLobbyLaunch) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

func (m *CMsgPracticeLobbyLaunch) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

type CMsgApplyTeamToPracticeLobby struct {
	TeamId           *uint32 `protobuf:"varint,1,opt,name=team_id" json:"team_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgApplyTeamToPracticeLobby) Reset()                    { *m = CMsgApplyTeamToPracticeLobby{} }
func (m *CMsgApplyTeamToPracticeLobby) String() string            { return proto.CompactTextString(m) }
func (*CMsgApplyTeamToPracticeLobby) ProtoMessage()               {}
func (*CMsgApplyTeamToPracticeLobby) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *CMsgApplyTeamToPracticeLobby) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CMsgClearPracticeLobbyTeam struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClearPracticeLobbyTeam) Reset()                    { *m = CMsgClearPracticeLobbyTeam{} }
func (m *CMsgClearPracticeLobbyTeam) String() string            { return proto.CompactTextString(m) }
func (*CMsgClearPracticeLobbyTeam) ProtoMessage()               {}
func (*CMsgClearPracticeLobbyTeam) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

type CMsgPracticeLobbyList struct {
	TournamentGames  *bool          `protobuf:"varint,1,opt,name=tournament_games" json:"tournament_games,omitempty"`
	PassKey          *string        `protobuf:"bytes,2,opt,name=pass_key" json:"pass_key,omitempty"`
	Region           *uint32        `protobuf:"varint,3,opt,name=region" json:"region,omitempty"`
	GameMode         *DOTA_GameMode `protobuf:"varint,4,opt,name=game_mode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMsgPracticeLobbyList) Reset()                    { *m = CMsgPracticeLobbyList{} }
func (m *CMsgPracticeLobbyList) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyList) ProtoMessage()               {}
func (*CMsgPracticeLobbyList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

const Default_CMsgPracticeLobbyList_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE

func (m *CMsgPracticeLobbyList) GetTournamentGames() bool {
	if m != nil && m.TournamentGames != nil {
		return *m.TournamentGames
	}
	return false
}

func (m *CMsgPracticeLobbyList) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbyList) GetRegion() uint32 {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return 0
}

func (m *CMsgPracticeLobbyList) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgPracticeLobbyList_GameMode
}

type CMsgPracticeLobbyListResponseEntry struct {
	Id                        *uint64                                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TournamentId              *uint32                                            `protobuf:"varint,3,opt,name=tournament_id" json:"tournament_id,omitempty"`
	TournamentGameId          *uint32                                            `protobuf:"varint,4,opt,name=tournament_game_id" json:"tournament_game_id,omitempty"`
	Members                   []*CMsgPracticeLobbyListResponseEntry_CLobbyMember `protobuf:"bytes,5,rep,name=members" json:"members,omitempty"`
	RequiresPassKey           *bool                                              `protobuf:"varint,6,opt,name=requires_pass_key" json:"requires_pass_key,omitempty"`
	LeaderAccountId           *uint32                                            `protobuf:"varint,7,opt,name=leader_account_id" json:"leader_account_id,omitempty"`
	GuildId                   *uint32                                            `protobuf:"varint,8,opt,name=guild_id" json:"guild_id,omitempty"`
	GuildLogo                 *uint64                                            `protobuf:"varint,9,opt,name=guild_logo" json:"guild_logo,omitempty"`
	Name                      *string                                            `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	CustomGameMode            *string                                            `protobuf:"bytes,11,opt,name=custom_game_mode" json:"custom_game_mode,omitempty"`
	GameMode                  *DOTA_GameMode                                     `protobuf:"varint,12,opt,name=game_mode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	FriendPresent             *bool                                              `protobuf:"varint,13,opt,name=friend_present" json:"friend_present,omitempty"`
	Players                   *uint32                                            `protobuf:"varint,14,opt,name=players" json:"players,omitempty"`
	CustomMapName             *string                                            `protobuf:"bytes,15,opt,name=custom_map_name" json:"custom_map_name,omitempty"`
	MaxPlayerCount            *uint32                                            `protobuf:"varint,16,opt,name=max_player_count" json:"max_player_count,omitempty"`
	ServerRegion              *uint32                                            `protobuf:"varint,17,opt,name=server_region" json:"server_region,omitempty"`
	LanHostPingToServerRegion *uint32                                            `protobuf:"varint,18,opt,name=lan_host_ping_to_server_region" json:"lan_host_ping_to_server_region,omitempty"`
	LeagueId                  *uint32                                            `protobuf:"varint,19,opt,name=league_id" json:"league_id,omitempty"`
	XXX_unrecognized          []byte                                             `json:"-"`
}

func (m *CMsgPracticeLobbyListResponseEntry) Reset()         { *m = CMsgPracticeLobbyListResponseEntry{} }
func (m *CMsgPracticeLobbyListResponseEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyListResponseEntry) ProtoMessage()    {}
func (*CMsgPracticeLobbyListResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{20}
}

const Default_CMsgPracticeLobbyListResponseEntry_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE

func (m *CMsgPracticeLobbyListResponseEntry) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetTournamentId() uint32 {
	if m != nil && m.TournamentId != nil {
		return *m.TournamentId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetTournamentGameId() uint32 {
	if m != nil && m.TournamentGameId != nil {
		return *m.TournamentGameId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetMembers() []*CMsgPracticeLobbyListResponseEntry_CLobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CMsgPracticeLobbyListResponseEntry) GetRequiresPassKey() bool {
	if m != nil && m.RequiresPassKey != nil {
		return *m.RequiresPassKey
	}
	return false
}

func (m *CMsgPracticeLobbyListResponseEntry) GetLeaderAccountId() uint32 {
	if m != nil && m.LeaderAccountId != nil {
		return *m.LeaderAccountId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgPracticeLobbyListResponseEntry) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CMsgPracticeLobbyListResponseEntry) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgPracticeLobbyListResponseEntry_GameMode
}

func (m *CMsgPracticeLobbyListResponseEntry) GetFriendPresent() bool {
	if m != nil && m.FriendPresent != nil {
		return *m.FriendPresent
	}
	return false
}

func (m *CMsgPracticeLobbyListResponseEntry) GetPlayers() uint32 {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CMsgPracticeLobbyListResponseEntry) GetMaxPlayerCount() uint32 {
	if m != nil && m.MaxPlayerCount != nil {
		return *m.MaxPlayerCount
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

type CMsgPracticeLobbyListResponseEntry_CLobbyMember struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id" json:"account_id,omitempty"`
	PlayerName       *string `protobuf:"bytes,2,opt,name=player_name" json:"player_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) Reset() {
	*m = CMsgPracticeLobbyListResponseEntry_CLobbyMember{}
}
func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgPracticeLobbyListResponseEntry_CLobbyMember) ProtoMessage() {}
func (*CMsgPracticeLobbyListResponseEntry_CLobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{20, 0}
}

func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

type CMsgPracticeLobbyListResponse struct {
	TournamentGames  *bool                                 `protobuf:"varint,1,opt,name=tournament_games" json:"tournament_games,omitempty"`
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,2,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgPracticeLobbyListResponse) Reset()                    { *m = CMsgPracticeLobbyListResponse{} }
func (m *CMsgPracticeLobbyListResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyListResponse) ProtoMessage()               {}
func (*CMsgPracticeLobbyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{21} }

func (m *CMsgPracticeLobbyListResponse) GetTournamentGames() bool {
	if m != nil && m.TournamentGames != nil {
		return *m.TournamentGames
	}
	return false
}

func (m *CMsgPracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgLobbyList struct {
	ServerRegion     *uint32        `protobuf:"varint,1,opt,name=server_region,def=0" json:"server_region,omitempty"`
	GameMode         *DOTA_GameMode `protobuf:"varint,2,opt,name=game_mode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMsgLobbyList) Reset()                    { *m = CMsgLobbyList{} }
func (m *CMsgLobbyList) String() string            { return proto.CompactTextString(m) }
func (*CMsgLobbyList) ProtoMessage()               {}
func (*CMsgLobbyList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

const Default_CMsgLobbyList_ServerRegion uint32 = 0
const Default_CMsgLobbyList_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE

func (m *CMsgLobbyList) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CMsgLobbyList_ServerRegion
}

func (m *CMsgLobbyList) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgLobbyList_GameMode
}

type CMsgLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgLobbyListResponse) Reset()                    { *m = CMsgLobbyListResponse{} }
func (m *CMsgLobbyListResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgLobbyListResponse) ProtoMessage()               {}
func (*CMsgLobbyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

func (m *CMsgLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgPracticeLobbyJoin struct {
	LobbyId             *uint64 `protobuf:"varint,1,opt,name=lobby_id" json:"lobby_id,omitempty"`
	ClientVersion       *uint32 `protobuf:"varint,2,opt,name=client_version" json:"client_version,omitempty"`
	PassKey             *string `protobuf:"bytes,3,opt,name=pass_key" json:"pass_key,omitempty"`
	CustomGameCrc       *uint64 `protobuf:"fixed64,4,opt,name=custom_game_crc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32 `protobuf:"fixed32,5,opt,name=custom_game_timestamp" json:"custom_game_timestamp,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyJoin) Reset()                    { *m = CMsgPracticeLobbyJoin{} }
func (m *CMsgPracticeLobbyJoin) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyJoin) ProtoMessage()               {}
func (*CMsgPracticeLobbyJoin) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *CMsgPracticeLobbyJoin) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgPracticeLobbyJoin) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgPracticeLobbyJoin) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbyJoin) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CMsgPracticeLobbyJoin) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CMsgPracticeLobbyJoinResponse struct {
	Result           *DOTAJoinLobbyResult `protobuf:"varint,1,opt,name=result,enum=dota.DOTAJoinLobbyResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMsgPracticeLobbyJoinResponse) Reset()                    { *m = CMsgPracticeLobbyJoinResponse{} }
func (m *CMsgPracticeLobbyJoinResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyJoinResponse) ProtoMessage()               {}
func (*CMsgPracticeLobbyJoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

const Default_CMsgPracticeLobbyJoinResponse_Result DOTAJoinLobbyResult = DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS

func (m *CMsgPracticeLobbyJoinResponse) GetResult() DOTAJoinLobbyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgPracticeLobbyJoinResponse_Result
}

type CMsgFriendPracticeLobbyListRequest struct {
	Friends          []uint32 `protobuf:"varint,1,rep,name=friends" json:"friends,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgFriendPracticeLobbyListRequest) Reset()         { *m = CMsgFriendPracticeLobbyListRequest{} }
func (m *CMsgFriendPracticeLobbyListRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgFriendPracticeLobbyListRequest) ProtoMessage()    {}
func (*CMsgFriendPracticeLobbyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{26}
}

func (m *CMsgFriendPracticeLobbyListRequest) GetFriends() []uint32 {
	if m != nil {
		return m.Friends
	}
	return nil
}

type CMsgFriendPracticeLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgFriendPracticeLobbyListResponse) Reset()         { *m = CMsgFriendPracticeLobbyListResponse{} }
func (m *CMsgFriendPracticeLobbyListResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgFriendPracticeLobbyListResponse) ProtoMessage()    {}
func (*CMsgFriendPracticeLobbyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{27}
}

func (m *CMsgFriendPracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgGuildmatePracticeLobbyListRequest struct {
	Guilds           []uint32 `protobuf:"varint,1,rep,name=guilds" json:"guilds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgGuildmatePracticeLobbyListRequest) Reset()         { *m = CMsgGuildmatePracticeLobbyListRequest{} }
func (m *CMsgGuildmatePracticeLobbyListRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgGuildmatePracticeLobbyListRequest) ProtoMessage()    {}
func (*CMsgGuildmatePracticeLobbyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{28}
}

func (m *CMsgGuildmatePracticeLobbyListRequest) GetGuilds() []uint32 {
	if m != nil {
		return m.Guilds
	}
	return nil
}

type CMsgGuildmatePracticeLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgGuildmatePracticeLobbyListResponse) Reset() {
	*m = CMsgGuildmatePracticeLobbyListResponse{}
}
func (m *CMsgGuildmatePracticeLobbyListResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGuildmatePracticeLobbyListResponse) ProtoMessage()    {}
func (*CMsgGuildmatePracticeLobbyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{29}
}

func (m *CMsgGuildmatePracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgJoinableCustomGameModesRequest struct {
	ServerRegion     *uint32 `protobuf:"varint,1,opt,name=server_region" json:"server_region,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgJoinableCustomGameModesRequest) Reset()         { *m = CMsgJoinableCustomGameModesRequest{} }
func (m *CMsgJoinableCustomGameModesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomGameModesRequest) ProtoMessage()    {}
func (*CMsgJoinableCustomGameModesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{30}
}

func (m *CMsgJoinableCustomGameModesRequest) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

type CMsgJoinableCustomGameModesResponseEntry struct {
	CustomGameId     *uint64 `protobuf:"varint,1,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	LobbyCount       *uint32 `protobuf:"varint,2,opt,name=lobby_count" json:"lobby_count,omitempty"`
	PlayerCount      *uint32 `protobuf:"varint,3,opt,name=player_count" json:"player_count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgJoinableCustomGameModesResponseEntry) Reset() {
	*m = CMsgJoinableCustomGameModesResponseEntry{}
}
func (m *CMsgJoinableCustomGameModesResponseEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomGameModesResponseEntry) ProtoMessage()    {}
func (*CMsgJoinableCustomGameModesResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{31}
}

func (m *CMsgJoinableCustomGameModesResponseEntry) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgJoinableCustomGameModesResponseEntry) GetLobbyCount() uint32 {
	if m != nil && m.LobbyCount != nil {
		return *m.LobbyCount
	}
	return 0
}

func (m *CMsgJoinableCustomGameModesResponseEntry) GetPlayerCount() uint32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

type CMsgJoinableCustomGameModesResponse struct {
	GameModes        []*CMsgJoinableCustomGameModesResponseEntry `protobuf:"bytes,1,rep,name=game_modes" json:"game_modes,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgJoinableCustomGameModesResponse) Reset()         { *m = CMsgJoinableCustomGameModesResponse{} }
func (m *CMsgJoinableCustomGameModesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomGameModesResponse) ProtoMessage()    {}
func (*CMsgJoinableCustomGameModesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{32}
}

func (m *CMsgJoinableCustomGameModesResponse) GetGameModes() []*CMsgJoinableCustomGameModesResponseEntry {
	if m != nil {
		return m.GameModes
	}
	return nil
}

type CMsgJoinableCustomLobbiesRequest struct {
	ServerRegion     *uint32 `protobuf:"varint,1,opt,name=server_region" json:"server_region,omitempty"`
	CustomGameId     *uint64 `protobuf:"varint,2,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgJoinableCustomLobbiesRequest) Reset()         { *m = CMsgJoinableCustomLobbiesRequest{} }
func (m *CMsgJoinableCustomLobbiesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomLobbiesRequest) ProtoMessage()    {}
func (*CMsgJoinableCustomLobbiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{33}
}

func (m *CMsgJoinableCustomLobbiesRequest) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesRequest) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CMsgJoinableCustomLobbiesResponseEntry struct {
	LobbyId                   *uint64 `protobuf:"fixed64,1,opt,name=lobby_id" json:"lobby_id,omitempty"`
	CustomGameId              *uint64 `protobuf:"varint,2,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	LobbyName                 *string `protobuf:"bytes,3,opt,name=lobby_name" json:"lobby_name,omitempty"`
	MemberCount               *uint32 `protobuf:"varint,4,opt,name=member_count" json:"member_count,omitempty"`
	LeaderAccountId           *uint32 `protobuf:"varint,5,opt,name=leader_account_id" json:"leader_account_id,omitempty"`
	LeaderName                *string `protobuf:"bytes,6,opt,name=leader_name" json:"leader_name,omitempty"`
	CustomMapName             *string `protobuf:"bytes,7,opt,name=custom_map_name" json:"custom_map_name,omitempty"`
	MaxPlayerCount            *uint32 `protobuf:"varint,8,opt,name=max_player_count" json:"max_player_count,omitempty"`
	ServerRegion              *uint32 `protobuf:"varint,9,opt,name=server_region" json:"server_region,omitempty"`
	LanHostPingToServerRegion *uint32 `protobuf:"varint,10,opt,name=lan_host_ping_to_server_region" json:"lan_host_ping_to_server_region,omitempty"`
	HasPassKey                *bool   `protobuf:"varint,11,opt,name=has_pass_key" json:"has_pass_key,omitempty"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) Reset() {
	*m = CMsgJoinableCustomLobbiesResponseEntry{}
}
func (m *CMsgJoinableCustomLobbiesResponseEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomLobbiesResponseEntry) ProtoMessage()    {}
func (*CMsgJoinableCustomLobbiesResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{34}
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyName() string {
	if m != nil && m.LobbyName != nil {
		return *m.LobbyName
	}
	return ""
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetMemberCount() uint32 {
	if m != nil && m.MemberCount != nil {
		return *m.MemberCount
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLeaderAccountId() uint32 {
	if m != nil && m.LeaderAccountId != nil {
		return *m.LeaderAccountId
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLeaderName() string {
	if m != nil && m.LeaderName != nil {
		return *m.LeaderName
	}
	return ""
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetMaxPlayerCount() uint32 {
	if m != nil && m.MaxPlayerCount != nil {
		return *m.MaxPlayerCount
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetHasPassKey() bool {
	if m != nil && m.HasPassKey != nil {
		return *m.HasPassKey
	}
	return false
}

type CMsgJoinableCustomLobbiesResponse struct {
	Lobbies          []*CMsgJoinableCustomLobbiesResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *CMsgJoinableCustomLobbiesResponse) Reset()         { *m = CMsgJoinableCustomLobbiesResponse{} }
func (m *CMsgJoinableCustomLobbiesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomLobbiesResponse) ProtoMessage()    {}
func (*CMsgJoinableCustomLobbiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{35}
}

func (m *CMsgJoinableCustomLobbiesResponse) GetLobbies() []*CMsgJoinableCustomLobbiesResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgQuickJoinCustomLobby struct {
	LegacyServerRegion *uint32                                      `protobuf:"varint,1,opt,name=legacy_server_region" json:"legacy_server_region,omitempty"`
	CustomGameId       *uint64                                      `protobuf:"varint,2,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	ClientVersion      *uint32                                      `protobuf:"varint,3,opt,name=client_version" json:"client_version,omitempty"`
	CreateLobbyDetails *CMsgPracticeLobbySetDetails                 `protobuf:"bytes,4,opt,name=create_lobby_details" json:"create_lobby_details,omitempty"`
	AllowAnyMap        *bool                                        `protobuf:"varint,5,opt,name=allow_any_map" json:"allow_any_map,omitempty"`
	LegacyRegionPings  []*CMsgQuickJoinCustomLobby_LegacyRegionPing `protobuf:"bytes,6,rep,name=legacy_region_pings" json:"legacy_region_pings,omitempty"`
	PingData           *CMsgClientPingData                          `protobuf:"bytes,7,opt,name=ping_data" json:"ping_data,omitempty"`
	XXX_unrecognized   []byte                                       `json:"-"`
}

func (m *CMsgQuickJoinCustomLobby) Reset()                    { *m = CMsgQuickJoinCustomLobby{} }
func (m *CMsgQuickJoinCustomLobby) String() string            { return proto.CompactTextString(m) }
func (*CMsgQuickJoinCustomLobby) ProtoMessage()               {}
func (*CMsgQuickJoinCustomLobby) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{36} }

func (m *CMsgQuickJoinCustomLobby) GetLegacyServerRegion() uint32 {
	if m != nil && m.LegacyServerRegion != nil {
		return *m.LegacyServerRegion
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby) GetCreateLobbyDetails() *CMsgPracticeLobbySetDetails {
	if m != nil {
		return m.CreateLobbyDetails
	}
	return nil
}

func (m *CMsgQuickJoinCustomLobby) GetAllowAnyMap() bool {
	if m != nil && m.AllowAnyMap != nil {
		return *m.AllowAnyMap
	}
	return false
}

func (m *CMsgQuickJoinCustomLobby) GetLegacyRegionPings() []*CMsgQuickJoinCustomLobby_LegacyRegionPing {
	if m != nil {
		return m.LegacyRegionPings
	}
	return nil
}

func (m *CMsgQuickJoinCustomLobby) GetPingData() *CMsgClientPingData {
	if m != nil {
		return m.PingData
	}
	return nil
}

type CMsgQuickJoinCustomLobby_LegacyRegionPing struct {
	ServerRegion     *uint32 `protobuf:"varint,1,opt,name=server_region" json:"server_region,omitempty"`
	Ping             *uint32 `protobuf:"varint,2,opt,name=ping" json:"ping,omitempty"`
	RegionCode       *uint32 `protobuf:"fixed32,3,opt,name=region_code" json:"region_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) Reset() {
	*m = CMsgQuickJoinCustomLobby_LegacyRegionPing{}
}
func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) String() string { return proto.CompactTextString(m) }
func (*CMsgQuickJoinCustomLobby_LegacyRegionPing) ProtoMessage()    {}
func (*CMsgQuickJoinCustomLobby_LegacyRegionPing) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{36, 0}
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetPing() uint32 {
	if m != nil && m.Ping != nil {
		return *m.Ping
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetRegionCode() uint32 {
	if m != nil && m.RegionCode != nil {
		return *m.RegionCode
	}
	return 0
}

type CMsgQuickJoinCustomLobbyResponse struct {
	Result           *DOTAJoinLobbyResult `protobuf:"varint,1,opt,name=result,enum=dota.DOTAJoinLobbyResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMsgQuickJoinCustomLobbyResponse) Reset()         { *m = CMsgQuickJoinCustomLobbyResponse{} }
func (m *CMsgQuickJoinCustomLobbyResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgQuickJoinCustomLobbyResponse) ProtoMessage()    {}
func (*CMsgQuickJoinCustomLobbyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{37}
}

const Default_CMsgQuickJoinCustomLobbyResponse_Result DOTAJoinLobbyResult = DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS

func (m *CMsgQuickJoinCustomLobbyResponse) GetResult() DOTAJoinLobbyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgQuickJoinCustomLobbyResponse_Result
}

type CMsgBotGameCreate struct {
	SearchKey        *string            `protobuf:"bytes,1,opt,name=search_key" json:"search_key,omitempty"`
	ClientVersion    *uint32            `protobuf:"varint,2,opt,name=client_version" json:"client_version,omitempty"`
	Difficulty       *DOTABotDifficulty `protobuf:"varint,3,opt,name=difficulty,enum=dota.DOTABotDifficulty,def=0" json:"difficulty,omitempty"`
	Team             *DOTA_GC_TEAM      `protobuf:"varint,4,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	GameMode         *uint32            `protobuf:"varint,5,opt,name=game_mode" json:"game_mode,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMsgBotGameCreate) Reset()                    { *m = CMsgBotGameCreate{} }
func (m *CMsgBotGameCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotGameCreate) ProtoMessage()               {}
func (*CMsgBotGameCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{38} }

const Default_CMsgBotGameCreate_Difficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CMsgBotGameCreate_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CMsgBotGameCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgBotGameCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgBotGameCreate) GetDifficulty() DOTABotDifficulty {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return Default_CMsgBotGameCreate_Difficulty
}

func (m *CMsgBotGameCreate) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CMsgBotGameCreate_Team
}

func (m *CMsgBotGameCreate) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

type CMsgCustomGameCreate struct {
	SearchKey        *string `protobuf:"bytes,1,opt,name=search_key" json:"search_key,omitempty"`
	ClientVersion    *uint32 `protobuf:"varint,2,opt,name=client_version" json:"client_version,omitempty"`
	Difficulty       *uint32 `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	GameMode         *string `protobuf:"bytes,4,opt,name=game_mode" json:"game_mode,omitempty"`
	Map              *string `protobuf:"bytes,5,opt,name=map" json:"map,omitempty"`
	CustomGameId     *uint64 `protobuf:"varint,7,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgCustomGameCreate) Reset()                    { *m = CMsgCustomGameCreate{} }
func (m *CMsgCustomGameCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgCustomGameCreate) ProtoMessage()               {}
func (*CMsgCustomGameCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{39} }

func (m *CMsgCustomGameCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgCustomGameCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgCustomGameCreate) GetDifficulty() uint32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *CMsgCustomGameCreate) GetGameMode() string {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return ""
}

func (m *CMsgCustomGameCreate) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *CMsgCustomGameCreate) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CMsgEventGameCreate struct {
	SearchKey        *string `protobuf:"bytes,1,opt,name=search_key" json:"search_key,omitempty"`
	ClientVersion    *uint32 `protobuf:"varint,2,opt,name=client_version" json:"client_version,omitempty"`
	Difficulty       *uint32 `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	GameMode         *string `protobuf:"bytes,4,opt,name=game_mode" json:"game_mode,omitempty"`
	Map              *string `protobuf:"bytes,5,opt,name=map" json:"map,omitempty"`
	CustomGameId     *uint64 `protobuf:"varint,7,opt,name=custom_game_id" json:"custom_game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgEventGameCreate) Reset()                    { *m = CMsgEventGameCreate{} }
func (m *CMsgEventGameCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgEventGameCreate) ProtoMessage()               {}
func (*CMsgEventGameCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{40} }

func (m *CMsgEventGameCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgEventGameCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgEventGameCreate) GetDifficulty() uint32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *CMsgEventGameCreate) GetGameMode() string {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return ""
}

func (m *CMsgEventGameCreate) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *CMsgEventGameCreate) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CMsgDOTAPartyMemberSetCoach struct {
	WantsCoach       *bool  `protobuf:"varint,1,opt,name=wants_coach" json:"wants_coach,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAPartyMemberSetCoach) Reset()                    { *m = CMsgDOTAPartyMemberSetCoach{} }
func (m *CMsgDOTAPartyMemberSetCoach) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAPartyMemberSetCoach) ProtoMessage()               {}
func (*CMsgDOTAPartyMemberSetCoach) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{41} }

func (m *CMsgDOTAPartyMemberSetCoach) GetWantsCoach() bool {
	if m != nil && m.WantsCoach != nil {
		return *m.WantsCoach
	}
	return false
}

type CMsgDOTASetGroupLeader struct {
	NewLeaderSteamid *uint64 `protobuf:"fixed64,1,opt,name=new_leader_steamid" json:"new_leader_steamid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTASetGroupLeader) Reset()                    { *m = CMsgDOTASetGroupLeader{} }
func (m *CMsgDOTASetGroupLeader) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTASetGroupLeader) ProtoMessage()               {}
func (*CMsgDOTASetGroupLeader) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{42} }

func (m *CMsgDOTASetGroupLeader) GetNewLeaderSteamid() uint64 {
	if m != nil && m.NewLeaderSteamid != nil {
		return *m.NewLeaderSteamid
	}
	return 0
}

type CMsgDOTACancelGroupInvites struct {
	InvitedSteamids  []uint64 `protobuf:"fixed64,1,rep,name=invited_steamids" json:"invited_steamids,omitempty"`
	InvitedGroupids  []uint64 `protobuf:"fixed64,2,rep,name=invited_groupids" json:"invited_groupids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTACancelGroupInvites) Reset()                    { *m = CMsgDOTACancelGroupInvites{} }
func (m *CMsgDOTACancelGroupInvites) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTACancelGroupInvites) ProtoMessage()               {}
func (*CMsgDOTACancelGroupInvites) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{43} }

func (m *CMsgDOTACancelGroupInvites) GetInvitedSteamids() []uint64 {
	if m != nil {
		return m.InvitedSteamids
	}
	return nil
}

func (m *CMsgDOTACancelGroupInvites) GetInvitedGroupids() []uint64 {
	if m != nil {
		return m.InvitedGroupids
	}
	return nil
}

type CMsgDOTASetGroupOpenStatus struct {
	Open             *bool  `protobuf:"varint,1,opt,name=open" json:"open,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTASetGroupOpenStatus) Reset()                    { *m = CMsgDOTASetGroupOpenStatus{} }
func (m *CMsgDOTASetGroupOpenStatus) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTASetGroupOpenStatus) ProtoMessage()               {}
func (*CMsgDOTASetGroupOpenStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{44} }

func (m *CMsgDOTASetGroupOpenStatus) GetOpen() bool {
	if m != nil && m.Open != nil {
		return *m.Open
	}
	return false
}

type CMsgDOTAGroupMergeInvite struct {
	OtherGroupId     *uint64 `protobuf:"fixed64,1,opt,name=other_group_id" json:"other_group_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAGroupMergeInvite) Reset()                    { *m = CMsgDOTAGroupMergeInvite{} }
func (m *CMsgDOTAGroupMergeInvite) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGroupMergeInvite) ProtoMessage()               {}
func (*CMsgDOTAGroupMergeInvite) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{45} }

func (m *CMsgDOTAGroupMergeInvite) GetOtherGroupId() uint64 {
	if m != nil && m.OtherGroupId != nil {
		return *m.OtherGroupId
	}
	return 0
}

type CMsgDOTAGroupMergeResponse struct {
	InitiatorGroupId *uint64 `protobuf:"fixed64,1,opt,name=initiator_group_id" json:"initiator_group_id,omitempty"`
	Accept           *bool   `protobuf:"varint,2,opt,name=accept" json:"accept,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAGroupMergeResponse) Reset()                    { *m = CMsgDOTAGroupMergeResponse{} }
func (m *CMsgDOTAGroupMergeResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGroupMergeResponse) ProtoMessage()               {}
func (*CMsgDOTAGroupMergeResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{46} }

func (m *CMsgDOTAGroupMergeResponse) GetInitiatorGroupId() uint64 {
	if m != nil && m.InitiatorGroupId != nil {
		return *m.InitiatorGroupId
	}
	return 0
}

func (m *CMsgDOTAGroupMergeResponse) GetAccept() bool {
	if m != nil && m.Accept != nil {
		return *m.Accept
	}
	return false
}

type CMsgDOTAGroupMergeReply struct {
	Result           *EDOTAGroupMergeResult `protobuf:"varint,1,opt,name=result,enum=dota.EDOTAGroupMergeResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *CMsgDOTAGroupMergeReply) Reset()                    { *m = CMsgDOTAGroupMergeReply{} }
func (m *CMsgDOTAGroupMergeReply) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGroupMergeReply) ProtoMessage()               {}
func (*CMsgDOTAGroupMergeReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{47} }

const Default_CMsgDOTAGroupMergeReply_Result EDOTAGroupMergeResult = EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_OK

func (m *CMsgDOTAGroupMergeReply) GetResult() EDOTAGroupMergeResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAGroupMergeReply_Result
}

func init() {
	proto.RegisterType((*CMsgStartFindingMatch)(nil), "dota.CMsgStartFindingMatch")
	proto.RegisterType((*CMsgStartFindingMatchResult)(nil), "dota.CMsgStartFindingMatchResult")
	proto.RegisterType((*CMsgStopFindingMatch)(nil), "dota.CMsgStopFindingMatch")
	proto.RegisterType((*CMsgReadyUp)(nil), "dota.CMsgReadyUp")
	proto.RegisterType((*CMsgReadyUpStatus)(nil), "dota.CMsgReadyUpStatus")
	proto.RegisterType((*CMsgAbandonCurrentGame)(nil), "dota.CMsgAbandonCurrentGame")
	proto.RegisterType((*CMsgPracticeLobbySetDetails)(nil), "dota.CMsgPracticeLobbySetDetails")
	proto.RegisterType((*CMsgPracticeLobbyCreate)(nil), "dota.CMsgPracticeLobbyCreate")
	proto.RegisterType((*CMsgPracticeLobbyCreate_SaveGame)(nil), "dota.CMsgPracticeLobbyCreate.SaveGame")
	proto.RegisterType((*CMsgPracticeLobbySetTeamSlot)(nil), "dota.CMsgPracticeLobbySetTeamSlot")
	proto.RegisterType((*CMsgPracticeLobbySetCoach)(nil), "dota.CMsgPracticeLobbySetCoach")
	proto.RegisterType((*CMsgPracticeLobbyJoinBroadcastChannel)(nil), "dota.CMsgPracticeLobbyJoinBroadcastChannel")
	proto.RegisterType((*CMsgPracticeLobbyCloseBroadcastChannel)(nil), "dota.CMsgPracticeLobbyCloseBroadcastChannel")
	proto.RegisterType((*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)(nil), "dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus")
	proto.RegisterType((*CMsgPracticeLobbyKick)(nil), "dota.CMsgPracticeLobbyKick")
	proto.RegisterType((*CMsgPracticeLobbyKickFromTeam)(nil), "dota.CMsgPracticeLobbyKickFromTeam")
	proto.RegisterType((*CMsgPracticeLobbyLeave)(nil), "dota.CMsgPracticeLobbyLeave")
	proto.RegisterType((*CMsgPracticeLobbyLaunch)(nil), "dota.CMsgPracticeLobbyLaunch")
	proto.RegisterType((*CMsgApplyTeamToPracticeLobby)(nil), "dota.CMsgApplyTeamToPracticeLobby")
	proto.RegisterType((*CMsgClearPracticeLobbyTeam)(nil), "dota.CMsgClearPracticeLobbyTeam")
	proto.RegisterType((*CMsgPracticeLobbyList)(nil), "dota.CMsgPracticeLobbyList")
	proto.RegisterType((*CMsgPracticeLobbyListResponseEntry)(nil), "dota.CMsgPracticeLobbyListResponseEntry")
	proto.RegisterType((*CMsgPracticeLobbyListResponseEntry_CLobbyMember)(nil), "dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember")
	proto.RegisterType((*CMsgPracticeLobbyListResponse)(nil), "dota.CMsgPracticeLobbyListResponse")
	proto.RegisterType((*CMsgLobbyList)(nil), "dota.CMsgLobbyList")
	proto.RegisterType((*CMsgLobbyListResponse)(nil), "dota.CMsgLobbyListResponse")
	proto.RegisterType((*CMsgPracticeLobbyJoin)(nil), "dota.CMsgPracticeLobbyJoin")
	proto.RegisterType((*CMsgPracticeLobbyJoinResponse)(nil), "dota.CMsgPracticeLobbyJoinResponse")
	proto.RegisterType((*CMsgFriendPracticeLobbyListRequest)(nil), "dota.CMsgFriendPracticeLobbyListRequest")
	proto.RegisterType((*CMsgFriendPracticeLobbyListResponse)(nil), "dota.CMsgFriendPracticeLobbyListResponse")
	proto.RegisterType((*CMsgGuildmatePracticeLobbyListRequest)(nil), "dota.CMsgGuildmatePracticeLobbyListRequest")
	proto.RegisterType((*CMsgGuildmatePracticeLobbyListResponse)(nil), "dota.CMsgGuildmatePracticeLobbyListResponse")
	proto.RegisterType((*CMsgJoinableCustomGameModesRequest)(nil), "dota.CMsgJoinableCustomGameModesRequest")
	proto.RegisterType((*CMsgJoinableCustomGameModesResponseEntry)(nil), "dota.CMsgJoinableCustomGameModesResponseEntry")
	proto.RegisterType((*CMsgJoinableCustomGameModesResponse)(nil), "dota.CMsgJoinableCustomGameModesResponse")
	proto.RegisterType((*CMsgJoinableCustomLobbiesRequest)(nil), "dota.CMsgJoinableCustomLobbiesRequest")
	proto.RegisterType((*CMsgJoinableCustomLobbiesResponseEntry)(nil), "dota.CMsgJoinableCustomLobbiesResponseEntry")
	proto.RegisterType((*CMsgJoinableCustomLobbiesResponse)(nil), "dota.CMsgJoinableCustomLobbiesResponse")
	proto.RegisterType((*CMsgQuickJoinCustomLobby)(nil), "dota.CMsgQuickJoinCustomLobby")
	proto.RegisterType((*CMsgQuickJoinCustomLobby_LegacyRegionPing)(nil), "dota.CMsgQuickJoinCustomLobby.LegacyRegionPing")
	proto.RegisterType((*CMsgQuickJoinCustomLobbyResponse)(nil), "dota.CMsgQuickJoinCustomLobbyResponse")
	proto.RegisterType((*CMsgBotGameCreate)(nil), "dota.CMsgBotGameCreate")
	proto.RegisterType((*CMsgCustomGameCreate)(nil), "dota.CMsgCustomGameCreate")
	proto.RegisterType((*CMsgEventGameCreate)(nil), "dota.CMsgEventGameCreate")
	proto.RegisterType((*CMsgDOTAPartyMemberSetCoach)(nil), "dota.CMsgDOTAPartyMemberSetCoach")
	proto.RegisterType((*CMsgDOTASetGroupLeader)(nil), "dota.CMsgDOTASetGroupLeader")
	proto.RegisterType((*CMsgDOTACancelGroupInvites)(nil), "dota.CMsgDOTACancelGroupInvites")
	proto.RegisterType((*CMsgDOTASetGroupOpenStatus)(nil), "dota.CMsgDOTASetGroupOpenStatus")
	proto.RegisterType((*CMsgDOTAGroupMergeInvite)(nil), "dota.CMsgDOTAGroupMergeInvite")
	proto.RegisterType((*CMsgDOTAGroupMergeResponse)(nil), "dota.CMsgDOTAGroupMergeResponse")
	proto.RegisterType((*CMsgDOTAGroupMergeReply)(nil), "dota.CMsgDOTAGroupMergeReply")
	proto.RegisterEnum("dota.EStartFindingMatchResult", EStartFindingMatchResult_name, EStartFindingMatchResult_value)
}

var fileDescriptor13 = []byte{
	// 3095 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x39, 0x49, 0x77, 0xdb, 0xd6,
	0xd5, 0xa1, 0x24, 0x6b, 0x78, 0x1a, 0x4c, 0x43, 0x13, 0x2c, 0x0f, 0xb1, 0x91, 0xc4, 0xf1, 0xe7,
	0x24, 0x72, 0x22, 0xc7, 0x76, 0xcc, 0xaf, 0x4d, 0x4b, 0x91, 0x94, 0xcc, 0x98, 0x12, 0x15, 0x92,
	0x52, 0x4f, 0x56, 0xaf, 0x10, 0xf0, 0x44, 0xa1, 0x02, 0xf1, 0x10, 0x00, 0x94, 0xaa, 0xae, 0xb2,
	0xed, 0xe9, 0x69, 0xbb, 0xed, 0xa2, 0xa7, 0xbb, 0x76, 0xdb, 0x2e, 0xfa, 0x47, 0xba, 0xeb, 0xbe,
	0x7f, 0xa2, 0xcb, 0xde, 0x7b, 0x1f, 0xc0, 0x41, 0x04, 0x29, 0x3a, 0xe9, 0x39, 0xdd, 0xe8, 0x88,
	0xef, 0x0e, 0xef, 0xce, 0xc3, 0x03, 0xfb, 0xc4, 0x96, 0x91, 0xc9, 0x9b, 0x56, 0x4b, 0x84, 0xa1,
	0xd9, 0x14, 0x21, 0xb7, 0x5c, 0x47, 0x78, 0x11, 0x6f, 0x99, 0x91, 0x75, 0x0a, 0x7f, 0x3d, 0x38,
	0x6c, 0xc1, 0xc1, 0xa6, 0x1f, 0xc8, 0x48, 0x6a, 0x53, 0x88, 0xbe, 0xb1, 0x1c, 0x46, 0xc2, 0x6c,
	0x25, 0x24, 0x0a, 0xb4, 0xb1, 0x4e, 0x9c, 0xc2, 0x53, 0x33, 0x10, 0x36, 0x17, 0x5e, 0xbb, 0xd5,
	0x0f, 0x88, 0xf9, 0xf6, 0x02, 0x56, 0x8f, 0xcd, 0x50, 0xf4, 0xdc, 0x1d, 0x1f, 0x0f, 0x8a, 0x24,
	0x5b, 0x2d, 0xe9, 0x0d, 0x11, 0xc9, 0xf8, 0xf7, 0x24, 0x5b, 0x2d, 0xec, 0x85, 0xcd, 0x7a, 0x64,
	0x06, 0xd1, 0x8e, 0xe3, 0xd9, 0x8e, 0xd7, 0xdc, 0x43, 0x54, 0x6d, 0x9e, 0x4d, 0x9e, 0x89, 0x4b,
	0x3d, 0xf3, 0x20, 0xf3, 0x78, 0x4e, 0x7b, 0x97, 0xcd, 0x13, 0x83, 0x66, 0x20, 0xdb, 0x7e, 0xa8,
	0x4f, 0xc0, 0xe1, 0x62, 0x8e, 0x7d, 0xbe, 0xf5, 0xea, 0xf3, 0x57, 0x2f, 0x5e, 0x6e, 0xbd, 0x7a,
	0xae, 0xad, 0xb1, 0xa5, 0x58, 0xc6, 0x73, 0x11, 0x84, 0x8e, 0xf4, 0xf4, 0x49, 0xc4, 0xd1, 0xee,
	0x33, 0xd6, 0x34, 0x5b, 0x82, 0xb7, 0xa4, 0x2d, 0x42, 0x7d, 0x6a, 0x80, 0xae, 0xc8, 0x96, 0x8e,
	0x65, 0xc4, 0x6d, 0xe7, 0xe4, 0xc4, 0xb1, 0xda, 0x6e, 0x74, 0xa9, 0xdf, 0x00, 0x9c, 0xa5, 0xad,
	0xf5, 0x4d, 0xd4, 0x63, 0xb3, 0x58, 0x6d, 0xe4, 0xb7, 0x65, 0x54, 0xec, 0x80, 0x73, 0xcb, 0xdb,
	0xd5, 0x06, 0x2f, 0x96, 0x77, 0x76, 0xca, 0x85, 0xc3, 0x4a, 0xe3, 0x1b, 0xfe, 0x3a, 0x5f, 0x2b,
	0x6a, 0x2f, 0x18, 0x53, 0xfa, 0x45, 0x97, 0xbe, 0xd0, 0xa7, 0x89, 0xc3, 0x4d, 0xc5, 0x81, 0x94,
	0x69, 0xc0, 0x71, 0xee, 0xd6, 0x5e, 0xbe, 0x51, 0x78, 0xcd, 0x1b, 0xdf, 0x1c, 0x94, 0x78, 0x21,
	0x5f, 0x3f, 0xcc, 0x57, 0x34, 0x83, 0x2d, 0x11, 0x9d, 0x6b, 0x7a, 0xcd, 0x36, 0x5a, 0x4b, 0x9f,
	0x49, 0xd3, 0xac, 0x65, 0xfa, 0xdc, 0x0f, 0xc4, 0x89, 0x08, 0x84, 0x67, 0x09, 0x7d, 0x8e, 0x34,
	0xbb, 0xc9, 0x66, 0xd0, 0x8f, 0xdc, 0xb1, 0xf5, 0x59, 0x3a, 0x78, 0xcd, 0x34, 0x52, 0x35, 0x61,
	0x46, 0xde, 0xd2, 0x19, 0x09, 0xb3, 0xd2, 0x23, 0x4c, 0x25, 0xb9, 0x2c, 0xb7, 0xa6, 0x24, 0xaa,
	0xe4, 0xf7, 0x77, 0x0f, 0xf3, 0xbb, 0x25, 0x5e, 0xde, 0x3f, 0xca, 0x57, 0xca, 0x45, 0x6d, 0xe3,
	0x2a, 0x27, 0x0f, 0x7e, 0xe9, 0xf3, 0xe4, 0x89, 0x8f, 0xd8, 0x9c, 0x0f, 0x3e, 0xe2, 0xb6, 0x19,
	0x99, 0xfa, 0x02, 0x1c, 0xcd, 0x6f, 0xe9, 0x8a, 0x39, 0xba, 0xb1, 0x40, 0x3e, 0x38, 0x00, 0x84,
	0x22, 0xc0, 0xb5, 0x3b, 0x6c, 0x39, 0x10, 0x4d, 0xf0, 0x06, 0x0f, 0x85, 0x2b, 0xac, 0x88, 0x9f,
	0xb8, 0x66, 0x33, 0xd4, 0x17, 0x51, 0x5e, 0xe3, 0x5f, 0x19, 0x76, 0x27, 0xd5, 0xf5, 0x35, 0x11,
	0x82, 0xa9, 0xb5, 0x87, 0x6c, 0xcd, 0x15, 0x4d, 0xd3, 0xba, 0xe4, 0x4d, 0xe1, 0x89, 0xc0, 0xb1,
	0x38, 0xe8, 0x8f, 0x10, 0x8a, 0x89, 0xc5, 0x5c, 0x66, 0x4b, 0xab, 0xb1, 0xe9, 0xf8, 0x68, 0x82,
	0xd4, 0xbc, 0xaf, 0x24, 0x29, 0x0d, 0x61, 0x99, 0x33, 0xce, 0xf8, 0x30, 0x18, 0x2f, 0x7b, 0xe7,
	0xa6, 0xeb, 0xd8, 0xda, 0x32, 0x9b, 0x17, 0x41, 0x20, 0x03, 0x1e, 0xc9, 0x33, 0xa1, 0xc2, 0x68,
	0x4e, 0x5b, 0x65, 0x8b, 0xb6, 0x38, 0x6e, 0x37, 0x79, 0x1c, 0xd6, 0x14, 0x49, 0x73, 0x20, 0xe2,
	0x6d, 0xb8, 0xdf, 0x97, 0x5e, 0xe8, 0x1c, 0xbb, 0x82, 0xfb, 0xc0, 0xf9, 0x12, 0x50, 0x5a, 0xc7,
	0x10, 0x83, 0x10, 0x48, 0x93, 0x8f, 0xa7, 0x8d, 0x35, 0xb6, 0xa2, 0x94, 0x94, 0x7e, 0xef, 0xa5,
	0xc6, 0x9f, 0x33, 0x6c, 0x1e, 0x01, 0x35, 0x61, 0xda, 0x97, 0x87, 0x3e, 0x78, 0xef, 0x46, 0x18,
	0x99, 0x91, 0x20, 0xe5, 0x96, 0xb6, 0x6e, 0x77, 0xe3, 0xaf, 0x22, 0x8f, 0x8f, 0x2f, 0x09, 0xad,
	0x8e, 0x08, 0xb9, 0xfb, 0x29, 0x87, 0xfc, 0x70, 0xbf, 0x58, 0x2a, 0x54, 0xf2, 0xb5, 0x52, 0x51,
	0x5b, 0x61, 0x0b, 0x01, 0x02, 0x78, 0xdb, 0xe7, 0x98, 0x41, 0x68, 0x9a, 0x69, 0x08, 0xd1, 0x25,
	0x48, 0x6e, 0xfb, 0x02, 0x12, 0x9c, 0x87, 0xbe, 0xb0, 0x42, 0xd2, 0x6c, 0x3e, 0x31, 0x59, 0x01,
	0x99, 0x2a, 0xef, 0xbd, 0x8e, 0xd1, 0xea, 0x88, 0x65, 0x7c, 0xcd, 0x6e, 0xf5, 0x88, 0x89, 0x97,
	0xb5, 0x43, 0x2d, 0xcb, 0x66, 0x5d, 0x14, 0x00, 0x83, 0x2f, 0x43, 0xec, 0xe1, 0x52, 0xd3, 0xb2,
	0x84, 0x1f, 0x41, 0xf9, 0x70, 0x6c, 0xcc, 0xd0, 0x49, 0x08, 0x49, 0x38, 0xb5, 0x05, 0xe4, 0xa5,
	0x17, 0x9f, 0x4e, 0xe2, 0xa9, 0xa1, 0xb3, 0x35, 0x64, 0x99, 0x3f, 0x36, 0x3d, 0x5b, 0x7a, 0x85,
	0x76, 0x00, 0x61, 0x1d, 0xed, 0x42, 0x88, 0x19, 0x7f, 0x9a, 0x57, 0x21, 0x71, 0x10, 0x98, 0x56,
	0xe4, 0x58, 0x82, 0xb4, 0xac, 0x8b, 0xa8, 0x28, 0x22, 0xd3, 0x71, 0x07, 0xef, 0x9d, 0xd2, 0x6e,
	0xb1, 0x39, 0x0a, 0x55, 0x8a, 0xd0, 0x09, 0x72, 0xca, 0x27, 0x6c, 0x81, 0x12, 0xc3, 0x56, 0x44,
	0x74, 0xe9, 0x7c, 0x92, 0xd0, 0x05, 0x62, 0xd9, 0x00, 0x78, 0xc2, 0x13, 0x5c, 0x1b, 0x8a, 0x00,
	0xaa, 0x06, 0x57, 0xa1, 0xaa, 0x8a, 0x44, 0x87, 0x31, 0x16, 0x0e, 0xaa, 0x09, 0x8b, 0xda, 0x33,
	0x36, 0x63, 0xb5, 0xb8, 0xef, 0x58, 0x67, 0x71, 0x8a, 0x6b, 0x5d, 0x27, 0xf1, 0xc2, 0x1e, 0x3f,
	0x28, 0x17, 0xde, 0xe4, 0x96, 0x92, 0x5f, 0xb5, 0xfc, 0x7e, 0xb1, 0xba, 0xa7, 0xed, 0x0c, 0x14,
	0x98, 0xb9, 0xd1, 0x05, 0x66, 0xf5, 0x4a, 0x81, 0xd9, 0x2b, 0x15, 0xcb, 0x87, 0x7b, 0x64, 0x60,
	0xd7, 0x95, 0x17, 0xdc, 0x3a, 0x15, 0x66, 0x14, 0x52, 0x5e, 0xcf, 0x62, 0x71, 0x38, 0x71, 0x5c,
	0x97, 0x5f, 0x38, 0xd1, 0x29, 0x87, 0x7b, 0x42, 0xca, 0xd2, 0x59, 0x4d, 0x63, 0xcc, 0xf1, 0xa2,
	0x40, 0x2a, 0xf1, 0x17, 0xe8, 0x4c, 0x67, 0x59, 0xc5, 0x01, 0xdd, 0x0f, 0x7e, 0x84, 0x50, 0xa4,
	0x4c, 0x9c, 0xd5, 0xf2, 0x6c, 0x81, 0x74, 0x4d, 0x4a, 0xe7, 0x12, 0x49, 0xb8, 0xda, 0x95, 0x10,
	0x9d, 0x73, 0xa4, 0x80, 0xb9, 0x95, 0xdd, 0xfc, 0x5e, 0x89, 0x1f, 0x95, 0x6a, 0xf5, 0x72, 0x75,
	0x9f, 0x17, 0x0e, 0x6b, 0xb5, 0xd2, 0x7e, 0x03, 0x3d, 0xe3, 0x9b, 0x61, 0x48, 0x01, 0x77, 0x93,
	0xdc, 0x80, 0xbe, 0x12, 0x66, 0xb3, 0x2d, 0xc0, 0x57, 0x59, 0xb2, 0xdf, 0x3d, 0xb6, 0xea, 0x0b,
	0xcf, 0x04, 0x25, 0xb9, 0x2b, 0xce, 0x85, 0xcb, 0x03, 0xd3, 0x76, 0x4c, 0x2f, 0xd2, 0x6f, 0x11,
	0x18, 0xaa, 0x4e, 0x3f, 0xd8, 0x76, 0x02, 0xa1, 0x6b, 0x04, 0x03, 0xed, 0x5d, 0x69, 0xda, 0x9c,
	0xc4, 0x04, 0x86, 0xcb, 0x74, 0x0a, 0xa9, 0x0a, 0xae, 0x73, 0xa0, 0xc9, 0x50, 0xdd, 0x5d, 0xa1,
	0x43, 0xac, 0x39, 0x8a, 0x2f, 0x8f, 0x81, 0x17, 0x8e, 0x17, 0xea, 0xab, 0x04, 0x04, 0x1b, 0x20,
	0xd7, 0x3e, 0xc8, 0x1a, 0x41, 0xd6, 0xd8, 0x0c, 0x58, 0xc7, 0x3a, 0x35, 0x23, 0x7d, 0x1d, 0x8d,
	0x92, 0xbb, 0x71, 0x62, 0xba, 0xa1, 0xd0, 0xbe, 0x84, 0xcc, 0xc7, 0x8e, 0x16, 0x9d, 0x43, 0x40,
	0xb9, 0xe6, 0xa5, 0xae, 0x93, 0x71, 0xd6, 0x94, 0x71, 0x28, 0x9a, 0x8a, 0xf0, 0x5f, 0xe3, 0xa8,
	0x88, 0xd0, 0xdc, 0xcd, 0x9e, 0x13, 0xfe, 0xd9, 0xd6, 0xa7, 0xd8, 0xc6, 0xa0, 0x8c, 0xea, 0xb7,
	0x13, 0x17, 0x58, 0xed, 0x30, 0x92, 0x2d, 0xde, 0x8d, 0xad, 0x0d, 0xb2, 0xd6, 0x3a, 0xbb, 0x19,
	0x43, 0xb0, 0xd8, 0x53, 0x34, 0xdf, 0x21, 0xc0, 0x6d, 0x76, 0x2b, 0x06, 0xf4, 0x84, 0xd0, 0xdd,
	0x58, 0xe4, 0xa5, 0x5e, 0x6e, 0x60, 0x96, 0x7b, 0x94, 0x13, 0x60, 0xc8, 0x84, 0x97, 0xe3, 0x71,
	0x1f, 0xc4, 0xc2, 0x72, 0x74, 0x3f, 0x31, 0x72, 0xe7, 0x9e, 0x5f, 0x76, 0x60, 0xef, 0x12, 0xec,
	0x11, 0xbb, 0x0f, 0xa2, 0xf2, 0x53, 0x19, 0x46, 0x9c, 0x6a, 0x7c, 0x24, 0x79, 0x7f, 0x6a, 0x3c,
	0x20, 0xbc, 0x32, 0x63, 0xe7, 0x0e, 0x54, 0x3c, 0xc7, 0x75, 0x40, 0x96, 0x87, 0xa9, 0xf5, 0xea,
	0xa8, 0x83, 0x90, 0xdb, 0x48, 0x39, 0xe4, 0x07, 0xed, 0x63, 0xd7, 0xb1, 0x7a, 0xd4, 0x26, 0x15,
	0xac, 0xc0, 0xd2, 0x0d, 0xaa, 0x27, 0x60, 0x29, 0x15, 0x3d, 0x89, 0xab, 0x40, 0xbb, 0xf7, 0x12,
	0xad, 0x63, 0x48, 0xa2, 0xf5, 0xfb, 0x49, 0x74, 0xf5, 0xb2, 0x8a, 0x1c, 0x28, 0xd5, 0x91, 0xd9,
	0xf2, 0xf5, 0x0f, 0x00, 0x3c, 0x03, 0x13, 0xc4, 0x3a, 0xb4, 0xd0, 0x73, 0x47, 0xb6, 0xc3, 0x78,
	0x16, 0x91, 0xa0, 0x58, 0xe0, 0x80, 0x07, 0x1e, 0x91, 0xd5, 0x50, 0xfb, 0xe4, 0x46, 0xec, 0x55,
	0xd8, 0xb5, 0xfc, 0xc0, 0x91, 0x01, 0x8a, 0x8b, 0x05, 0x45, 0xff, 0x90, 0xee, 0x39, 0x60, 0x0f,
	0x86, 0xe3, 0x59, 0xa7, 0x12, 0xca, 0x96, 0xfe, 0x98, 0x6c, 0x72, 0x47, 0xd9, 0xa4, 0x9e, 0xa0,
	0x1d, 0xc4, 0x58, 0x34, 0x0d, 0xcc, 0x61, 0xc5, 0xde, 0x29, 0xef, 0x43, 0xc1, 0x6e, 0xb0, 0xf7,
	0x63, 0x8e, 0x5e, 0xa7, 0x53, 0xa6, 0x71, 0xfd, 0xbf, 0xb7, 0xe2, 0x5a, 0x67, 0x8b, 0xbe, 0xd9,
	0x0e, 0x51, 0xcc, 0x88, 0x72, 0xfd, 0x49, 0x2f, 0x79, 0x27, 0x4c, 0x0f, 0x10, 0xa7, 0xae, 0x50,
	0x72, 0xef, 0xa6, 0x1e, 0xf3, 0x43, 0xcf, 0x75, 0x5a, 0x0e, 0x94, 0x76, 0xe3, 0x8f, 0x13, 0x6c,
	0x7d, 0xa0, 0x40, 0x17, 0xa0, 0xdd, 0x44, 0x02, 0x6b, 0x4e, 0x28, 0xcc, 0x00, 0x2c, 0xdb, 0x9d,
	0xdb, 0x7a, 0xcb, 0xc2, 0x0d, 0x3a, 0x19, 0x1c, 0xd4, 0xa6, 0xc9, 0xac, 0x5f, 0xb0, 0x45, 0x55,
	0xda, 0x93, 0xb2, 0x3d, 0x43, 0xed, 0xe9, 0x61, 0x77, 0xb6, 0x18, 0xd6, 0x14, 0x5e, 0xb1, 0xb9,
	0xd0, 0x3c, 0x57, 0xe1, 0x40, 0xa3, 0xd0, 0xfc, 0xd6, 0xa3, 0x21, 0x54, 0x4a, 0xd2, 0xcd, 0x3a,
	0xa0, 0x63, 0x49, 0xdb, 0xd8, 0x67, 0xb3, 0xc9, 0xff, 0xda, 0x02, 0x9b, 0xa2, 0x99, 0x06, 0x05,
	0x5f, 0xc0, 0xe9, 0x2a, 0x91, 0x0f, 0xbb, 0xca, 0x0d, 0xd4, 0x24, 0x4c, 0xe6, 0xad, 0x49, 0x0a,
	0x51, 0xe8, 0x10, 0xa1, 0xd3, 0xf4, 0xa0, 0x21, 0x06, 0x6a, 0x1e, 0x98, 0x36, 0xfe, 0x9a, 0x61,
	0x77, 0xd3, 0x44, 0xc5, 0x7e, 0x53, 0x77, 0x65, 0x04, 0x5a, 0x4e, 0x51, 0x28, 0x65, 0x06, 0xfa,
	0xc7, 0x6e, 0x81, 0x37, 0x4a, 0xf9, 0xbd, 0xdc, 0x5a, 0xef, 0x2f, 0xbe, 0x5b, 0xad, 0x16, 0xf9,
	0xee, 0xe1, 0x37, 0x75, 0x14, 0x2f, 0x04, 0x0e, 0x6a, 0xf4, 0xd5, 0x76, 0x07, 0xba, 0xca, 0xe4,
	0xe8, 0xae, 0xb2, 0x76, 0xa5, 0xab, 0x1c, 0xe4, 0xeb, 0xf5, 0xf2, 0x51, 0xc9, 0x38, 0x64, 0xb7,
	0xd3, 0x04, 0x2e, 0x48, 0x13, 0x46, 0xf0, 0xef, 0x2d, 0xad, 0xf1, 0x87, 0x0c, 0xfb, 0x60, 0x80,
	0xef, 0x57, 0xd2, 0xf1, 0xb6, 0x03, 0x28, 0xe3, 0x96, 0x19, 0x46, 0x85, 0x53, 0xd3, 0xf3, 0x84,
	0x8b, 0x86, 0xb6, 0xd4, 0xbf, 0x6a, 0xac, 0xa3, 0x2e, 0x41, 0xb3, 0x2e, 0x6e, 0x22, 0x30, 0xb4,
	0x5b, 0x81, 0xe3, 0x47, 0x89, 0x1f, 0xe6, 0x60, 0xa0, 0x5f, 0xeb, 0x82, 0x2d, 0xd9, 0x86, 0x2e,
	0x07, 0x09, 0x82, 0x85, 0x74, 0x32, 0xde, 0x14, 0xd6, 0xbb, 0xf0, 0xce, 0x00, 0x4b, 0x08, 0x34,
	0xb3, 0x19, 0xaf, 0xd8, 0xa3, 0xc1, 0xb8, 0x70, 0x65, 0x28, 0xae, 0x15, 0xcd, 0xf8, 0x82, 0xbd,
	0x18, 0x20, 0x6d, 0xc8, 0x66, 0xd3, 0x1d, 0xa0, 0x2d, 0x40, 0x44, 0x05, 0x26, 0x6c, 0x3b, 0x6a,
	0x60, 0x32, 0x3e, 0x52, 0x5b, 0x4e, 0x1f, 0xe5, 0x1b, 0x18, 0x24, 0x30, 0x69, 0x60, 0x6e, 0x42,
	0x35, 0x92, 0xc0, 0x5a, 0x34, 0x9e, 0xb1, 0x7b, 0xa9, 0xc8, 0x3b, 0x81, 0x6c, 0x61, 0x24, 0x5d,
	0x21, 0x52, 0xb2, 0xc5, 0x43, 0x55, 0x1f, 0x51, 0x45, 0x40, 0x70, 0x1b, 0x9f, 0xa5, 0xa4, 0x6c,
	0xc5, 0x6c, 0x7b, 0xe0, 0xe0, 0xc1, 0x64, 0xa4, 0x49, 0xc7, 0x78, 0xaa, 0xc2, 0x38, 0xef, 0xfb,
	0x2e, 0xcd, 0x4a, 0x0d, 0xd9, 0x47, 0xdd, 0xbb, 0x7b, 0xa8, 0xdb, 0xef, 0xb2, 0x0d, 0x35, 0xfe,
	0x43, 0x01, 0xe8, 0x37, 0x0f, 0xa0, 0x19, 0xbf, 0xcf, 0xa4, 0xa8, 0x5f, 0x71, 0xc2, 0x08, 0xcb,
	0x7c, 0x24, 0xdb, 0x01, 0xf6, 0x3b, 0x10, 0x02, 0x33, 0x38, 0x24, 0x8e, 0xb3, 0x7d, 0x95, 0x43,
	0x79, 0x7e, 0x09, 0x87, 0xfd, 0x66, 0x77, 0xb5, 0xcb, 0xf5, 0x4e, 0x68, 0x53, 0x14, 0xa2, 0xcb,
	0xbd, 0x21, 0x0a, 0xb0, 0x3d, 0x00, 0xe5, 0x34, 0xf5, 0x13, 0xa6, 0x96, 0xbd, 0x6a, 0xb1, 0xc4,
	0xf7, 0xab, 0xfb, 0x25, 0xe3, 0x9f, 0x53, 0xcc, 0x48, 0x95, 0xa8, 0xa6, 0xc6, 0x79, 0x51, 0xc2,
	0xb8, 0x02, 0x21, 0x26, 0x92, 0x49, 0x73, 0x7b, 0xea, 0xbb, 0xbf, 0xdc, 0xcb, 0xe0, 0xb4, 0xd8,
	0x23, 0x70, 0xe2, 0x32, 0x6c, 0xab, 0x57, 0xf4, 0x40, 0x98, 0x9a, 0x24, 0x77, 0xd8, 0x4c, 0xef,
	0x4a, 0x30, 0xbf, 0xf5, 0x7c, 0x48, 0x75, 0x1a, 0xb8, 0x3f, 0x9e, 0x56, 0xf7, 0x88, 0x1a, 0x27,
	0x81, 0x40, 0x7c, 0xdb, 0x86, 0xf1, 0x25, 0xe4, 0x1d, 0xd3, 0x4c, 0x93, 0xb1, 0x00, 0x04, 0x96,
	0xb7, 0xa1, 0x51, 0xf7, 0xc4, 0x05, 0xad, 0x92, 0x68, 0xc7, 0x66, 0xdb, 0x71, 0xed, 0xee, 0x9e,
	0x08, 0xd1, 0xa3, 0x4e, 0x5c, 0xd9, 0x94, 0x34, 0x8d, 0x4e, 0x61, 0x75, 0xa1, 0x99, 0x83, 0x91,
	0xa5, 0xd3, 0xc6, 0x14, 0xb5, 0xfd, 0xf5, 0xd9, 0x7c, 0xe1, 0xad, 0x6c, 0x4e, 0xb3, 0x2a, 0xb4,
	0x72, 0xcf, 0xc6, 0x5d, 0x36, 0x04, 0x3b, 0xc5, 0xd3, 0x27, 0x04, 0x53, 0x32, 0x87, 0x2c, 0x91,
	0x80, 0x29, 0xb3, 0xd0, 0xcd, 0x44, 0xae, 0xee, 0xd4, 0xa2, 0x92, 0x3f, 0x1e, 0x2d, 0x07, 0x86,
	0xf8, 0x5b, 0x63, 0x4e, 0x34, 0x5a, 0x32, 0xec, 0xc7, 0x1d, 0x38, 0x99, 0x2d, 0x37, 0x5e, 0xb2,
	0x85, 0x3e, 0xeb, 0xa7, 0xe4, 0x1c, 0xce, 0x9f, 0xb1, 0x2c, 0xdd, 0xf5, 0xc3, 0x88, 0x52, 0xb2,
	0xb7, 0xd7, 0xb3, 0x23, 0x62, 0xfe, 0x15, 0x9b, 0xc1, 0x1e, 0x08, 0xe3, 0x0e, 0xed, 0x4f, 0xf3,
	0x5b, 0x8f, 0xc7, 0x8d, 0x14, 0x43, 0xb0, 0x45, 0xc4, 0xea, 0xcd, 0xac, 0x2b, 0x16, 0x89, 0x97,
	0xe6, 0x4f, 0xfb, 0x7d, 0x38, 0xf1, 0x76, 0x79, 0x53, 0x53, 0x89, 0x3c, 0xa8, 0x54, 0x8f, 0xe8,
	0x99, 0xb7, 0x14, 0xfd, 0x37, 0x69, 0xd5, 0x01, 0x7b, 0x45, 0xca, 0xba, 0x37, 0x58, 0xb0, 0x26,
	0x92, 0x28, 0xef, 0xa4, 0xc4, 0xe4, 0x95, 0x81, 0xba, 0x33, 0x59, 0x52, 0x8f, 0x1e, 0x3e, 0x27,
	0x62, 0xe9, 0x9b, 0x31, 0xec, 0x14, 0xf7, 0xa1, 0x30, 0x1d, 0x4d, 0x0b, 0x9d, 0x37, 0x87, 0x81,
	0x4d, 0x1d, 0xf1, 0xe2, 0xc5, 0x9c, 0x9e, 0x1b, 0x74, 0xb2, 0xe0, 0x57, 0xd5, 0xf2, 0x3e, 0xaf,
	0x95, 0xea, 0xd0, 0x77, 0x79, 0xfd, 0xb0, 0x50, 0x28, 0xd5, 0xeb, 0xc6, 0x73, 0x55, 0x7e, 0x76,
	0x28, 0x1f, 0x52, 0xec, 0xf3, 0x6d, 0x1b, 0x84, 0xc2, 0xcc, 0x50, 0x19, 0xa3, 0x8c, 0xba, 0x68,
	0xfc, 0x9c, 0xbd, 0x37, 0x92, 0xec, 0x87, 0x3b, 0xe3, 0xa5, 0xea, 0xdb, 0xbb, 0x58, 0x20, 0x60,
	0x4c, 0x16, 0x43, 0x65, 0x83, 0x6a, 0x4c, 0x55, 0x24, 0x11, 0xcd, 0x52, 0x6d, 0x75, 0x14, 0xe1,
	0x0f, 0x97, 0xee, 0xff, 0x95, 0xd9, 0xd0, 0xce, 0xe6, 0xb1, 0x2b, 0x0a, 0xe4, 0xc7, 0x24, 0x60,
	0xc3, 0x44, 0xb4, 0xd5, 0xd4, 0xd0, 0x37, 0x5a, 0xec, 0xf1, 0x48, 0xe2, 0xde, 0xc2, 0x3f, 0xb8,
	0x5a, 0xa9, 0xf8, 0x83, 0x8c, 0x57, 0x11, 0xa9, 0x8a, 0xcf, 0x44, 0xb2, 0x9c, 0xf6, 0x95, 0x24,
	0xd5, 0xc5, 0x1d, 0xe5, 0xab, 0x6b, 0xae, 0xd3, 0xb6, 0xfb, 0x1e, 0x28, 0x95, 0x41, 0x36, 0xbb,
	0x06, 0x19, 0x47, 0x5a, 0xe3, 0x6b, 0xf6, 0x60, 0x10, 0xb7, 0xa2, 0x6c, 0x3c, 0xda, 0x28, 0x29,
	0x8a, 0xa2, 0x4e, 0x53, 0xc6, 0xdf, 0x27, 0x94, 0x3f, 0x87, 0xf0, 0xec, 0x6f, 0x92, 0x57, 0x1f,
	0x83, 0x86, 0x30, 0xc5, 0x1a, 0xaa, 0x30, 0xa9, 0x5c, 0xaa, 0x3c, 0x05, 0xe3, 0xa9, 0xee, 0x18,
	0x1b, 0x4f, 0xf5, 0xcc, 0xd4, 0x86, 0x76, 0x23, 0x29, 0xba, 0x31, 0x88, 0xb8, 0x4c, 0x0f, 0x5b,
	0x9f, 0x67, 0x86, 0xb6, 0x8c, 0xd9, 0xf4, 0x96, 0x31, 0x37, 0x66, 0xcb, 0x60, 0x89, 0xd3, 0x4f,
	0xcd, 0x9e, 0x46, 0x4c, 0xef, 0x2e, 0xc6, 0x31, 0x7b, 0x78, 0xad, 0xd5, 0xb4, 0x1f, 0x5f, 0x4d,
	0x80, 0x8f, 0x87, 0xf9, 0x3b, 0xcd, 0xde, 0xc6, 0xaf, 0x27, 0x99, 0x8e, 0xa8, 0x5f, 0xb7, 0x61,
	0x26, 0x44, 0xfc, 0x2e, 0xee, 0xa5, 0x76, 0x97, 0xad, 0xc4, 0x8f, 0xa6, 0x6f, 0xe1, 0xed, 0xa1,
	0xaf, 0xe7, 0x3f, 0x61, 0x2b, 0x16, 0xad, 0x4c, 0xbc, 0x7f, 0x37, 0x9b, 0x1a, 0x77, 0x37, 0x03,
	0x23, 0xab, 0x37, 0x27, 0xd3, 0xbb, 0x44, 0xd7, 0x90, 0x0f, 0x67, 0xb5, 0x0a, 0x5b, 0x8e, 0xa5,
	0x8c, 0x9f, 0x87, 0xd1, 0xd2, 0x21, 0xf8, 0x12, 0xad, 0xf1, 0xb4, 0xcb, 0x36, 0x4d, 0xc5, 0xcd,
	0x0a, 0x51, 0xd6, 0x88, 0x10, 0x5f, 0x9a, 0xfb, 0x9f, 0xa4, 0x67, 0x46, 0x3f, 0x49, 0x6f, 0x54,
	0x58, 0x76, 0x80, 0xc1, 0x90, 0xdc, 0x80, 0xa1, 0x08, 0xf9, 0xc6, 0x59, 0x0e, 0x71, 0x17, 0x0b,
	0xdb, 0xd9, 0x36, 0x66, 0x8c, 0xa6, 0xca, 0xbc, 0x34, 0x39, 0xff, 0xbb, 0x0d, 0xe3, 0x1f, 0x19,
	0xf5, 0x0e, 0x0b, 0x5b, 0x1d, 0x16, 0x81, 0x11, 0x2b, 0xf7, 0xb0, 0x16, 0x59, 0x60, 0xec, 0x07,
	0xaf, 0x8b, 0x9d, 0x8d, 0x70, 0xea, 0xad, 0xf7, 0xd7, 0xc1, 0xf7, 0x54, 0xe3, 0x77, 0x19, 0xf5,
	0x36, 0xde, 0xad, 0x6d, 0xdf, 0x43, 0x2d, 0x6d, 0x40, 0xad, 0x2b, 0x6f, 0xb7, 0xea, 0xa5, 0x7e,
	0x9e, 0x4d, 0x26, 0xe1, 0x37, 0x97, 0x92, 0x06, 0x33, 0x54, 0xf4, 0x7e, 0x9b, 0x61, 0xcb, 0x28,
	0x50, 0xe9, 0x3c, 0x7e, 0x90, 0xfe, 0x1f, 0xcb, 0xb3, 0xa5, 0x5e, 0xc3, 0xd1, 0xa2, 0x07, 0xf8,
	0x69, 0x41, 0x8d, 0xa2, 0x9d, 0xf5, 0x1c, 0x22, 0xf2, 0xc2, 0xf4, 0x22, 0xfc, 0xc4, 0x06, 0x3f,
	0xd5, 0x0c, 0x69, 0x7c, 0xae, 0xf6, 0x40, 0xa4, 0x01, 0xc4, 0x5d, 0xfc, 0x5e, 0x56, 0xa1, 0x72,
	0x89, 0x3b, 0x8a, 0x27, 0x2e, 0x78, 0x5c, 0x3c, 0xe9, 0x31, 0x23, 0xa9, 0xd8, 0xc6, 0x81, 0xda,
	0xdf, 0xe8, 0x23, 0x80, 0xe9, 0x59, 0xc2, 0x25, 0xc2, 0xb2, 0x77, 0xee, 0x44, 0x22, 0xc4, 0x22,
	0xea, 0xd0, 0xbf, 0x76, 0x42, 0xa6, 0x2a, 0xd7, 0x74, 0x2f, 0x84, 0x3e, 0xcd, 0x25, 0x4f, 0xff,
	0xd3, 0xc6, 0x93, 0x2e, 0xc7, 0x44, 0x8e, 0xaa, 0x2f, 0xe2, 0x7d, 0x18, 0x53, 0x4b, 0xc2, 0xaf,
	0x58, 0xe6, 0x2d, 0x55, 0xd0, 0xe8, 0xa5, 0x19, 0x11, 0xf7, 0x44, 0xd0, 0x14, 0xea, 0x72, 0xb4,
	0x8d, 0x8c, 0x4e, 0x41, 0x60, 0xe2, 0xdf, 0xe9, 0x31, 0xc6, 0xeb, 0x2e, 0xff, 0x2e, 0x4d, 0x27,
	0xe7, 0x40, 0x57, 0xc7, 0x73, 0x22, 0xc7, 0x8c, 0xe4, 0x55, 0x4a, 0x9c, 0x5c, 0xd4, 0xa7, 0x0a,
	0xf2, 0x18, 0xd6, 0xec, 0xf5, 0x34, 0x4e, 0xb0, 0xfa, 0x6a, 0xbb, 0x57, 0x52, 0x37, 0x7e, 0x3c,
	0x2b, 0x0d, 0xdc, 0x8a, 0xc9, 0xbb, 0x71, 0xc6, 0x53, 0x01, 0xbc, 0xfa, 0xe6, 0xc9, 0xdf, 0xe6,
	0x98, 0x3e, 0xec, 0xcb, 0x13, 0xb4, 0x9c, 0x31, 0xbe, 0x4b, 0x65, 0xdf, 0xd1, 0x1e, 0xb2, 0x7b,
	0x23, 0xf0, 0xaa, 0x6f, 0xb2, 0x19, 0xed, 0x29, 0xfb, 0x68, 0x04, 0x4a, 0xde, 0xa5, 0x0f, 0x43,
	0x75, 0x8a, 0x65, 0x80, 0x65, 0x27, 0xb4, 0x27, 0xec, 0xd1, 0x08, 0x82, 0x1d, 0x28, 0xe2, 0xbb,
	0xea, 0xe3, 0x5b, 0xd6, 0x86, 0x3a, 0xfb, 0xe1, 0x35, 0xb8, 0xc2, 0x2e, 0x37, 0x3d, 0x19, 0x88,
	0xac, 0xd0, 0xb6, 0xd8, 0xe6, 0x08, 0x64, 0xfa, 0xbf, 0x65, 0x9e, 0x61, 0x55, 0x76, 0x42, 0x6c,
	0x78, 0x76, 0xf6, 0x44, 0xfb, 0x98, 0x3d, 0x1e, 0x41, 0xa3, 0x0a, 0x76, 0xf5, 0xe4, 0x04, 0xbf,
	0x27, 0x65, 0x9b, 0xe3, 0xdf, 0x50, 0x90, 0xd2, 0xb5, 0xe5, 0x85, 0x97, 0x3d, 0xd5, 0x36, 0xd9,
	0x93, 0x11, 0x34, 0xaa, 0x55, 0x54, 0xdb, 0x51, 0xf5, 0x04, 0x7a, 0x85, 0xc8, 0x3a, 0xda, 0x4b,
	0xf6, 0x6c, 0x14, 0xbe, 0x6c, 0xf9, 0x22, 0x82, 0x30, 0x3b, 0x17, 0xfb, 0xb2, 0x22, 0x2f, 0x92,
	0xa7, 0xd8, 0xec, 0x2f, 0xb4, 0xe7, 0xec, 0xb3, 0x71, 0x09, 0xa3, 0x43, 0xcf, 0x95, 0xd6, 0x19,
	0x58, 0xe0, 0xec, 0x1a, 0x9d, 0x92, 0xf1, 0xaf, 0x97, 0xc6, 0xd5, 0x7e, 0xc4, 0xbe, 0x18, 0xfb,
	0xaa, 0x92, 0x27, 0xdb, 0xcd, 0xd3, 0xfa, 0x99, 0xe3, 0xba, 0xd8, 0x0d, 0xb3, 0xad, 0xeb, 0xac,
	0xe8, 0x84, 0x21, 0x1c, 0x95, 0x29, 0x97, 0x5c, 0xa2, 0xcb, 0x7a, 0xe3, 0xdf, 0x58, 0x33, 0xbd,
	0xb3, 0xba, 0x8f, 0x41, 0xd7, 0x90, 0xb2, 0x62, 0x42, 0x4a, 0x64, 0xa5, 0xf6, 0x8c, 0x3d, 0x1d,
	0x75, 0x23, 0xd5, 0xb8, 0x38, 0x52, 0xcb, 0xaa, 0x3b, 0x66, 0xfd, 0xb1, 0x88, 0x40, 0xbf, 0xa3,
	0x7c, 0xe1, 0x08, 0xa2, 0xf5, 0xc4, 0x01, 0xcb, 0x7c, 0x0b, 0x9b, 0xc6, 0xf3, 0x11, 0x44, 0x3f,
	0x13, 0xe2, 0x0c, 0xd6, 0xa8, 0x06, 0xee, 0xe2, 0xe2, 0x72, 0xdb, 0xb4, 0xa9, 0xc6, 0xd6, 0x9d,
	0x5f, 0x89, 0x6c, 0xa0, 0x7d, 0xc9, 0x72, 0x63, 0x93, 0xe2, 0x1b, 0xd7, 0x76, 0x1b, 0x84, 0x05,
	0x25, 0xeb, 0x2d, 0x98, 0x77, 0xb2, 0xa1, 0x56, 0x64, 0x3f, 0x1d, 0x9b, 0xbe, 0x0c, 0xf0, 0x73,
	0xc7, 0x6e, 0x9b, 0x6e, 0xc2, 0x45, 0x99, 0x2a, 0xfa, 0xde, 0x52, 0x28, 0xfa, 0x36, 0xac, 0xfa,
	0x2f, 0xae, 0xb5, 0x5a, 0xec, 0x62, 0xea, 0x79, 0xd5, 0x0b, 0xc8, 0xf5, 0xf0, 0xd4, 0xf1, 0xb3,
	0xe7, 0xdb, 0x37, 0x5e, 0x67, 0xbe, 0xcb, 0xbc, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67,
	0x71, 0xfd, 0x8a, 0x63, 0x22, 0x00, 0x00,
}
