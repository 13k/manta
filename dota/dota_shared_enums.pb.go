// Code generated by protoc-gen-go.
// source: dota_shared_enums.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DOTA_GameMode int32

const (
	DOTA_GameMode_DOTA_GAMEMODE_NONE          DOTA_GameMode = 0
	DOTA_GameMode_DOTA_GAMEMODE_AP            DOTA_GameMode = 1
	DOTA_GameMode_DOTA_GAMEMODE_CM            DOTA_GameMode = 2
	DOTA_GameMode_DOTA_GAMEMODE_RD            DOTA_GameMode = 3
	DOTA_GameMode_DOTA_GAMEMODE_SD            DOTA_GameMode = 4
	DOTA_GameMode_DOTA_GAMEMODE_AR            DOTA_GameMode = 5
	DOTA_GameMode_DOTA_GAMEMODE_INTRO         DOTA_GameMode = 6
	DOTA_GameMode_DOTA_GAMEMODE_HW            DOTA_GameMode = 7
	DOTA_GameMode_DOTA_GAMEMODE_REVERSE_CM    DOTA_GameMode = 8
	DOTA_GameMode_DOTA_GAMEMODE_XMAS          DOTA_GameMode = 9
	DOTA_GameMode_DOTA_GAMEMODE_TUTORIAL      DOTA_GameMode = 10
	DOTA_GameMode_DOTA_GAMEMODE_MO            DOTA_GameMode = 11
	DOTA_GameMode_DOTA_GAMEMODE_LP            DOTA_GameMode = 12
	DOTA_GameMode_DOTA_GAMEMODE_POOL1         DOTA_GameMode = 13
	DOTA_GameMode_DOTA_GAMEMODE_FH            DOTA_GameMode = 14
	DOTA_GameMode_DOTA_GAMEMODE_CUSTOM        DOTA_GameMode = 15
	DOTA_GameMode_DOTA_GAMEMODE_CD            DOTA_GameMode = 16
	DOTA_GameMode_DOTA_GAMEMODE_BD            DOTA_GameMode = 17
	DOTA_GameMode_DOTA_GAMEMODE_ABILITY_DRAFT DOTA_GameMode = 18
	DOTA_GameMode_DOTA_GAMEMODE_EVENT         DOTA_GameMode = 19
	DOTA_GameMode_DOTA_GAMEMODE_ARDM          DOTA_GameMode = 20
	DOTA_GameMode_DOTA_GAMEMODE_1V1MID        DOTA_GameMode = 21
	DOTA_GameMode_DOTA_GAMEMODE_ALL_DRAFT     DOTA_GameMode = 22
)

var DOTA_GameMode_name = map[int32]string{
	0:  "DOTA_GAMEMODE_NONE",
	1:  "DOTA_GAMEMODE_AP",
	2:  "DOTA_GAMEMODE_CM",
	3:  "DOTA_GAMEMODE_RD",
	4:  "DOTA_GAMEMODE_SD",
	5:  "DOTA_GAMEMODE_AR",
	6:  "DOTA_GAMEMODE_INTRO",
	7:  "DOTA_GAMEMODE_HW",
	8:  "DOTA_GAMEMODE_REVERSE_CM",
	9:  "DOTA_GAMEMODE_XMAS",
	10: "DOTA_GAMEMODE_TUTORIAL",
	11: "DOTA_GAMEMODE_MO",
	12: "DOTA_GAMEMODE_LP",
	13: "DOTA_GAMEMODE_POOL1",
	14: "DOTA_GAMEMODE_FH",
	15: "DOTA_GAMEMODE_CUSTOM",
	16: "DOTA_GAMEMODE_CD",
	17: "DOTA_GAMEMODE_BD",
	18: "DOTA_GAMEMODE_ABILITY_DRAFT",
	19: "DOTA_GAMEMODE_EVENT",
	20: "DOTA_GAMEMODE_ARDM",
	21: "DOTA_GAMEMODE_1V1MID",
	22: "DOTA_GAMEMODE_ALL_DRAFT",
}
var DOTA_GameMode_value = map[string]int32{
	"DOTA_GAMEMODE_NONE":          0,
	"DOTA_GAMEMODE_AP":            1,
	"DOTA_GAMEMODE_CM":            2,
	"DOTA_GAMEMODE_RD":            3,
	"DOTA_GAMEMODE_SD":            4,
	"DOTA_GAMEMODE_AR":            5,
	"DOTA_GAMEMODE_INTRO":         6,
	"DOTA_GAMEMODE_HW":            7,
	"DOTA_GAMEMODE_REVERSE_CM":    8,
	"DOTA_GAMEMODE_XMAS":          9,
	"DOTA_GAMEMODE_TUTORIAL":      10,
	"DOTA_GAMEMODE_MO":            11,
	"DOTA_GAMEMODE_LP":            12,
	"DOTA_GAMEMODE_POOL1":         13,
	"DOTA_GAMEMODE_FH":            14,
	"DOTA_GAMEMODE_CUSTOM":        15,
	"DOTA_GAMEMODE_CD":            16,
	"DOTA_GAMEMODE_BD":            17,
	"DOTA_GAMEMODE_ABILITY_DRAFT": 18,
	"DOTA_GAMEMODE_EVENT":         19,
	"DOTA_GAMEMODE_ARDM":          20,
	"DOTA_GAMEMODE_1V1MID":        21,
	"DOTA_GAMEMODE_ALL_DRAFT":     22,
}

func (x DOTA_GameMode) Enum() *DOTA_GameMode {
	p := new(DOTA_GameMode)
	*p = x
	return p
}
func (x DOTA_GameMode) String() string {
	return proto.EnumName(DOTA_GameMode_name, int32(x))
}
func (x *DOTA_GameMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameMode_value, data, "DOTA_GameMode")
	if err != nil {
		return err
	}
	*x = DOTA_GameMode(value)
	return nil
}
func (DOTA_GameMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

type DOTA_GameState int32

const (
	DOTA_GameState_DOTA_GAMERULES_STATE_INIT                     DOTA_GameState = 0
	DOTA_GameState_DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD DOTA_GameState = 1
	DOTA_GameState_DOTA_GAMERULES_STATE_HERO_SELECTION           DOTA_GameState = 2
	DOTA_GameState_DOTA_GAMERULES_STATE_STRATEGY_TIME            DOTA_GameState = 3
	DOTA_GameState_DOTA_GAMERULES_STATE_PRE_GAME                 DOTA_GameState = 4
	DOTA_GameState_DOTA_GAMERULES_STATE_GAME_IN_PROGRESS         DOTA_GameState = 5
	DOTA_GameState_DOTA_GAMERULES_STATE_POST_GAME                DOTA_GameState = 6
	DOTA_GameState_DOTA_GAMERULES_STATE_DISCONNECT               DOTA_GameState = 7
	DOTA_GameState_DOTA_GAMERULES_STATE_TEAM_SHOWCASE            DOTA_GameState = 8
	DOTA_GameState_DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP        DOTA_GameState = 9
	DOTA_GameState_DOTA_GAMERULES_STATE_LAST                     DOTA_GameState = 10
)

var DOTA_GameState_name = map[int32]string{
	0:  "DOTA_GAMERULES_STATE_INIT",
	1:  "DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD",
	2:  "DOTA_GAMERULES_STATE_HERO_SELECTION",
	3:  "DOTA_GAMERULES_STATE_STRATEGY_TIME",
	4:  "DOTA_GAMERULES_STATE_PRE_GAME",
	5:  "DOTA_GAMERULES_STATE_GAME_IN_PROGRESS",
	6:  "DOTA_GAMERULES_STATE_POST_GAME",
	7:  "DOTA_GAMERULES_STATE_DISCONNECT",
	8:  "DOTA_GAMERULES_STATE_TEAM_SHOWCASE",
	9:  "DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP",
	10: "DOTA_GAMERULES_STATE_LAST",
}
var DOTA_GameState_value = map[string]int32{
	"DOTA_GAMERULES_STATE_INIT":                     0,
	"DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD": 1,
	"DOTA_GAMERULES_STATE_HERO_SELECTION":           2,
	"DOTA_GAMERULES_STATE_STRATEGY_TIME":            3,
	"DOTA_GAMERULES_STATE_PRE_GAME":                 4,
	"DOTA_GAMERULES_STATE_GAME_IN_PROGRESS":         5,
	"DOTA_GAMERULES_STATE_POST_GAME":                6,
	"DOTA_GAMERULES_STATE_DISCONNECT":               7,
	"DOTA_GAMERULES_STATE_TEAM_SHOWCASE":            8,
	"DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP":        9,
	"DOTA_GAMERULES_STATE_LAST":                     10,
}

func (x DOTA_GameState) Enum() *DOTA_GameState {
	p := new(DOTA_GameState)
	*p = x
	return p
}
func (x DOTA_GameState) String() string {
	return proto.EnumName(DOTA_GameState_name, int32(x))
}
func (x *DOTA_GameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GameState_value, data, "DOTA_GameState")
	if err != nil {
		return err
	}
	*x = DOTA_GameState(value)
	return nil
}
func (DOTA_GameState) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

type DOTA_GC_TEAM int32

const (
	DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS   DOTA_GC_TEAM = 0
	DOTA_GC_TEAM_DOTA_GC_TEAM_BAD_GUYS    DOTA_GC_TEAM = 1
	DOTA_GC_TEAM_DOTA_GC_TEAM_BROADCASTER DOTA_GC_TEAM = 2
	DOTA_GC_TEAM_DOTA_GC_TEAM_SPECTATOR   DOTA_GC_TEAM = 3
	DOTA_GC_TEAM_DOTA_GC_TEAM_PLAYER_POOL DOTA_GC_TEAM = 4
	DOTA_GC_TEAM_DOTA_GC_TEAM_NOTEAM      DOTA_GC_TEAM = 5
)

var DOTA_GC_TEAM_name = map[int32]string{
	0: "DOTA_GC_TEAM_GOOD_GUYS",
	1: "DOTA_GC_TEAM_BAD_GUYS",
	2: "DOTA_GC_TEAM_BROADCASTER",
	3: "DOTA_GC_TEAM_SPECTATOR",
	4: "DOTA_GC_TEAM_PLAYER_POOL",
	5: "DOTA_GC_TEAM_NOTEAM",
}
var DOTA_GC_TEAM_value = map[string]int32{
	"DOTA_GC_TEAM_GOOD_GUYS":   0,
	"DOTA_GC_TEAM_BAD_GUYS":    1,
	"DOTA_GC_TEAM_BROADCASTER": 2,
	"DOTA_GC_TEAM_SPECTATOR":   3,
	"DOTA_GC_TEAM_PLAYER_POOL": 4,
	"DOTA_GC_TEAM_NOTEAM":      5,
}

func (x DOTA_GC_TEAM) Enum() *DOTA_GC_TEAM {
	p := new(DOTA_GC_TEAM)
	*p = x
	return p
}
func (x DOTA_GC_TEAM) String() string {
	return proto.EnumName(DOTA_GC_TEAM_name, int32(x))
}
func (x *DOTA_GC_TEAM) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTA_GC_TEAM_value, data, "DOTA_GC_TEAM")
	if err != nil {
		return err
	}
	*x = DOTA_GC_TEAM(value)
	return nil
}
func (DOTA_GC_TEAM) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

type EEvent int32

const (
	EEvent_EVENT_ID_NONE                    EEvent = 0
	EEvent_EVENT_ID_DIRETIDE                EEvent = 1
	EEvent_EVENT_ID_SPRING_FESTIVAL         EEvent = 2
	EEvent_EVENT_ID_FROSTIVUS_2013          EEvent = 3
	EEvent_EVENT_ID_COMPENDIUM_2014         EEvent = 4
	EEvent_EVENT_ID_NEXON_PC_BANG           EEvent = 5
	EEvent_EVENT_ID_PWRD_DAC_2015           EEvent = 6
	EEvent_EVENT_ID_NEW_BLOOM_2015          EEvent = 7
	EEvent_EVENT_ID_INTERNATIONAL_2015      EEvent = 8
	EEvent_EVENT_ID_FALL_MAJOR_2015         EEvent = 9
	EEvent_EVENT_ID_ORACLE_PA               EEvent = 10
	EEvent_EVENT_ID_NEW_BLOOM_2015_PREBEAST EEvent = 11
	EEvent_EVENT_ID_FROSTIVUS               EEvent = 12
	EEvent_EVENT_ID_WINTER_MAJOR_2016       EEvent = 13
	EEvent_EVENT_ID_INTERNATIONAL_2016      EEvent = 14
)

var EEvent_name = map[int32]string{
	0:  "EVENT_ID_NONE",
	1:  "EVENT_ID_DIRETIDE",
	2:  "EVENT_ID_SPRING_FESTIVAL",
	3:  "EVENT_ID_FROSTIVUS_2013",
	4:  "EVENT_ID_COMPENDIUM_2014",
	5:  "EVENT_ID_NEXON_PC_BANG",
	6:  "EVENT_ID_PWRD_DAC_2015",
	7:  "EVENT_ID_NEW_BLOOM_2015",
	8:  "EVENT_ID_INTERNATIONAL_2015",
	9:  "EVENT_ID_FALL_MAJOR_2015",
	10: "EVENT_ID_ORACLE_PA",
	11: "EVENT_ID_NEW_BLOOM_2015_PREBEAST",
	12: "EVENT_ID_FROSTIVUS",
	13: "EVENT_ID_WINTER_MAJOR_2016",
	14: "EVENT_ID_INTERNATIONAL_2016",
}
var EEvent_value = map[string]int32{
	"EVENT_ID_NONE":                    0,
	"EVENT_ID_DIRETIDE":                1,
	"EVENT_ID_SPRING_FESTIVAL":         2,
	"EVENT_ID_FROSTIVUS_2013":          3,
	"EVENT_ID_COMPENDIUM_2014":         4,
	"EVENT_ID_NEXON_PC_BANG":           5,
	"EVENT_ID_PWRD_DAC_2015":           6,
	"EVENT_ID_NEW_BLOOM_2015":          7,
	"EVENT_ID_INTERNATIONAL_2015":      8,
	"EVENT_ID_FALL_MAJOR_2015":         9,
	"EVENT_ID_ORACLE_PA":               10,
	"EVENT_ID_NEW_BLOOM_2015_PREBEAST": 11,
	"EVENT_ID_FROSTIVUS":               12,
	"EVENT_ID_WINTER_MAJOR_2016":       13,
	"EVENT_ID_INTERNATIONAL_2016":      14,
}

func (x EEvent) Enum() *EEvent {
	p := new(EEvent)
	*p = x
	return p
}
func (x EEvent) String() string {
	return proto.EnumName(EEvent_name, int32(x))
}
func (x *EEvent) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EEvent_value, data, "EEvent")
	if err != nil {
		return err
	}
	*x = EEvent(value)
	return nil
}
func (EEvent) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

type DOTALeaverStatusT int32

const (
	DOTALeaverStatusT_DOTA_LEAVER_NONE                     DOTALeaverStatusT = 0
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED             DOTALeaverStatusT = 1
	DOTALeaverStatusT_DOTA_LEAVER_DISCONNECTED_TOO_LONG    DOTALeaverStatusT = 2
	DOTALeaverStatusT_DOTA_LEAVER_ABANDONED                DOTALeaverStatusT = 3
	DOTALeaverStatusT_DOTA_LEAVER_AFK                      DOTALeaverStatusT = 4
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED          DOTALeaverStatusT = 5
	DOTALeaverStatusT_DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG DOTALeaverStatusT = 6
	DOTALeaverStatusT_DOTA_LEAVER_FAILED_TO_READY_UP       DOTALeaverStatusT = 7
	DOTALeaverStatusT_DOTA_LEAVER_DECLINED                 DOTALeaverStatusT = 8
)

var DOTALeaverStatusT_name = map[int32]string{
	0: "DOTA_LEAVER_NONE",
	1: "DOTA_LEAVER_DISCONNECTED",
	2: "DOTA_LEAVER_DISCONNECTED_TOO_LONG",
	3: "DOTA_LEAVER_ABANDONED",
	4: "DOTA_LEAVER_AFK",
	5: "DOTA_LEAVER_NEVER_CONNECTED",
	6: "DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG",
	7: "DOTA_LEAVER_FAILED_TO_READY_UP",
	8: "DOTA_LEAVER_DECLINED",
}
var DOTALeaverStatusT_value = map[string]int32{
	"DOTA_LEAVER_NONE":                     0,
	"DOTA_LEAVER_DISCONNECTED":             1,
	"DOTA_LEAVER_DISCONNECTED_TOO_LONG":    2,
	"DOTA_LEAVER_ABANDONED":                3,
	"DOTA_LEAVER_AFK":                      4,
	"DOTA_LEAVER_NEVER_CONNECTED":          5,
	"DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG": 6,
	"DOTA_LEAVER_FAILED_TO_READY_UP":       7,
	"DOTA_LEAVER_DECLINED":                 8,
}

func (x DOTALeaverStatusT) Enum() *DOTALeaverStatusT {
	p := new(DOTALeaverStatusT)
	*p = x
	return p
}
func (x DOTALeaverStatusT) String() string {
	return proto.EnumName(DOTALeaverStatusT_name, int32(x))
}
func (x *DOTALeaverStatusT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTALeaverStatusT_value, data, "DOTALeaverStatusT")
	if err != nil {
		return err
	}
	*x = DOTALeaverStatusT(value)
	return nil
}
func (DOTALeaverStatusT) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

type DOTAConnectionStateT int32

const (
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_UNKNOWN           DOTAConnectionStateT = 0
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_NOT_YET_CONNECTED DOTAConnectionStateT = 1
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_CONNECTED         DOTAConnectionStateT = 2
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_DISCONNECTED      DOTAConnectionStateT = 3
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_ABANDONED         DOTAConnectionStateT = 4
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_LOADING           DOTAConnectionStateT = 5
	DOTAConnectionStateT_DOTA_CONNECTION_STATE_FAILED            DOTAConnectionStateT = 6
)

var DOTAConnectionStateT_name = map[int32]string{
	0: "DOTA_CONNECTION_STATE_UNKNOWN",
	1: "DOTA_CONNECTION_STATE_NOT_YET_CONNECTED",
	2: "DOTA_CONNECTION_STATE_CONNECTED",
	3: "DOTA_CONNECTION_STATE_DISCONNECTED",
	4: "DOTA_CONNECTION_STATE_ABANDONED",
	5: "DOTA_CONNECTION_STATE_LOADING",
	6: "DOTA_CONNECTION_STATE_FAILED",
}
var DOTAConnectionStateT_value = map[string]int32{
	"DOTA_CONNECTION_STATE_UNKNOWN":           0,
	"DOTA_CONNECTION_STATE_NOT_YET_CONNECTED": 1,
	"DOTA_CONNECTION_STATE_CONNECTED":         2,
	"DOTA_CONNECTION_STATE_DISCONNECTED":      3,
	"DOTA_CONNECTION_STATE_ABANDONED":         4,
	"DOTA_CONNECTION_STATE_LOADING":           5,
	"DOTA_CONNECTION_STATE_FAILED":            6,
}

func (x DOTAConnectionStateT) Enum() *DOTAConnectionStateT {
	p := new(DOTAConnectionStateT)
	*p = x
	return p
}
func (x DOTAConnectionStateT) String() string {
	return proto.EnumName(DOTAConnectionStateT_name, int32(x))
}
func (x *DOTAConnectionStateT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAConnectionStateT_value, data, "DOTAConnectionStateT")
	if err != nil {
		return err
	}
	*x = DOTAConnectionStateT(value)
	return nil
}
func (DOTAConnectionStateT) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

type Fantasy_Roles int32

const (
	Fantasy_Roles_FANTASY_ROLE_UNDEFINED Fantasy_Roles = 0
	Fantasy_Roles_FANTASY_ROLE_CORE      Fantasy_Roles = 1
	Fantasy_Roles_FANTASY_ROLE_SUPPORT   Fantasy_Roles = 2
)

var Fantasy_Roles_name = map[int32]string{
	0: "FANTASY_ROLE_UNDEFINED",
	1: "FANTASY_ROLE_CORE",
	2: "FANTASY_ROLE_SUPPORT",
}
var Fantasy_Roles_value = map[string]int32{
	"FANTASY_ROLE_UNDEFINED": 0,
	"FANTASY_ROLE_CORE":      1,
	"FANTASY_ROLE_SUPPORT":   2,
}

func (x Fantasy_Roles) Enum() *Fantasy_Roles {
	p := new(Fantasy_Roles)
	*p = x
	return p
}
func (x Fantasy_Roles) String() string {
	return proto.EnumName(Fantasy_Roles_name, int32(x))
}
func (x *Fantasy_Roles) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Roles_value, data, "Fantasy_Roles")
	if err != nil {
		return err
	}
	*x = Fantasy_Roles(value)
	return nil
}
func (Fantasy_Roles) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

type Fantasy_Team_Slots int32

const (
	Fantasy_Team_Slots_FANTASY_SLOT_NONE    Fantasy_Team_Slots = 0
	Fantasy_Team_Slots_FANTASY_SLOT_CORE    Fantasy_Team_Slots = 1
	Fantasy_Team_Slots_FANTASY_SLOT_SUPPORT Fantasy_Team_Slots = 2
	Fantasy_Team_Slots_FANTASY_SLOT_ANY     Fantasy_Team_Slots = 3
	Fantasy_Team_Slots_FANTASY_SLOT_BENCH   Fantasy_Team_Slots = 4
)

var Fantasy_Team_Slots_name = map[int32]string{
	0: "FANTASY_SLOT_NONE",
	1: "FANTASY_SLOT_CORE",
	2: "FANTASY_SLOT_SUPPORT",
	3: "FANTASY_SLOT_ANY",
	4: "FANTASY_SLOT_BENCH",
}
var Fantasy_Team_Slots_value = map[string]int32{
	"FANTASY_SLOT_NONE":    0,
	"FANTASY_SLOT_CORE":    1,
	"FANTASY_SLOT_SUPPORT": 2,
	"FANTASY_SLOT_ANY":     3,
	"FANTASY_SLOT_BENCH":   4,
}

func (x Fantasy_Team_Slots) Enum() *Fantasy_Team_Slots {
	p := new(Fantasy_Team_Slots)
	*p = x
	return p
}
func (x Fantasy_Team_Slots) String() string {
	return proto.EnumName(Fantasy_Team_Slots_name, int32(x))
}
func (x *Fantasy_Team_Slots) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Team_Slots_value, data, "Fantasy_Team_Slots")
	if err != nil {
		return err
	}
	*x = Fantasy_Team_Slots(value)
	return nil
}
func (Fantasy_Team_Slots) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

type Fantasy_Selection_Mode int32

const (
	Fantasy_Selection_Mode_FANTASY_SELECTION_INVALID        Fantasy_Selection_Mode = 0
	Fantasy_Selection_Mode_FANTASY_SELECTION_LOCKED         Fantasy_Selection_Mode = 1
	Fantasy_Selection_Mode_FANTASY_SELECTION_SHUFFLE        Fantasy_Selection_Mode = 2
	Fantasy_Selection_Mode_FANTASY_SELECTION_FREE_PICK      Fantasy_Selection_Mode = 3
	Fantasy_Selection_Mode_FANTASY_SELECTION_ENDED          Fantasy_Selection_Mode = 4
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_SEASON     Fantasy_Selection_Mode = 5
	Fantasy_Selection_Mode_FANTASY_SELECTION_PRE_DRAFT      Fantasy_Selection_Mode = 6
	Fantasy_Selection_Mode_FANTASY_SELECTION_DRAFTING       Fantasy_Selection_Mode = 7
	Fantasy_Selection_Mode_FANTASY_SELECTION_REGULAR_SEASON Fantasy_Selection_Mode = 8
)

var Fantasy_Selection_Mode_name = map[int32]string{
	0: "FANTASY_SELECTION_INVALID",
	1: "FANTASY_SELECTION_LOCKED",
	2: "FANTASY_SELECTION_SHUFFLE",
	3: "FANTASY_SELECTION_FREE_PICK",
	4: "FANTASY_SELECTION_ENDED",
	5: "FANTASY_SELECTION_PRE_SEASON",
	6: "FANTASY_SELECTION_PRE_DRAFT",
	7: "FANTASY_SELECTION_DRAFTING",
	8: "FANTASY_SELECTION_REGULAR_SEASON",
}
var Fantasy_Selection_Mode_value = map[string]int32{
	"FANTASY_SELECTION_INVALID":        0,
	"FANTASY_SELECTION_LOCKED":         1,
	"FANTASY_SELECTION_SHUFFLE":        2,
	"FANTASY_SELECTION_FREE_PICK":      3,
	"FANTASY_SELECTION_ENDED":          4,
	"FANTASY_SELECTION_PRE_SEASON":     5,
	"FANTASY_SELECTION_PRE_DRAFT":      6,
	"FANTASY_SELECTION_DRAFTING":       7,
	"FANTASY_SELECTION_REGULAR_SEASON": 8,
}

func (x Fantasy_Selection_Mode) Enum() *Fantasy_Selection_Mode {
	p := new(Fantasy_Selection_Mode)
	*p = x
	return p
}
func (x Fantasy_Selection_Mode) String() string {
	return proto.EnumName(Fantasy_Selection_Mode_name, int32(x))
}
func (x *Fantasy_Selection_Mode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Fantasy_Selection_Mode_value, data, "Fantasy_Selection_Mode")
	if err != nil {
		return err
	}
	*x = Fantasy_Selection_Mode(value)
	return nil
}
func (Fantasy_Selection_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

type DOTAChatChannelTypeT int32

const (
	DOTAChatChannelTypeT_DOTAChannelType_Regional      DOTAChatChannelTypeT = 0
	DOTAChatChannelTypeT_DOTAChannelType_Custom        DOTAChatChannelTypeT = 1
	DOTAChatChannelTypeT_DOTAChannelType_Party         DOTAChatChannelTypeT = 2
	DOTAChatChannelTypeT_DOTAChannelType_Lobby         DOTAChatChannelTypeT = 3
	DOTAChatChannelTypeT_DOTAChannelType_Team          DOTAChatChannelTypeT = 4
	DOTAChatChannelTypeT_DOTAChannelType_Guild         DOTAChatChannelTypeT = 5
	DOTAChatChannelTypeT_DOTAChannelType_Fantasy       DOTAChatChannelTypeT = 6
	DOTAChatChannelTypeT_DOTAChannelType_Whisper       DOTAChatChannelTypeT = 7
	DOTAChatChannelTypeT_DOTAChannelType_Console       DOTAChatChannelTypeT = 8
	DOTAChatChannelTypeT_DOTAChannelType_Tab           DOTAChatChannelTypeT = 9
	DOTAChatChannelTypeT_DOTAChannelType_Invalid       DOTAChatChannelTypeT = 10
	DOTAChatChannelTypeT_DOTAChannelType_GameAll       DOTAChatChannelTypeT = 11
	DOTAChatChannelTypeT_DOTAChannelType_GameAllies    DOTAChatChannelTypeT = 12
	DOTAChatChannelTypeT_DOTAChannelType_GameSpectator DOTAChatChannelTypeT = 13
	DOTAChatChannelTypeT_DOTAChannelType_GameCoaching  DOTAChatChannelTypeT = 14
	DOTAChatChannelTypeT_DOTAChannelType_Cafe          DOTAChatChannelTypeT = 15
	DOTAChatChannelTypeT_DOTAChannelType_CustomGame    DOTAChatChannelTypeT = 16
	DOTAChatChannelTypeT_DOTAChannelType_Private       DOTAChatChannelTypeT = 17
	DOTAChatChannelTypeT_DOTAChannelType_PostGame      DOTAChatChannelTypeT = 18
)

var DOTAChatChannelTypeT_name = map[int32]string{
	0:  "DOTAChannelType_Regional",
	1:  "DOTAChannelType_Custom",
	2:  "DOTAChannelType_Party",
	3:  "DOTAChannelType_Lobby",
	4:  "DOTAChannelType_Team",
	5:  "DOTAChannelType_Guild",
	6:  "DOTAChannelType_Fantasy",
	7:  "DOTAChannelType_Whisper",
	8:  "DOTAChannelType_Console",
	9:  "DOTAChannelType_Tab",
	10: "DOTAChannelType_Invalid",
	11: "DOTAChannelType_GameAll",
	12: "DOTAChannelType_GameAllies",
	13: "DOTAChannelType_GameSpectator",
	14: "DOTAChannelType_GameCoaching",
	15: "DOTAChannelType_Cafe",
	16: "DOTAChannelType_CustomGame",
	17: "DOTAChannelType_Private",
	18: "DOTAChannelType_PostGame",
}
var DOTAChatChannelTypeT_value = map[string]int32{
	"DOTAChannelType_Regional":      0,
	"DOTAChannelType_Custom":        1,
	"DOTAChannelType_Party":         2,
	"DOTAChannelType_Lobby":         3,
	"DOTAChannelType_Team":          4,
	"DOTAChannelType_Guild":         5,
	"DOTAChannelType_Fantasy":       6,
	"DOTAChannelType_Whisper":       7,
	"DOTAChannelType_Console":       8,
	"DOTAChannelType_Tab":           9,
	"DOTAChannelType_Invalid":       10,
	"DOTAChannelType_GameAll":       11,
	"DOTAChannelType_GameAllies":    12,
	"DOTAChannelType_GameSpectator": 13,
	"DOTAChannelType_GameCoaching":  14,
	"DOTAChannelType_Cafe":          15,
	"DOTAChannelType_CustomGame":    16,
	"DOTAChannelType_Private":       17,
	"DOTAChannelType_PostGame":      18,
}

func (x DOTAChatChannelTypeT) Enum() *DOTAChatChannelTypeT {
	p := new(DOTAChatChannelTypeT)
	*p = x
	return p
}
func (x DOTAChatChannelTypeT) String() string {
	return proto.EnumName(DOTAChatChannelTypeT_name, int32(x))
}
func (x *DOTAChatChannelTypeT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DOTAChatChannelTypeT_value, data, "DOTAChatChannelTypeT")
	if err != nil {
		return err
	}
	*x = DOTAChatChannelTypeT(value)
	return nil
}
func (DOTAChatChannelTypeT) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{9} }

type EProfileCardSlotType int32

const (
	EProfileCardSlotType_k_EProfileCardSlotType_Empty    EProfileCardSlotType = 0
	EProfileCardSlotType_k_EProfileCardSlotType_Stat     EProfileCardSlotType = 1
	EProfileCardSlotType_k_EProfileCardSlotType_Trophy   EProfileCardSlotType = 2
	EProfileCardSlotType_k_EProfileCardSlotType_Item     EProfileCardSlotType = 3
	EProfileCardSlotType_k_EProfileCardSlotType_Hero     EProfileCardSlotType = 4
	EProfileCardSlotType_k_EProfileCardSlotType_Emoticon EProfileCardSlotType = 5
)

var EProfileCardSlotType_name = map[int32]string{
	0: "k_EProfileCardSlotType_Empty",
	1: "k_EProfileCardSlotType_Stat",
	2: "k_EProfileCardSlotType_Trophy",
	3: "k_EProfileCardSlotType_Item",
	4: "k_EProfileCardSlotType_Hero",
	5: "k_EProfileCardSlotType_Emoticon",
}
var EProfileCardSlotType_value = map[string]int32{
	"k_EProfileCardSlotType_Empty":    0,
	"k_EProfileCardSlotType_Stat":     1,
	"k_EProfileCardSlotType_Trophy":   2,
	"k_EProfileCardSlotType_Item":     3,
	"k_EProfileCardSlotType_Hero":     4,
	"k_EProfileCardSlotType_Emoticon": 5,
}

func (x EProfileCardSlotType) Enum() *EProfileCardSlotType {
	p := new(EProfileCardSlotType)
	*p = x
	return p
}
func (x EProfileCardSlotType) String() string {
	return proto.EnumName(EProfileCardSlotType_name, int32(x))
}
func (x *EProfileCardSlotType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProfileCardSlotType_value, data, "EProfileCardSlotType")
	if err != nil {
		return err
	}
	*x = EProfileCardSlotType(value)
	return nil
}
func (EProfileCardSlotType) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{10} }

type EMatchGroupServerStatus int32

const (
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_OK                  EMatchGroupServerStatus = 0
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_LimitedAvailability EMatchGroupServerStatus = 1
	EMatchGroupServerStatus_k_EMatchGroupServerStatus_Offline             EMatchGroupServerStatus = 2
)

var EMatchGroupServerStatus_name = map[int32]string{
	0: "k_EMatchGroupServerStatus_OK",
	1: "k_EMatchGroupServerStatus_LimitedAvailability",
	2: "k_EMatchGroupServerStatus_Offline",
}
var EMatchGroupServerStatus_value = map[string]int32{
	"k_EMatchGroupServerStatus_OK":                  0,
	"k_EMatchGroupServerStatus_LimitedAvailability": 1,
	"k_EMatchGroupServerStatus_Offline":             2,
}

func (x EMatchGroupServerStatus) Enum() *EMatchGroupServerStatus {
	p := new(EMatchGroupServerStatus)
	*p = x
	return p
}
func (x EMatchGroupServerStatus) String() string {
	return proto.EnumName(EMatchGroupServerStatus_name, int32(x))
}
func (x *EMatchGroupServerStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EMatchGroupServerStatus_value, data, "EMatchGroupServerStatus")
	if err != nil {
		return err
	}
	*x = EMatchGroupServerStatus(value)
	return nil
}
func (EMatchGroupServerStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{11} }

func init() {
	proto.RegisterEnum("dota.DOTA_GameMode", DOTA_GameMode_name, DOTA_GameMode_value)
	proto.RegisterEnum("dota.DOTA_GameState", DOTA_GameState_name, DOTA_GameState_value)
	proto.RegisterEnum("dota.DOTA_GC_TEAM", DOTA_GC_TEAM_name, DOTA_GC_TEAM_value)
	proto.RegisterEnum("dota.EEvent", EEvent_name, EEvent_value)
	proto.RegisterEnum("dota.DOTALeaverStatusT", DOTALeaverStatusT_name, DOTALeaverStatusT_value)
	proto.RegisterEnum("dota.DOTAConnectionStateT", DOTAConnectionStateT_name, DOTAConnectionStateT_value)
	proto.RegisterEnum("dota.Fantasy_Roles", Fantasy_Roles_name, Fantasy_Roles_value)
	proto.RegisterEnum("dota.Fantasy_Team_Slots", Fantasy_Team_Slots_name, Fantasy_Team_Slots_value)
	proto.RegisterEnum("dota.Fantasy_Selection_Mode", Fantasy_Selection_Mode_name, Fantasy_Selection_Mode_value)
	proto.RegisterEnum("dota.DOTAChatChannelTypeT", DOTAChatChannelTypeT_name, DOTAChatChannelTypeT_value)
	proto.RegisterEnum("dota.EProfileCardSlotType", EProfileCardSlotType_name, EProfileCardSlotType_value)
	proto.RegisterEnum("dota.EMatchGroupServerStatus", EMatchGroupServerStatus_name, EMatchGroupServerStatus_value)
}

var fileDescriptor14 = []byte{
	// 1476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x56, 0x4b, 0x6f, 0xdb, 0xc6,
	0x13, 0x8f, 0xe4, 0x67, 0x36, 0x71, 0xb2, 0x61, 0x9c, 0xf7, 0xfb, 0xfd, 0xff, 0xab, 0x68, 0x51,
	0xf7, 0x91, 0xfb, 0x9a, 0x5c, 0x49, 0xac, 0x49, 0x2e, 0xb1, 0xbb, 0x8a, 0x22, 0xa0, 0xc0, 0x82,
	0xb6, 0xe9, 0x98, 0xa8, 0x2c, 0x0a, 0x12, 0x6d, 0xc0, 0xb7, 0x9e, 0x7b, 0xef, 0xb5, 0xe7, 0x7e,
	0x82, 0x5c, 0x8a, 0x02, 0xfd, 0x2e, 0xfd, 0x22, 0x9d, 0x25, 0x29, 0x4a, 0x14, 0xa9, 0x1c, 0x04,
	0x81, 0xf3, 0x9b, 0xdd, 0x9d, 0x9d, 0xf9, 0xcd, 0x6f, 0x16, 0xdd, 0x3b, 0x8e, 0x93, 0x40, 0x4d,
	0x4f, 0x83, 0x49, 0x78, 0xac, 0xc2, 0xd1, 0xf9, 0xd9, 0xf4, 0x9b, 0xf1, 0x24, 0x4e, 0x62, 0x63,
	0x5d, 0x03, 0xad, 0x7f, 0xd6, 0xd1, 0x8e, 0xc5, 0x24, 0x51, 0x9d, 0xe0, 0x2c, 0x74, 0xe3, 0xe3,
	0xd0, 0xb8, 0x8b, 0x8c, 0xcc, 0x40, 0x5c, 0xea, 0x32, 0x8b, 0x2a, 0x8f, 0x79, 0x14, 0x5f, 0x31,
	0x76, 0x11, 0x2e, 0xdb, 0x89, 0x8f, 0x1b, 0x55, 0xab, 0xe9, 0xe2, 0x66, 0xd5, 0xca, 0x2d, 0xbc,
	0x56, 0xb5, 0x0a, 0x0b, 0xaf, 0xd7, 0xec, 0xcb, 0xf1, 0x86, 0x71, 0x0f, 0xdd, 0x2e, 0x5b, 0x6d,
	0x4f, 0x72, 0x86, 0x37, 0xab, 0xee, 0xdd, 0x3e, 0xde, 0x32, 0x1e, 0xa3, 0xfb, 0x4b, 0x07, 0xd2,
	0x0f, 0x94, 0x8b, 0x34, 0x9c, 0xed, 0xea, 0x95, 0x3e, 0xba, 0x44, 0xe0, 0xab, 0xc6, 0x43, 0x74,
	0xb7, 0x6c, 0x97, 0x3d, 0xc9, 0xb8, 0x4d, 0x1c, 0x8c, 0xaa, 0xe7, 0xb8, 0x0c, 0x5f, 0xab, 0x5a,
	0x1d, 0x1f, 0x5f, 0xaf, 0x06, 0xeb, 0x33, 0xe6, 0xec, 0xe1, 0x9d, 0xaa, 0x7b, 0xbb, 0x8b, 0x6f,
	0x18, 0xf7, 0xd1, 0xee, 0x52, 0xce, 0x7a, 0x42, 0x32, 0x17, 0xdf, 0xac, 0xc9, 0xa6, 0x85, 0x71,
	0xd5, 0xba, 0x6f, 0xe1, 0x5b, 0xc6, 0x33, 0xf4, 0x68, 0x29, 0x6f, 0xfb, 0xb6, 0x63, 0xcb, 0x81,
	0xb2, 0x38, 0x69, 0x4b, 0x6c, 0x54, 0xa3, 0x82, 0x94, 0x78, 0x12, 0xdf, 0xae, 0xa6, 0x83, 0x70,
	0xcb, 0xc5, 0xbb, 0xd5, 0xb8, 0xf6, 0x3e, 0xec, 0xb9, 0xb6, 0x85, 0xef, 0x18, 0x8f, 0xd0, 0xbd,
	0xa5, 0x15, 0x8e, 0x93, 0x9f, 0x73, 0xb7, 0xf5, 0xf7, 0x1a, 0xba, 0x51, 0x50, 0x48, 0x24, 0x41,
	0x12, 0x1a, 0x4f, 0xd0, 0x83, 0xc2, 0x9f, 0xf7, 0x1c, 0x2a, 0x94, 0x90, 0x44, 0xea, 0x22, 0xda,
	0x12, 0xa8, 0xb4, 0x87, 0xbe, 0xae, 0x85, 0xfb, 0xc4, 0x96, 0xaa, 0xcd, 0xb8, 0xf2, 0x1d, 0x32,
	0x80, 0xf2, 0x29, 0xc9, 0x94, 0xc3, 0x88, 0x05, 0x3c, 0x7b, 0x87, 0x5e, 0xd5, 0x2e, 0xe9, 0x52,
	0xce, 0x94, 0xa0, 0x0e, 0x35, 0xa5, 0xcd, 0x3c, 0xa0, 0xde, 0x5b, 0xf4, 0xb2, 0xd6, 0x51, 0x48,
	0x0e, 0x7f, 0x9d, 0x81, 0x92, 0xb6, 0x4b, 0x81, 0x8c, 0x2f, 0xd0, 0x93, 0x5a, 0x3f, 0x9f, 0xd3,
	0xd4, 0x06, 0xcc, 0xfc, 0x3f, 0x7a, 0x53, 0xeb, 0xa2, 0xbf, 0xe1, 0x2a, 0xe0, 0xca, 0x3a, 0x9c,
	0x0a, 0x01, 0x74, 0x7d, 0x89, 0x9e, 0xd6, 0xef, 0xc6, 0x84, 0xcc, 0xb6, 0xdb, 0x34, 0x5e, 0xa1,
	0x67, 0xb5, 0x3e, 0x96, 0x2d, 0x4c, 0xe6, 0x79, 0x70, 0x03, 0x20, 0xf2, 0xaa, 0xf0, 0x25, 0x25,
	0xae, 0x12, 0x5d, 0xd6, 0x37, 0x89, 0xa0, 0x40, 0xe9, 0x16, 0x7a, 0x5b, 0xeb, 0x97, 0x51, 0x29,
	0x0b, 0x51, 0x50, 0xd9, 0xf3, 0x81, 0xe6, 0xab, 0xaa, 0xe1, 0x10, 0x21, 0x31, 0x6a, 0x7d, 0x6e,
	0xa0, 0xeb, 0x19, 0x6e, 0xa6, 0xc7, 0xcc, 0xdb, 0x22, 0xfb, 0x56, 0x1d, 0xc6, 0x2c, 0xd5, 0xe9,
	0x0d, 0x04, 0x94, 0xee, 0x01, 0xba, 0x53, 0xc2, 0xf6, 0x49, 0x0e, 0x35, 0xe6, 0x3d, 0x38, 0x83,
	0x38, 0x94, 0x0e, 0xc2, 0x95, 0x94, 0x43, 0x5d, 0x96, 0x37, 0x15, 0x3e, 0x5c, 0x98, 0x40, 0xbb,
	0x41, 0x2d, 0x96, 0x57, 0x66, 0xe5, 0x4f, 0xbb, 0x08, 0xca, 0x50, 0xf0, 0x38, 0x47, 0x3d, 0xa6,
	0xff, 0xf0, 0x46, 0xeb, 0xf3, 0x1a, 0xda, 0xa4, 0xf4, 0x22, 0x1c, 0x25, 0xc6, 0x2d, 0xb4, 0x93,
	0xb2, 0x5b, 0xd9, 0xd6, 0x4c, 0xaf, 0xee, 0xa0, 0x5b, 0x85, 0xc9, 0xb2, 0x39, 0x95, 0xb6, 0x45,
	0xb3, 0x28, 0x0b, 0xb3, 0xf0, 0xb9, 0xed, 0x75, 0x54, 0x9b, 0x0a, 0x69, 0x7f, 0x80, 0xae, 0x6f,
	0x6a, 0xa2, 0x17, 0x68, 0x9b, 0x33, 0x6d, 0xef, 0x09, 0xf5, 0xdd, 0xb7, 0x7b, 0xdf, 0x67, 0x61,
	0x16, 0xa0, 0xc9, 0x5c, 0x9f, 0x7a, 0x96, 0xdd, 0x73, 0x35, 0xfa, 0x03, 0x84, 0x09, 0x17, 0x9c,
	0x87, 0x40, 0x3f, 0x32, 0xe0, 0x87, 0x09, 0xe9, 0xf1, 0x3a, 0x40, 0x8f, 0x45, 0xcc, 0xef, 0x73,
	0x08, 0x88, 0x98, 0x7a, 0xdd, 0x8f, 0x40, 0x8b, 0xc5, 0x23, 0x3d, 0xda, 0x57, 0xfb, 0x0e, 0x63,
	0x6e, 0x06, 0x6e, 0xe9, 0x26, 0x2f, 0x40, 0x50, 0x40, 0xca, 0x3d, 0xa2, 0x79, 0x4e, 0x9c, 0xcc,
	0x61, 0xbb, 0x14, 0x53, 0x5b, 0x77, 0xa5, 0x4b, 0x7e, 0x82, 0x06, 0x4a, 0xd1, 0xab, 0xba, 0xd3,
	0x0b, 0x94, 0x71, 0x62, 0x3a, 0xc0, 0x48, 0x02, 0xe2, 0xf6, 0x1a, 0x3d, 0x5f, 0x71, 0xa6, 0xe6,
	0xff, 0x3e, 0xd5, 0xc4, 0xb8, 0x56, 0x5a, 0x5d, 0x24, 0x03, 0xe4, 0xee, 0x29, 0x7a, 0x58, 0xd8,
	0xfb, 0x69, 0x54, 0xf3, 0x53, 0xdf, 0x83, 0xea, 0x7d, 0x31, 0xe8, 0xf7, 0xf8, 0x46, 0xeb, 0xcf,
	0x66, 0xa6, 0x40, 0x4e, 0x18, 0x5c, 0x84, 0x13, 0x2d, 0x19, 0xe7, 0x53, 0x95, 0x14, 0x3a, 0xe7,
	0x50, 0x02, 0xe2, 0x3d, 0xab, 0xe3, 0x8c, 0x1c, 0xb9, 0x75, 0xde, 0x2d, 0x54, 0xeb, 0xc2, 0x1b,
	0xf4, 0x62, 0x15, 0x0a, 0xea, 0xa1, 0xe5, 0x03, 0x0a, 0xd0, 0x2c, 0x68, 0x9b, 0xbb, 0x11, 0xa8,
	0x8b, 0x05, 0xdb, 0xeb, 0xa9, 0x74, 0x1b, 0xdd, 0x2c, 0x41, 0xed, 0x03, 0x28, 0xe6, 0x4c, 0x5c,
	0x67, 0xa1, 0xe8, 0x69, 0xa2, 0xe6, 0xe7, 0x6e, 0x18, 0xff, 0x43, 0xaf, 0xbf, 0xe0, 0x30, 0x3f,
	0x7a, 0xb3, 0x90, 0x86, 0xdc, 0xb3, 0x4d, 0x6c, 0x27, 0x75, 0x80, 0x11, 0x45, 0xac, 0x81, 0x82,
	0x0e, 0xdd, 0x2a, 0x94, 0x77, 0x76, 0x0b, 0x6a, 0x3a, 0xb6, 0x8e, 0x6e, 0xbb, 0xf5, 0x47, 0x33,
	0x8b, 0xdc, 0x8c, 0x47, 0xa3, 0xf0, 0x28, 0x89, 0xe2, 0x51, 0xaa, 0xb0, 0x90, 0xad, 0x99, 0x80,
	0xe5, 0x87, 0x42, 0x82, 0xf3, 0xb6, 0xee, 0x79, 0x07, 0x1e, 0xeb, 0x7b, 0x90, 0xba, 0xaf, 0xd0,
	0xbb, 0x7a, 0x17, 0x68, 0x21, 0x35, 0xa0, 0x52, 0x2d, 0x66, 0x72, 0x26, 0x4f, 0x15, 0xe7, 0xb9,
	0xd3, 0x5c, 0x5d, 0x2b, 0x4e, 0xa5, 0xb2, 0xac, 0xad, 0xde, 0x6c, 0x9e, 0xf9, 0xf5, 0xd5, 0x37,
	0xd0, 0x9a, 0x6f, 0xa7, 0x8d, 0xf3, 0x1c, 0x3d, 0xae, 0x77, 0xc9, 0xd2, 0x88, 0x37, 0x5b, 0x3f,
	0xa3, 0x9d, 0x76, 0x30, 0x4a, 0x82, 0xe9, 0xa5, 0xe2, 0xf1, 0x30, 0x9c, 0xea, 0x5e, 0x6b, 0x13,
	0x4f, 0x12, 0x31, 0x50, 0x9c, 0x39, 0x3a, 0x1d, 0x16, 0x6d, 0xa7, 0xd9, 0x4c, 0x35, 0xa1, 0x84,
	0x99, 0x8c, 0x6b, 0x4d, 0x80, 0xf4, 0x97, 0xcc, 0xa2, 0xe7, 0xfb, 0x8c, 0x4b, 0xdc, 0x6c, 0xfd,
	0xd6, 0x40, 0xc6, 0x6c, 0x7b, 0x19, 0x06, 0x67, 0x4a, 0x0c, 0xe3, 0x64, 0xba, 0xb8, 0x8f, 0x70,
	0x20, 0x97, 0x73, 0xc9, 0x29, 0x99, 0xab, 0xdb, 0xa7, 0xe6, 0x62, 0x7b, 0xcd, 0xf8, 0x12, 0x42,
	0xbc, 0x01, 0x24, 0x0f, 0xfa, 0xae, 0x64, 0xdd, 0xa7, 0x9e, 0xd9, 0xc5, 0xeb, 0xad, 0xbf, 0x9a,
	0x70, 0xb5, 0x3c, 0x18, 0x11, 0x0e, 0x33, 0x3a, 0xa8, 0xf4, 0xd1, 0x06, 0x12, 0x5f, 0x2c, 0x99,
	0x0d, 0x43, 0xe8, 0x3d, 0x10, 0x35, 0xdb, 0xca, 0x7a, 0xa8, 0x0a, 0x3b, 0xcc, 0x3c, 0x48, 0x2b,
	0x5f, 0xbb, 0x58, 0x74, 0x7b, 0xed, 0xb6, 0x43, 0x21, 0x48, 0xe8, 0x85, 0x2a, 0xdc, 0xe6, 0x14,
	0xb4, 0xc4, 0x36, 0x0f, 0x20, 0x5e, 0x50, 0xb0, 0xaa, 0x03, 0x88, 0x63, 0x5a, 0x64, 0xa8, 0x60,
	0x15, 0xd4, 0x43, 0x56, 0x80, 0xca, 0xc0, 0xc4, 0xde, 0xa8, 0xdf, 0x5f, 0x7b, 0x64, 0x0f, 0x8c,
	0x4d, 0xad, 0x37, 0x55, 0x87, 0x14, 0xd4, 0x24, 0xd9, 0xd2, 0x6a, 0x56, 0xc5, 0x39, 0xed, 0xf4,
	0x1c, 0xc2, 0x67, 0xc7, 0x6c, 0xeb, 0x97, 0x6e, 0xd6, 0x49, 0xa7, 0x41, 0x02, 0x3f, 0x68, 0xa7,
	0xa1, 0xbc, 0x1c, 0xeb, 0x4e, 0xca, 0x15, 0x66, 0xd1, 0xc8, 0xc3, 0x4f, 0x90, 0xdb, 0x60, 0x08,
	0xb9, 0xcb, 0x07, 0xd7, 0x22, 0x6a, 0x9e, 0x4f, 0x93, 0xf8, 0x0c, 0x32, 0xf7, 0xa0, 0xd8, 0xb2,
	0xc0, 0xfc, 0x60, 0x92, 0x5c, 0xce, 0x15, 0x67, 0x11, 0x72, 0xe2, 0xc3, 0xc3, 0x4b, 0xc8, 0x57,
	0xde, 0xed, 0x8b, 0x90, 0xe6, 0x16, 0x24, 0xab, 0x66, 0x51, 0xe7, 0x3c, 0x1a, 0x1e, 0x43, 0x96,
	0xf2, 0x27, 0xd8, 0x22, 0x94, 0x73, 0x21, 0x9b, 0x21, 0xcb, 0x60, 0xff, 0x34, 0x9a, 0x8e, 0xc3,
	0x09, 0xa4, 0xa7, 0x06, 0x04, 0x35, 0x99, 0x42, 0xb3, 0xc0, 0xfc, 0xc8, 0x87, 0x6b, 0x29, 0x96,
	0xe0, 0x10, 0x46, 0x47, 0xcd, 0x2a, 0x7b, 0x74, 0x11, 0x0c, 0xa3, 0x63, 0x98, 0x1f, 0x35, 0xa0,
	0x7e, 0xfc, 0x91, 0xe1, 0x10, 0xc6, 0x06, 0x94, 0x6b, 0x05, 0x18, 0x85, 0x53, 0x18, 0x1f, 0x79,
	0xdb, 0x2f, 0xe3, 0x62, 0x0c, 0x84, 0x0e, 0x92, 0x78, 0x02, 0x13, 0x24, 0x6f, 0xfb, 0x65, 0x17,
	0x33, 0x0e, 0x8e, 0x4e, 0xa3, 0xd1, 0xa7, 0xf9, 0x1b, 0xba, 0x74, 0xa9, 0xe0, 0x24, 0x84, 0x37,
	0x74, 0xcd, 0xf1, 0x59, 0xbd, 0xf4, 0x0e, 0xf0, 0x9a, 0xae, 0x89, 0xdd, 0x9f, 0x44, 0x17, 0x20,
	0xaa, 0xf0, 0xa8, 0xae, 0xa1, 0x82, 0x1f, 0x4f, 0x93, 0x74, 0xa9, 0xd1, 0xfa, 0xb7, 0x81, 0x76,
	0xa9, 0x3f, 0x89, 0x4f, 0xa2, 0x61, 0x68, 0x06, 0x93, 0x63, 0x2d, 0x06, 0xda, 0x47, 0xc7, 0xfb,
	0x8b, 0xaa, 0x43, 0x14, 0x3d, 0x1b, 0x03, 0x1d, 0xae, 0x68, 0x92, 0xaf, 0xf0, 0xd0, 0x7a, 0x0e,
	0x54, 0x82, 0xac, 0xac, 0x70, 0x90, 0x93, 0x78, 0x7c, 0x7a, 0x99, 0x35, 0xe2, 0x0a, 0x17, 0x3b,
	0x09, 0xcf, 0x80, 0x58, 0xab, 0x1d, 0xba, 0xe1, 0x24, 0x06, 0x7e, 0x81, 0x2c, 0xaf, 0x8c, 0x33,
	0x4e, 0xa2, 0xa3, 0x78, 0x04, 0xcf, 0xaa, 0xdf, 0x1b, 0xf0, 0x22, 0x71, 0x83, 0xe4, 0xe8, 0xb4,
	0x33, 0x89, 0xcf, 0xc7, 0x22, 0x9c, 0x14, 0x43, 0x3a, 0xbf, 0x68, 0x3d, 0xa8, 0xd8, 0x41, 0xf6,
	0xb6, 0x5f, 0xed, 0xe1, 0x44, 0x67, 0x51, 0x12, 0x1e, 0x93, 0x8b, 0x20, 0x1a, 0x06, 0x87, 0xd1,
	0x30, 0x82, 0xdc, 0xa4, 0x33, 0xfc, 0x0b, 0x9b, 0x9e, 0x9c, 0x0c, 0xa3, 0x51, 0x88, 0x9b, 0xfb,
	0x1b, 0xdd, 0xc6, 0xaf, 0x8d, 0x2b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xa7, 0x9f, 0xc4,
	0xd1, 0x0e, 0x00, 0x00,
}
