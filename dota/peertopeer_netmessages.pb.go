// Code generated by protoc-gen-go.
// source: peertopeer_netmessages.proto
// DO NOT EDIT!

package dota

import proto "github.com/golang/protobuf/proto"
import math "math"

// discarding unused import google_protobuf "github.com/dotabuff/manta/dota/google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type P2P_Messages int32

const (
	P2P_Messages_p2p_TextMessage P2P_Messages = 256
	P2P_Messages_p2p_Voice       P2P_Messages = 257
)

var P2P_Messages_name = map[int32]string{
	256: "p2p_TextMessage",
	257: "p2p_Voice",
}
var P2P_Messages_value = map[string]int32{
	"p2p_TextMessage": 256,
	"p2p_Voice":       257,
}

func (x P2P_Messages) Enum() *P2P_Messages {
	p := new(P2P_Messages)
	*p = x
	return p
}
func (x P2P_Messages) String() string {
	return proto.EnumName(P2P_Messages_name, int32(x))
}
func (x *P2P_Messages) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(P2P_Messages_value, data, "P2P_Messages")
	if err != nil {
		return err
	}
	*x = P2P_Messages(value)
	return nil
}

type CP2P_Voice_Handler_Flags int32

const (
	CP2P_Voice_Played_Audio CP2P_Voice_Handler_Flags = 1
)

var CP2P_Voice_Handler_Flags_name = map[int32]string{
	1: "Played_Audio",
}
var CP2P_Voice_Handler_Flags_value = map[string]int32{
	"Played_Audio": 1,
}

func (x CP2P_Voice_Handler_Flags) Enum() *CP2P_Voice_Handler_Flags {
	p := new(CP2P_Voice_Handler_Flags)
	*p = x
	return p
}
func (x CP2P_Voice_Handler_Flags) String() string {
	return proto.EnumName(CP2P_Voice_Handler_Flags_name, int32(x))
}
func (x *CP2P_Voice_Handler_Flags) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CP2P_Voice_Handler_Flags_value, data, "CP2P_Voice_Handler_Flags")
	if err != nil {
		return err
	}
	*x = CP2P_Voice_Handler_Flags(value)
	return nil
}

type CP2P_TextMessage struct {
	Text             []byte `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CP2P_TextMessage) Reset()         { *m = CP2P_TextMessage{} }
func (m *CP2P_TextMessage) String() string { return proto.CompactTextString(m) }
func (*CP2P_TextMessage) ProtoMessage()    {}

func (m *CP2P_TextMessage) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

type CSteam_Voice_Encoding struct {
	VoiceData        []byte `protobuf:"bytes,1,opt,name=voice_data" json:"voice_data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSteam_Voice_Encoding) Reset()         { *m = CSteam_Voice_Encoding{} }
func (m *CSteam_Voice_Encoding) String() string { return proto.CompactTextString(m) }
func (*CSteam_Voice_Encoding) ProtoMessage()    {}

func (m *CSteam_Voice_Encoding) GetVoiceData() []byte {
	if m != nil {
		return m.VoiceData
	}
	return nil
}

type CP2P_Voice struct {
	SampleRate        *uint32                `protobuf:"varint,1,opt,name=sample_rate" json:"sample_rate,omitempty"`
	SampleCount       *uint32                `protobuf:"varint,2,opt,name=sample_count" json:"sample_count,omitempty"`
	SampleCaptureTime *float32               `protobuf:"fixed32,3,opt,name=sample_capture_time" json:"sample_capture_time,omitempty"`
	ClientIndex       *int32                 `protobuf:"varint,4,opt,name=client_index" json:"client_index,omitempty"`
	SteamEncoding     *CSteam_Voice_Encoding `protobuf:"bytes,5,opt,name=steam_encoding" json:"steam_encoding,omitempty"`
	XXX_unrecognized  []byte                 `json:"-"`
}

func (m *CP2P_Voice) Reset()         { *m = CP2P_Voice{} }
func (m *CP2P_Voice) String() string { return proto.CompactTextString(m) }
func (*CP2P_Voice) ProtoMessage()    {}

func (m *CP2P_Voice) GetSampleRate() uint32 {
	if m != nil && m.SampleRate != nil {
		return *m.SampleRate
	}
	return 0
}

func (m *CP2P_Voice) GetSampleCount() uint32 {
	if m != nil && m.SampleCount != nil {
		return *m.SampleCount
	}
	return 0
}

func (m *CP2P_Voice) GetSampleCaptureTime() float32 {
	if m != nil && m.SampleCaptureTime != nil {
		return *m.SampleCaptureTime
	}
	return 0
}

func (m *CP2P_Voice) GetClientIndex() int32 {
	if m != nil && m.ClientIndex != nil {
		return *m.ClientIndex
	}
	return 0
}

func (m *CP2P_Voice) GetSteamEncoding() *CSteam_Voice_Encoding {
	if m != nil {
		return m.SteamEncoding
	}
	return nil
}

func init() {
	proto.RegisterEnum("dota.P2P_Messages", P2P_Messages_name, P2P_Messages_value)
	proto.RegisterEnum("dota.CP2P_Voice_Handler_Flags", CP2P_Voice_Handler_Flags_name, CP2P_Voice_Handler_Flags_value)
}
